// Code generated by Prisma Client Go. DO NOT EDIT.
//nolint
// +build !codeanalysis

package db

import (
	"context"
	"errors"
	"fmt"

	"github.com/prisma/prisma-client-go/engine"
	"github.com/prisma/prisma-client-go/generator/builder"
	"github.com/prisma/prisma-client-go/generator/raw"
	"github.com/prisma/prisma-client-go/generator/runtime"
)

// re-declare variables which are needed in Prisma Client Go but also should be exported
// in the generated client

type DateTime = runtime.DateTime

type Direction = runtime.Direction

const (
	ASC  Direction = runtime.ASC
	DESC Direction = runtime.DESC
)

const RFC3339Milli = runtime.RFC3339Milli

// --- template actions.gotpl ---
var countOutput = []builder.Output{
	{Name: "count"},
}

type userActions struct {
	// client holds the prisma client
	client *PrismaClient
}

var userOutput = []builder.Output{
	{Name: "id"},
	{Name: "createdAt"},
	{Name: "deletedAt"},
	{Name: "updatedAt"},
	{Name: "discordUserId"},
	{Name: "email"},
	{Name: "discordUsername"},
	{Name: "firstName"},
	{Name: "lastName"},
}

type iUserRelationWith interface {
	getQuery() builder.Query
	with()
	userRelation()
}

type iUserParams interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
}

type userParams struct {
	data  builder.Field
	query builder.Query
}

func (p userParams) field() builder.Field {
	return p.data
}

func (p userParams) getQuery() builder.Query {
	return p.query
}

func (p userParams) userModel() {}

type iUserOrderByParams interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
}

type userOrderByParams struct {
	data  builder.Field
	query builder.Query
}

func (p userOrderByParams) field() builder.Field {
	return p.data
}

func (p userOrderByParams) getQuery() builder.Query {
	return p.query
}

func (p userOrderByParams) userModel() {}

type iUserCursorParams interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	isCursor()
}

type userCursorParams struct {
	data  builder.Field
	query builder.Query
}

func (p userCursorParams) field() builder.Field {
	return p.data
}

func (p userCursorParams) isCursor() {}

func (p userCursorParams) getQuery() builder.Query {
	return p.query
}

func (p userCursorParams) userModel() {}

type iUserParamsUnique interface {
	field() builder.Field
	getQuery() builder.Query
	unique()
	userModel()
}

type userParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p userParamsUnique) userModel() {}

func (userParamsUnique) unique() {}

func (p userParamsUnique) field() builder.Field {
	return p.data
}

func (p userParamsUnique) getQuery() builder.Query {
	return p.query
}

type iUserEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
}

type userEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p userEqualsParams) userModel() {}

func (userEqualsParams) equals() {}

func (p userEqualsParams) field() builder.Field {
	return p.data
}

func (p userEqualsParams) getQuery() builder.Query {
	return p.query
}

type iUserEqualsParamsUnique interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	unique()
	userModel()
}

type userEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p userEqualsParamsUnique) userModel() {}

func (userEqualsParamsUnique) unique() {}
func (userEqualsParamsUnique) equals() {}

func (p userEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p userEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

type iUserSetParams interface {
	field() builder.Field
	settable()
}

type userSetParams struct {
	data builder.Field
}

func (userSetParams) settable() {}

func (p userSetParams) field() builder.Field {
	return p.data
}

type iUserWithPrismaIDEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	idField()
}

type userWithPrismaIDSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaIDSetParams) field() builder.Field {
	return p.data
}

func (p userWithPrismaIDSetParams) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaIDSetParams) userModel() {}

func (p userWithPrismaIDSetParams) idField() {}

type userWithPrismaIDEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaIDEqualsParams) field() builder.Field {
	return p.data
}

func (p userWithPrismaIDEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaIDEqualsParams) userModel() {}

func (p userWithPrismaIDEqualsParams) idField() {}

func (userWithPrismaIDSetParams) settable()  {}
func (userWithPrismaIDEqualsParams) equals() {}

type userWithPrismaIDEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaIDEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p userWithPrismaIDEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaIDEqualsParamsUnique) userModel() {}
func (p userWithPrismaIDEqualsParamsUnique) idField()   {}

func (userWithPrismaIDEqualsParamsUnique) unique() {}
func (userWithPrismaIDEqualsParamsUnique) equals() {}

type iUserWithPrismaCreatedAtEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	createdAtField()
}

type userWithPrismaCreatedAtSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaCreatedAtSetParams) field() builder.Field {
	return p.data
}

func (p userWithPrismaCreatedAtSetParams) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaCreatedAtSetParams) userModel() {}

func (p userWithPrismaCreatedAtSetParams) createdAtField() {}

type userWithPrismaCreatedAtEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaCreatedAtEqualsParams) field() builder.Field {
	return p.data
}

func (p userWithPrismaCreatedAtEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaCreatedAtEqualsParams) userModel() {}

func (p userWithPrismaCreatedAtEqualsParams) createdAtField() {}

func (userWithPrismaCreatedAtSetParams) settable()  {}
func (userWithPrismaCreatedAtEqualsParams) equals() {}

type userWithPrismaCreatedAtEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaCreatedAtEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p userWithPrismaCreatedAtEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaCreatedAtEqualsParamsUnique) userModel()      {}
func (p userWithPrismaCreatedAtEqualsParamsUnique) createdAtField() {}

func (userWithPrismaCreatedAtEqualsParamsUnique) unique() {}
func (userWithPrismaCreatedAtEqualsParamsUnique) equals() {}

type iUserWithPrismaDeletedAtEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	deletedAtField()
}

type userWithPrismaDeletedAtSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaDeletedAtSetParams) field() builder.Field {
	return p.data
}

func (p userWithPrismaDeletedAtSetParams) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaDeletedAtSetParams) userModel() {}

func (p userWithPrismaDeletedAtSetParams) deletedAtField() {}

type userWithPrismaDeletedAtEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaDeletedAtEqualsParams) field() builder.Field {
	return p.data
}

func (p userWithPrismaDeletedAtEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaDeletedAtEqualsParams) userModel() {}

func (p userWithPrismaDeletedAtEqualsParams) deletedAtField() {}

func (userWithPrismaDeletedAtSetParams) settable()  {}
func (userWithPrismaDeletedAtEqualsParams) equals() {}

type userWithPrismaDeletedAtEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaDeletedAtEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p userWithPrismaDeletedAtEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaDeletedAtEqualsParamsUnique) userModel()      {}
func (p userWithPrismaDeletedAtEqualsParamsUnique) deletedAtField() {}

func (userWithPrismaDeletedAtEqualsParamsUnique) unique() {}
func (userWithPrismaDeletedAtEqualsParamsUnique) equals() {}

type iUserWithPrismaUpdatedAtEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	updatedAtField()
}

type userWithPrismaUpdatedAtSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaUpdatedAtSetParams) field() builder.Field {
	return p.data
}

func (p userWithPrismaUpdatedAtSetParams) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaUpdatedAtSetParams) userModel() {}

func (p userWithPrismaUpdatedAtSetParams) updatedAtField() {}

type userWithPrismaUpdatedAtEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaUpdatedAtEqualsParams) field() builder.Field {
	return p.data
}

func (p userWithPrismaUpdatedAtEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaUpdatedAtEqualsParams) userModel() {}

func (p userWithPrismaUpdatedAtEqualsParams) updatedAtField() {}

func (userWithPrismaUpdatedAtSetParams) settable()  {}
func (userWithPrismaUpdatedAtEqualsParams) equals() {}

type userWithPrismaUpdatedAtEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaUpdatedAtEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p userWithPrismaUpdatedAtEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaUpdatedAtEqualsParamsUnique) userModel()      {}
func (p userWithPrismaUpdatedAtEqualsParamsUnique) updatedAtField() {}

func (userWithPrismaUpdatedAtEqualsParamsUnique) unique() {}
func (userWithPrismaUpdatedAtEqualsParamsUnique) equals() {}

type iUserWithPrismaDiscordUserIDEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	discordUserIDField()
}

type userWithPrismaDiscordUserIDSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaDiscordUserIDSetParams) field() builder.Field {
	return p.data
}

func (p userWithPrismaDiscordUserIDSetParams) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaDiscordUserIDSetParams) userModel() {}

func (p userWithPrismaDiscordUserIDSetParams) discordUserIDField() {}

type userWithPrismaDiscordUserIDEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaDiscordUserIDEqualsParams) field() builder.Field {
	return p.data
}

func (p userWithPrismaDiscordUserIDEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaDiscordUserIDEqualsParams) userModel() {}

func (p userWithPrismaDiscordUserIDEqualsParams) discordUserIDField() {}

func (userWithPrismaDiscordUserIDSetParams) settable()  {}
func (userWithPrismaDiscordUserIDEqualsParams) equals() {}

type userWithPrismaDiscordUserIDEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaDiscordUserIDEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p userWithPrismaDiscordUserIDEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaDiscordUserIDEqualsParamsUnique) userModel()          {}
func (p userWithPrismaDiscordUserIDEqualsParamsUnique) discordUserIDField() {}

func (userWithPrismaDiscordUserIDEqualsParamsUnique) unique() {}
func (userWithPrismaDiscordUserIDEqualsParamsUnique) equals() {}

type iUserWithPrismaEmailEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	emailField()
}

type userWithPrismaEmailSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaEmailSetParams) field() builder.Field {
	return p.data
}

func (p userWithPrismaEmailSetParams) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaEmailSetParams) userModel() {}

func (p userWithPrismaEmailSetParams) emailField() {}

type userWithPrismaEmailEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaEmailEqualsParams) field() builder.Field {
	return p.data
}

func (p userWithPrismaEmailEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaEmailEqualsParams) userModel() {}

func (p userWithPrismaEmailEqualsParams) emailField() {}

func (userWithPrismaEmailSetParams) settable()  {}
func (userWithPrismaEmailEqualsParams) equals() {}

type userWithPrismaEmailEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaEmailEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p userWithPrismaEmailEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaEmailEqualsParamsUnique) userModel()  {}
func (p userWithPrismaEmailEqualsParamsUnique) emailField() {}

func (userWithPrismaEmailEqualsParamsUnique) unique() {}
func (userWithPrismaEmailEqualsParamsUnique) equals() {}

type iUserWithPrismaDiscordUsernameEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	discordUsernameField()
}

type userWithPrismaDiscordUsernameSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaDiscordUsernameSetParams) field() builder.Field {
	return p.data
}

func (p userWithPrismaDiscordUsernameSetParams) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaDiscordUsernameSetParams) userModel() {}

func (p userWithPrismaDiscordUsernameSetParams) discordUsernameField() {}

type userWithPrismaDiscordUsernameEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaDiscordUsernameEqualsParams) field() builder.Field {
	return p.data
}

func (p userWithPrismaDiscordUsernameEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaDiscordUsernameEqualsParams) userModel() {}

func (p userWithPrismaDiscordUsernameEqualsParams) discordUsernameField() {}

func (userWithPrismaDiscordUsernameSetParams) settable()  {}
func (userWithPrismaDiscordUsernameEqualsParams) equals() {}

type userWithPrismaDiscordUsernameEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaDiscordUsernameEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p userWithPrismaDiscordUsernameEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaDiscordUsernameEqualsParamsUnique) userModel()            {}
func (p userWithPrismaDiscordUsernameEqualsParamsUnique) discordUsernameField() {}

func (userWithPrismaDiscordUsernameEqualsParamsUnique) unique() {}
func (userWithPrismaDiscordUsernameEqualsParamsUnique) equals() {}

type iUserWithPrismaFirstNameEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	firstNameField()
}

type userWithPrismaFirstNameSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaFirstNameSetParams) field() builder.Field {
	return p.data
}

func (p userWithPrismaFirstNameSetParams) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaFirstNameSetParams) userModel() {}

func (p userWithPrismaFirstNameSetParams) firstNameField() {}

type userWithPrismaFirstNameEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaFirstNameEqualsParams) field() builder.Field {
	return p.data
}

func (p userWithPrismaFirstNameEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaFirstNameEqualsParams) userModel() {}

func (p userWithPrismaFirstNameEqualsParams) firstNameField() {}

func (userWithPrismaFirstNameSetParams) settable()  {}
func (userWithPrismaFirstNameEqualsParams) equals() {}

type userWithPrismaFirstNameEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaFirstNameEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p userWithPrismaFirstNameEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaFirstNameEqualsParamsUnique) userModel()      {}
func (p userWithPrismaFirstNameEqualsParamsUnique) firstNameField() {}

func (userWithPrismaFirstNameEqualsParamsUnique) unique() {}
func (userWithPrismaFirstNameEqualsParamsUnique) equals() {}

type iUserWithPrismaLastNameEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	lastNameField()
}

type userWithPrismaLastNameSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaLastNameSetParams) field() builder.Field {
	return p.data
}

func (p userWithPrismaLastNameSetParams) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaLastNameSetParams) userModel() {}

func (p userWithPrismaLastNameSetParams) lastNameField() {}

type userWithPrismaLastNameEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaLastNameEqualsParams) field() builder.Field {
	return p.data
}

func (p userWithPrismaLastNameEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaLastNameEqualsParams) userModel() {}

func (p userWithPrismaLastNameEqualsParams) lastNameField() {}

func (userWithPrismaLastNameSetParams) settable()  {}
func (userWithPrismaLastNameEqualsParams) equals() {}

type userWithPrismaLastNameEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaLastNameEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p userWithPrismaLastNameEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaLastNameEqualsParamsUnique) userModel()     {}
func (p userWithPrismaLastNameEqualsParamsUnique) lastNameField() {}

func (userWithPrismaLastNameEqualsParamsUnique) unique() {}
func (userWithPrismaLastNameEqualsParamsUnique) equals() {}

type iUserWithPrismaAvatarEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	avatarField()
}

type userWithPrismaAvatarSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaAvatarSetParams) field() builder.Field {
	return p.data
}

func (p userWithPrismaAvatarSetParams) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaAvatarSetParams) userModel() {}

func (p userWithPrismaAvatarSetParams) avatarField() {}

type userWithPrismaAvatarEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaAvatarEqualsParams) field() builder.Field {
	return p.data
}

func (p userWithPrismaAvatarEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaAvatarEqualsParams) userModel() {}

func (p userWithPrismaAvatarEqualsParams) avatarField() {}

func (userWithPrismaAvatarSetParams) settable()  {}
func (userWithPrismaAvatarEqualsParams) equals() {}

type userWithPrismaAvatarEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaAvatarEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p userWithPrismaAvatarEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaAvatarEqualsParamsUnique) userModel()   {}
func (p userWithPrismaAvatarEqualsParamsUnique) avatarField() {}

func (userWithPrismaAvatarEqualsParamsUnique) unique() {}
func (userWithPrismaAvatarEqualsParamsUnique) equals() {}

type avatarActions struct {
	// client holds the prisma client
	client *PrismaClient
}

var avatarOutput = []builder.Output{
	{Name: "id"},
	{Name: "createdAt"},
	{Name: "deletedAt"},
	{Name: "updatedAt"},
	{Name: "userId"},
}

type iAvatarRelationWith interface {
	getQuery() builder.Query
	with()
	avatarRelation()
}

type iAvatarParams interface {
	field() builder.Field
	getQuery() builder.Query
	avatarModel()
}

type avatarParams struct {
	data  builder.Field
	query builder.Query
}

func (p avatarParams) field() builder.Field {
	return p.data
}

func (p avatarParams) getQuery() builder.Query {
	return p.query
}

func (p avatarParams) avatarModel() {}

type iAvatarOrderByParams interface {
	field() builder.Field
	getQuery() builder.Query
	avatarModel()
}

type avatarOrderByParams struct {
	data  builder.Field
	query builder.Query
}

func (p avatarOrderByParams) field() builder.Field {
	return p.data
}

func (p avatarOrderByParams) getQuery() builder.Query {
	return p.query
}

func (p avatarOrderByParams) avatarModel() {}

type iAvatarCursorParams interface {
	field() builder.Field
	getQuery() builder.Query
	avatarModel()
	isCursor()
}

type avatarCursorParams struct {
	data  builder.Field
	query builder.Query
}

func (p avatarCursorParams) field() builder.Field {
	return p.data
}

func (p avatarCursorParams) isCursor() {}

func (p avatarCursorParams) getQuery() builder.Query {
	return p.query
}

func (p avatarCursorParams) avatarModel() {}

type iAvatarParamsUnique interface {
	field() builder.Field
	getQuery() builder.Query
	unique()
	avatarModel()
}

type avatarParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p avatarParamsUnique) avatarModel() {}

func (avatarParamsUnique) unique() {}

func (p avatarParamsUnique) field() builder.Field {
	return p.data
}

func (p avatarParamsUnique) getQuery() builder.Query {
	return p.query
}

type iAvatarEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	avatarModel()
}

type avatarEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p avatarEqualsParams) avatarModel() {}

func (avatarEqualsParams) equals() {}

func (p avatarEqualsParams) field() builder.Field {
	return p.data
}

func (p avatarEqualsParams) getQuery() builder.Query {
	return p.query
}

type iAvatarEqualsParamsUnique interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	unique()
	avatarModel()
}

type avatarEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p avatarEqualsParamsUnique) avatarModel() {}

func (avatarEqualsParamsUnique) unique() {}
func (avatarEqualsParamsUnique) equals() {}

func (p avatarEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p avatarEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

type iAvatarSetParams interface {
	field() builder.Field
	settable()
}

type avatarSetParams struct {
	data builder.Field
}

func (avatarSetParams) settable() {}

func (p avatarSetParams) field() builder.Field {
	return p.data
}

type iAvatarWithPrismaIDEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	avatarModel()
	idField()
}

type avatarWithPrismaIDSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p avatarWithPrismaIDSetParams) field() builder.Field {
	return p.data
}

func (p avatarWithPrismaIDSetParams) getQuery() builder.Query {
	return p.query
}

func (p avatarWithPrismaIDSetParams) avatarModel() {}

func (p avatarWithPrismaIDSetParams) idField() {}

type avatarWithPrismaIDEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p avatarWithPrismaIDEqualsParams) field() builder.Field {
	return p.data
}

func (p avatarWithPrismaIDEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p avatarWithPrismaIDEqualsParams) avatarModel() {}

func (p avatarWithPrismaIDEqualsParams) idField() {}

func (avatarWithPrismaIDSetParams) settable()  {}
func (avatarWithPrismaIDEqualsParams) equals() {}

type avatarWithPrismaIDEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p avatarWithPrismaIDEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p avatarWithPrismaIDEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p avatarWithPrismaIDEqualsParamsUnique) avatarModel() {}
func (p avatarWithPrismaIDEqualsParamsUnique) idField()     {}

func (avatarWithPrismaIDEqualsParamsUnique) unique() {}
func (avatarWithPrismaIDEqualsParamsUnique) equals() {}

type iAvatarWithPrismaCreatedAtEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	avatarModel()
	createdAtField()
}

type avatarWithPrismaCreatedAtSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p avatarWithPrismaCreatedAtSetParams) field() builder.Field {
	return p.data
}

func (p avatarWithPrismaCreatedAtSetParams) getQuery() builder.Query {
	return p.query
}

func (p avatarWithPrismaCreatedAtSetParams) avatarModel() {}

func (p avatarWithPrismaCreatedAtSetParams) createdAtField() {}

type avatarWithPrismaCreatedAtEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p avatarWithPrismaCreatedAtEqualsParams) field() builder.Field {
	return p.data
}

func (p avatarWithPrismaCreatedAtEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p avatarWithPrismaCreatedAtEqualsParams) avatarModel() {}

func (p avatarWithPrismaCreatedAtEqualsParams) createdAtField() {}

func (avatarWithPrismaCreatedAtSetParams) settable()  {}
func (avatarWithPrismaCreatedAtEqualsParams) equals() {}

type avatarWithPrismaCreatedAtEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p avatarWithPrismaCreatedAtEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p avatarWithPrismaCreatedAtEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p avatarWithPrismaCreatedAtEqualsParamsUnique) avatarModel()    {}
func (p avatarWithPrismaCreatedAtEqualsParamsUnique) createdAtField() {}

func (avatarWithPrismaCreatedAtEqualsParamsUnique) unique() {}
func (avatarWithPrismaCreatedAtEqualsParamsUnique) equals() {}

type iAvatarWithPrismaDeletedAtEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	avatarModel()
	deletedAtField()
}

type avatarWithPrismaDeletedAtSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p avatarWithPrismaDeletedAtSetParams) field() builder.Field {
	return p.data
}

func (p avatarWithPrismaDeletedAtSetParams) getQuery() builder.Query {
	return p.query
}

func (p avatarWithPrismaDeletedAtSetParams) avatarModel() {}

func (p avatarWithPrismaDeletedAtSetParams) deletedAtField() {}

type avatarWithPrismaDeletedAtEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p avatarWithPrismaDeletedAtEqualsParams) field() builder.Field {
	return p.data
}

func (p avatarWithPrismaDeletedAtEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p avatarWithPrismaDeletedAtEqualsParams) avatarModel() {}

func (p avatarWithPrismaDeletedAtEqualsParams) deletedAtField() {}

func (avatarWithPrismaDeletedAtSetParams) settable()  {}
func (avatarWithPrismaDeletedAtEqualsParams) equals() {}

type avatarWithPrismaDeletedAtEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p avatarWithPrismaDeletedAtEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p avatarWithPrismaDeletedAtEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p avatarWithPrismaDeletedAtEqualsParamsUnique) avatarModel()    {}
func (p avatarWithPrismaDeletedAtEqualsParamsUnique) deletedAtField() {}

func (avatarWithPrismaDeletedAtEqualsParamsUnique) unique() {}
func (avatarWithPrismaDeletedAtEqualsParamsUnique) equals() {}

type iAvatarWithPrismaUpdatedAtEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	avatarModel()
	updatedAtField()
}

type avatarWithPrismaUpdatedAtSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p avatarWithPrismaUpdatedAtSetParams) field() builder.Field {
	return p.data
}

func (p avatarWithPrismaUpdatedAtSetParams) getQuery() builder.Query {
	return p.query
}

func (p avatarWithPrismaUpdatedAtSetParams) avatarModel() {}

func (p avatarWithPrismaUpdatedAtSetParams) updatedAtField() {}

type avatarWithPrismaUpdatedAtEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p avatarWithPrismaUpdatedAtEqualsParams) field() builder.Field {
	return p.data
}

func (p avatarWithPrismaUpdatedAtEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p avatarWithPrismaUpdatedAtEqualsParams) avatarModel() {}

func (p avatarWithPrismaUpdatedAtEqualsParams) updatedAtField() {}

func (avatarWithPrismaUpdatedAtSetParams) settable()  {}
func (avatarWithPrismaUpdatedAtEqualsParams) equals() {}

type avatarWithPrismaUpdatedAtEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p avatarWithPrismaUpdatedAtEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p avatarWithPrismaUpdatedAtEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p avatarWithPrismaUpdatedAtEqualsParamsUnique) avatarModel()    {}
func (p avatarWithPrismaUpdatedAtEqualsParamsUnique) updatedAtField() {}

func (avatarWithPrismaUpdatedAtEqualsParamsUnique) unique() {}
func (avatarWithPrismaUpdatedAtEqualsParamsUnique) equals() {}

type iAvatarWithPrismaUserEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	avatarModel()
	userField()
}

type avatarWithPrismaUserSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p avatarWithPrismaUserSetParams) field() builder.Field {
	return p.data
}

func (p avatarWithPrismaUserSetParams) getQuery() builder.Query {
	return p.query
}

func (p avatarWithPrismaUserSetParams) avatarModel() {}

func (p avatarWithPrismaUserSetParams) userField() {}

type avatarWithPrismaUserEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p avatarWithPrismaUserEqualsParams) field() builder.Field {
	return p.data
}

func (p avatarWithPrismaUserEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p avatarWithPrismaUserEqualsParams) avatarModel() {}

func (p avatarWithPrismaUserEqualsParams) userField() {}

func (avatarWithPrismaUserSetParams) settable()  {}
func (avatarWithPrismaUserEqualsParams) equals() {}

type avatarWithPrismaUserEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p avatarWithPrismaUserEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p avatarWithPrismaUserEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p avatarWithPrismaUserEqualsParamsUnique) avatarModel() {}
func (p avatarWithPrismaUserEqualsParamsUnique) userField()   {}

func (avatarWithPrismaUserEqualsParamsUnique) unique() {}
func (avatarWithPrismaUserEqualsParamsUnique) equals() {}

type iAvatarWithPrismaUserIDEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	avatarModel()
	userIDField()
}

type avatarWithPrismaUserIDSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p avatarWithPrismaUserIDSetParams) field() builder.Field {
	return p.data
}

func (p avatarWithPrismaUserIDSetParams) getQuery() builder.Query {
	return p.query
}

func (p avatarWithPrismaUserIDSetParams) avatarModel() {}

func (p avatarWithPrismaUserIDSetParams) userIDField() {}

type avatarWithPrismaUserIDEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p avatarWithPrismaUserIDEqualsParams) field() builder.Field {
	return p.data
}

func (p avatarWithPrismaUserIDEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p avatarWithPrismaUserIDEqualsParams) avatarModel() {}

func (p avatarWithPrismaUserIDEqualsParams) userIDField() {}

func (avatarWithPrismaUserIDSetParams) settable()  {}
func (avatarWithPrismaUserIDEqualsParams) equals() {}

type avatarWithPrismaUserIDEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p avatarWithPrismaUserIDEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p avatarWithPrismaUserIDEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p avatarWithPrismaUserIDEqualsParamsUnique) avatarModel() {}
func (p avatarWithPrismaUserIDEqualsParamsUnique) userIDField() {}

func (avatarWithPrismaUserIDEqualsParamsUnique) unique() {}
func (avatarWithPrismaUserIDEqualsParamsUnique) equals() {}

type iAvatarWithPrismaAvatarsOnRaidsEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	avatarModel()
	avatarsOnRaidsField()
}

type avatarWithPrismaAvatarsOnRaidsSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p avatarWithPrismaAvatarsOnRaidsSetParams) field() builder.Field {
	return p.data
}

func (p avatarWithPrismaAvatarsOnRaidsSetParams) getQuery() builder.Query {
	return p.query
}

func (p avatarWithPrismaAvatarsOnRaidsSetParams) avatarModel() {}

func (p avatarWithPrismaAvatarsOnRaidsSetParams) avatarsOnRaidsField() {}

type avatarWithPrismaAvatarsOnRaidsEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p avatarWithPrismaAvatarsOnRaidsEqualsParams) field() builder.Field {
	return p.data
}

func (p avatarWithPrismaAvatarsOnRaidsEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p avatarWithPrismaAvatarsOnRaidsEqualsParams) avatarModel() {}

func (p avatarWithPrismaAvatarsOnRaidsEqualsParams) avatarsOnRaidsField() {}

func (avatarWithPrismaAvatarsOnRaidsSetParams) settable()  {}
func (avatarWithPrismaAvatarsOnRaidsEqualsParams) equals() {}

type avatarWithPrismaAvatarsOnRaidsEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p avatarWithPrismaAvatarsOnRaidsEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p avatarWithPrismaAvatarsOnRaidsEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p avatarWithPrismaAvatarsOnRaidsEqualsParamsUnique) avatarModel()         {}
func (p avatarWithPrismaAvatarsOnRaidsEqualsParamsUnique) avatarsOnRaidsField() {}

func (avatarWithPrismaAvatarsOnRaidsEqualsParamsUnique) unique() {}
func (avatarWithPrismaAvatarsOnRaidsEqualsParamsUnique) equals() {}

type raidActions struct {
	// client holds the prisma client
	client *PrismaClient
}

var raidOutput = []builder.Output{
	{Name: "id"},
	{Name: "createdAt"},
	{Name: "deletedAt"},
	{Name: "updatedAt"},
	{Name: "startTime"},
	{Name: "endTime"},
	{Name: "completionProgress"},
	{Name: "active"},
	{Name: "playerLimit"},
	{Name: "playerCount"},
}

type iRaidRelationWith interface {
	getQuery() builder.Query
	with()
	raidRelation()
}

type iRaidParams interface {
	field() builder.Field
	getQuery() builder.Query
	raidModel()
}

type raidParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidParams) field() builder.Field {
	return p.data
}

func (p raidParams) getQuery() builder.Query {
	return p.query
}

func (p raidParams) raidModel() {}

type iRaidOrderByParams interface {
	field() builder.Field
	getQuery() builder.Query
	raidModel()
}

type raidOrderByParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidOrderByParams) field() builder.Field {
	return p.data
}

func (p raidOrderByParams) getQuery() builder.Query {
	return p.query
}

func (p raidOrderByParams) raidModel() {}

type iRaidCursorParams interface {
	field() builder.Field
	getQuery() builder.Query
	raidModel()
	isCursor()
}

type raidCursorParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidCursorParams) field() builder.Field {
	return p.data
}

func (p raidCursorParams) isCursor() {}

func (p raidCursorParams) getQuery() builder.Query {
	return p.query
}

func (p raidCursorParams) raidModel() {}

type iRaidParamsUnique interface {
	field() builder.Field
	getQuery() builder.Query
	unique()
	raidModel()
}

type raidParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p raidParamsUnique) raidModel() {}

func (raidParamsUnique) unique() {}

func (p raidParamsUnique) field() builder.Field {
	return p.data
}

func (p raidParamsUnique) getQuery() builder.Query {
	return p.query
}

type iRaidEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	raidModel()
}

type raidEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidEqualsParams) raidModel() {}

func (raidEqualsParams) equals() {}

func (p raidEqualsParams) field() builder.Field {
	return p.data
}

func (p raidEqualsParams) getQuery() builder.Query {
	return p.query
}

type iRaidEqualsParamsUnique interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	unique()
	raidModel()
}

type raidEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p raidEqualsParamsUnique) raidModel() {}

func (raidEqualsParamsUnique) unique() {}
func (raidEqualsParamsUnique) equals() {}

func (p raidEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p raidEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

type iRaidSetParams interface {
	field() builder.Field
	settable()
}

type raidSetParams struct {
	data builder.Field
}

func (raidSetParams) settable() {}

func (p raidSetParams) field() builder.Field {
	return p.data
}

type iRaidWithPrismaIDEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	raidModel()
	idField()
}

type raidWithPrismaIDSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidWithPrismaIDSetParams) field() builder.Field {
	return p.data
}

func (p raidWithPrismaIDSetParams) getQuery() builder.Query {
	return p.query
}

func (p raidWithPrismaIDSetParams) raidModel() {}

func (p raidWithPrismaIDSetParams) idField() {}

type raidWithPrismaIDEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidWithPrismaIDEqualsParams) field() builder.Field {
	return p.data
}

func (p raidWithPrismaIDEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p raidWithPrismaIDEqualsParams) raidModel() {}

func (p raidWithPrismaIDEqualsParams) idField() {}

func (raidWithPrismaIDSetParams) settable()  {}
func (raidWithPrismaIDEqualsParams) equals() {}

type raidWithPrismaIDEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p raidWithPrismaIDEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p raidWithPrismaIDEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p raidWithPrismaIDEqualsParamsUnique) raidModel() {}
func (p raidWithPrismaIDEqualsParamsUnique) idField()   {}

func (raidWithPrismaIDEqualsParamsUnique) unique() {}
func (raidWithPrismaIDEqualsParamsUnique) equals() {}

type iRaidWithPrismaCreatedAtEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	raidModel()
	createdAtField()
}

type raidWithPrismaCreatedAtSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidWithPrismaCreatedAtSetParams) field() builder.Field {
	return p.data
}

func (p raidWithPrismaCreatedAtSetParams) getQuery() builder.Query {
	return p.query
}

func (p raidWithPrismaCreatedAtSetParams) raidModel() {}

func (p raidWithPrismaCreatedAtSetParams) createdAtField() {}

type raidWithPrismaCreatedAtEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidWithPrismaCreatedAtEqualsParams) field() builder.Field {
	return p.data
}

func (p raidWithPrismaCreatedAtEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p raidWithPrismaCreatedAtEqualsParams) raidModel() {}

func (p raidWithPrismaCreatedAtEqualsParams) createdAtField() {}

func (raidWithPrismaCreatedAtSetParams) settable()  {}
func (raidWithPrismaCreatedAtEqualsParams) equals() {}

type raidWithPrismaCreatedAtEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p raidWithPrismaCreatedAtEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p raidWithPrismaCreatedAtEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p raidWithPrismaCreatedAtEqualsParamsUnique) raidModel()      {}
func (p raidWithPrismaCreatedAtEqualsParamsUnique) createdAtField() {}

func (raidWithPrismaCreatedAtEqualsParamsUnique) unique() {}
func (raidWithPrismaCreatedAtEqualsParamsUnique) equals() {}

type iRaidWithPrismaDeletedAtEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	raidModel()
	deletedAtField()
}

type raidWithPrismaDeletedAtSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidWithPrismaDeletedAtSetParams) field() builder.Field {
	return p.data
}

func (p raidWithPrismaDeletedAtSetParams) getQuery() builder.Query {
	return p.query
}

func (p raidWithPrismaDeletedAtSetParams) raidModel() {}

func (p raidWithPrismaDeletedAtSetParams) deletedAtField() {}

type raidWithPrismaDeletedAtEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidWithPrismaDeletedAtEqualsParams) field() builder.Field {
	return p.data
}

func (p raidWithPrismaDeletedAtEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p raidWithPrismaDeletedAtEqualsParams) raidModel() {}

func (p raidWithPrismaDeletedAtEqualsParams) deletedAtField() {}

func (raidWithPrismaDeletedAtSetParams) settable()  {}
func (raidWithPrismaDeletedAtEqualsParams) equals() {}

type raidWithPrismaDeletedAtEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p raidWithPrismaDeletedAtEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p raidWithPrismaDeletedAtEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p raidWithPrismaDeletedAtEqualsParamsUnique) raidModel()      {}
func (p raidWithPrismaDeletedAtEqualsParamsUnique) deletedAtField() {}

func (raidWithPrismaDeletedAtEqualsParamsUnique) unique() {}
func (raidWithPrismaDeletedAtEqualsParamsUnique) equals() {}

type iRaidWithPrismaUpdatedAtEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	raidModel()
	updatedAtField()
}

type raidWithPrismaUpdatedAtSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidWithPrismaUpdatedAtSetParams) field() builder.Field {
	return p.data
}

func (p raidWithPrismaUpdatedAtSetParams) getQuery() builder.Query {
	return p.query
}

func (p raidWithPrismaUpdatedAtSetParams) raidModel() {}

func (p raidWithPrismaUpdatedAtSetParams) updatedAtField() {}

type raidWithPrismaUpdatedAtEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidWithPrismaUpdatedAtEqualsParams) field() builder.Field {
	return p.data
}

func (p raidWithPrismaUpdatedAtEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p raidWithPrismaUpdatedAtEqualsParams) raidModel() {}

func (p raidWithPrismaUpdatedAtEqualsParams) updatedAtField() {}

func (raidWithPrismaUpdatedAtSetParams) settable()  {}
func (raidWithPrismaUpdatedAtEqualsParams) equals() {}

type raidWithPrismaUpdatedAtEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p raidWithPrismaUpdatedAtEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p raidWithPrismaUpdatedAtEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p raidWithPrismaUpdatedAtEqualsParamsUnique) raidModel()      {}
func (p raidWithPrismaUpdatedAtEqualsParamsUnique) updatedAtField() {}

func (raidWithPrismaUpdatedAtEqualsParamsUnique) unique() {}
func (raidWithPrismaUpdatedAtEqualsParamsUnique) equals() {}

type iRaidWithPrismaStartTimeEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	raidModel()
	startTimeField()
}

type raidWithPrismaStartTimeSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidWithPrismaStartTimeSetParams) field() builder.Field {
	return p.data
}

func (p raidWithPrismaStartTimeSetParams) getQuery() builder.Query {
	return p.query
}

func (p raidWithPrismaStartTimeSetParams) raidModel() {}

func (p raidWithPrismaStartTimeSetParams) startTimeField() {}

type raidWithPrismaStartTimeEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidWithPrismaStartTimeEqualsParams) field() builder.Field {
	return p.data
}

func (p raidWithPrismaStartTimeEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p raidWithPrismaStartTimeEqualsParams) raidModel() {}

func (p raidWithPrismaStartTimeEqualsParams) startTimeField() {}

func (raidWithPrismaStartTimeSetParams) settable()  {}
func (raidWithPrismaStartTimeEqualsParams) equals() {}

type raidWithPrismaStartTimeEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p raidWithPrismaStartTimeEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p raidWithPrismaStartTimeEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p raidWithPrismaStartTimeEqualsParamsUnique) raidModel()      {}
func (p raidWithPrismaStartTimeEqualsParamsUnique) startTimeField() {}

func (raidWithPrismaStartTimeEqualsParamsUnique) unique() {}
func (raidWithPrismaStartTimeEqualsParamsUnique) equals() {}

type iRaidWithPrismaEndTimeEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	raidModel()
	endTimeField()
}

type raidWithPrismaEndTimeSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidWithPrismaEndTimeSetParams) field() builder.Field {
	return p.data
}

func (p raidWithPrismaEndTimeSetParams) getQuery() builder.Query {
	return p.query
}

func (p raidWithPrismaEndTimeSetParams) raidModel() {}

func (p raidWithPrismaEndTimeSetParams) endTimeField() {}

type raidWithPrismaEndTimeEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidWithPrismaEndTimeEqualsParams) field() builder.Field {
	return p.data
}

func (p raidWithPrismaEndTimeEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p raidWithPrismaEndTimeEqualsParams) raidModel() {}

func (p raidWithPrismaEndTimeEqualsParams) endTimeField() {}

func (raidWithPrismaEndTimeSetParams) settable()  {}
func (raidWithPrismaEndTimeEqualsParams) equals() {}

type raidWithPrismaEndTimeEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p raidWithPrismaEndTimeEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p raidWithPrismaEndTimeEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p raidWithPrismaEndTimeEqualsParamsUnique) raidModel()    {}
func (p raidWithPrismaEndTimeEqualsParamsUnique) endTimeField() {}

func (raidWithPrismaEndTimeEqualsParamsUnique) unique() {}
func (raidWithPrismaEndTimeEqualsParamsUnique) equals() {}

type iRaidWithPrismaCompletionProgressEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	raidModel()
	completionProgressField()
}

type raidWithPrismaCompletionProgressSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidWithPrismaCompletionProgressSetParams) field() builder.Field {
	return p.data
}

func (p raidWithPrismaCompletionProgressSetParams) getQuery() builder.Query {
	return p.query
}

func (p raidWithPrismaCompletionProgressSetParams) raidModel() {}

func (p raidWithPrismaCompletionProgressSetParams) completionProgressField() {}

type raidWithPrismaCompletionProgressEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidWithPrismaCompletionProgressEqualsParams) field() builder.Field {
	return p.data
}

func (p raidWithPrismaCompletionProgressEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p raidWithPrismaCompletionProgressEqualsParams) raidModel() {}

func (p raidWithPrismaCompletionProgressEqualsParams) completionProgressField() {}

func (raidWithPrismaCompletionProgressSetParams) settable()  {}
func (raidWithPrismaCompletionProgressEqualsParams) equals() {}

type raidWithPrismaCompletionProgressEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p raidWithPrismaCompletionProgressEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p raidWithPrismaCompletionProgressEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p raidWithPrismaCompletionProgressEqualsParamsUnique) raidModel()               {}
func (p raidWithPrismaCompletionProgressEqualsParamsUnique) completionProgressField() {}

func (raidWithPrismaCompletionProgressEqualsParamsUnique) unique() {}
func (raidWithPrismaCompletionProgressEqualsParamsUnique) equals() {}

type iRaidWithPrismaActiveEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	raidModel()
	activeField()
}

type raidWithPrismaActiveSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidWithPrismaActiveSetParams) field() builder.Field {
	return p.data
}

func (p raidWithPrismaActiveSetParams) getQuery() builder.Query {
	return p.query
}

func (p raidWithPrismaActiveSetParams) raidModel() {}

func (p raidWithPrismaActiveSetParams) activeField() {}

type raidWithPrismaActiveEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidWithPrismaActiveEqualsParams) field() builder.Field {
	return p.data
}

func (p raidWithPrismaActiveEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p raidWithPrismaActiveEqualsParams) raidModel() {}

func (p raidWithPrismaActiveEqualsParams) activeField() {}

func (raidWithPrismaActiveSetParams) settable()  {}
func (raidWithPrismaActiveEqualsParams) equals() {}

type raidWithPrismaActiveEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p raidWithPrismaActiveEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p raidWithPrismaActiveEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p raidWithPrismaActiveEqualsParamsUnique) raidModel()   {}
func (p raidWithPrismaActiveEqualsParamsUnique) activeField() {}

func (raidWithPrismaActiveEqualsParamsUnique) unique() {}
func (raidWithPrismaActiveEqualsParamsUnique) equals() {}

type iRaidWithPrismaPlayerLimitEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	raidModel()
	playerLimitField()
}

type raidWithPrismaPlayerLimitSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidWithPrismaPlayerLimitSetParams) field() builder.Field {
	return p.data
}

func (p raidWithPrismaPlayerLimitSetParams) getQuery() builder.Query {
	return p.query
}

func (p raidWithPrismaPlayerLimitSetParams) raidModel() {}

func (p raidWithPrismaPlayerLimitSetParams) playerLimitField() {}

type raidWithPrismaPlayerLimitEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidWithPrismaPlayerLimitEqualsParams) field() builder.Field {
	return p.data
}

func (p raidWithPrismaPlayerLimitEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p raidWithPrismaPlayerLimitEqualsParams) raidModel() {}

func (p raidWithPrismaPlayerLimitEqualsParams) playerLimitField() {}

func (raidWithPrismaPlayerLimitSetParams) settable()  {}
func (raidWithPrismaPlayerLimitEqualsParams) equals() {}

type raidWithPrismaPlayerLimitEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p raidWithPrismaPlayerLimitEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p raidWithPrismaPlayerLimitEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p raidWithPrismaPlayerLimitEqualsParamsUnique) raidModel()        {}
func (p raidWithPrismaPlayerLimitEqualsParamsUnique) playerLimitField() {}

func (raidWithPrismaPlayerLimitEqualsParamsUnique) unique() {}
func (raidWithPrismaPlayerLimitEqualsParamsUnique) equals() {}

type iRaidWithPrismaPlayerCountEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	raidModel()
	playerCountField()
}

type raidWithPrismaPlayerCountSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidWithPrismaPlayerCountSetParams) field() builder.Field {
	return p.data
}

func (p raidWithPrismaPlayerCountSetParams) getQuery() builder.Query {
	return p.query
}

func (p raidWithPrismaPlayerCountSetParams) raidModel() {}

func (p raidWithPrismaPlayerCountSetParams) playerCountField() {}

type raidWithPrismaPlayerCountEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidWithPrismaPlayerCountEqualsParams) field() builder.Field {
	return p.data
}

func (p raidWithPrismaPlayerCountEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p raidWithPrismaPlayerCountEqualsParams) raidModel() {}

func (p raidWithPrismaPlayerCountEqualsParams) playerCountField() {}

func (raidWithPrismaPlayerCountSetParams) settable()  {}
func (raidWithPrismaPlayerCountEqualsParams) equals() {}

type raidWithPrismaPlayerCountEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p raidWithPrismaPlayerCountEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p raidWithPrismaPlayerCountEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p raidWithPrismaPlayerCountEqualsParamsUnique) raidModel()        {}
func (p raidWithPrismaPlayerCountEqualsParamsUnique) playerCountField() {}

func (raidWithPrismaPlayerCountEqualsParamsUnique) unique() {}
func (raidWithPrismaPlayerCountEqualsParamsUnique) equals() {}

type iRaidWithPrismaAvatarsOnRaidsEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	raidModel()
	avatarsOnRaidsField()
}

type raidWithPrismaAvatarsOnRaidsSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidWithPrismaAvatarsOnRaidsSetParams) field() builder.Field {
	return p.data
}

func (p raidWithPrismaAvatarsOnRaidsSetParams) getQuery() builder.Query {
	return p.query
}

func (p raidWithPrismaAvatarsOnRaidsSetParams) raidModel() {}

func (p raidWithPrismaAvatarsOnRaidsSetParams) avatarsOnRaidsField() {}

type raidWithPrismaAvatarsOnRaidsEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidWithPrismaAvatarsOnRaidsEqualsParams) field() builder.Field {
	return p.data
}

func (p raidWithPrismaAvatarsOnRaidsEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p raidWithPrismaAvatarsOnRaidsEqualsParams) raidModel() {}

func (p raidWithPrismaAvatarsOnRaidsEqualsParams) avatarsOnRaidsField() {}

func (raidWithPrismaAvatarsOnRaidsSetParams) settable()  {}
func (raidWithPrismaAvatarsOnRaidsEqualsParams) equals() {}

type raidWithPrismaAvatarsOnRaidsEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p raidWithPrismaAvatarsOnRaidsEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p raidWithPrismaAvatarsOnRaidsEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p raidWithPrismaAvatarsOnRaidsEqualsParamsUnique) raidModel()           {}
func (p raidWithPrismaAvatarsOnRaidsEqualsParamsUnique) avatarsOnRaidsField() {}

func (raidWithPrismaAvatarsOnRaidsEqualsParamsUnique) unique() {}
func (raidWithPrismaAvatarsOnRaidsEqualsParamsUnique) equals() {}

type iRaidWithPrismaRaidBossesOnRaidsEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	raidModel()
	raidBossesOnRaidsField()
}

type raidWithPrismaRaidBossesOnRaidsSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidWithPrismaRaidBossesOnRaidsSetParams) field() builder.Field {
	return p.data
}

func (p raidWithPrismaRaidBossesOnRaidsSetParams) getQuery() builder.Query {
	return p.query
}

func (p raidWithPrismaRaidBossesOnRaidsSetParams) raidModel() {}

func (p raidWithPrismaRaidBossesOnRaidsSetParams) raidBossesOnRaidsField() {}

type raidWithPrismaRaidBossesOnRaidsEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidWithPrismaRaidBossesOnRaidsEqualsParams) field() builder.Field {
	return p.data
}

func (p raidWithPrismaRaidBossesOnRaidsEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p raidWithPrismaRaidBossesOnRaidsEqualsParams) raidModel() {}

func (p raidWithPrismaRaidBossesOnRaidsEqualsParams) raidBossesOnRaidsField() {}

func (raidWithPrismaRaidBossesOnRaidsSetParams) settable()  {}
func (raidWithPrismaRaidBossesOnRaidsEqualsParams) equals() {}

type raidWithPrismaRaidBossesOnRaidsEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p raidWithPrismaRaidBossesOnRaidsEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p raidWithPrismaRaidBossesOnRaidsEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p raidWithPrismaRaidBossesOnRaidsEqualsParamsUnique) raidModel()              {}
func (p raidWithPrismaRaidBossesOnRaidsEqualsParamsUnique) raidBossesOnRaidsField() {}

func (raidWithPrismaRaidBossesOnRaidsEqualsParamsUnique) unique() {}
func (raidWithPrismaRaidBossesOnRaidsEqualsParamsUnique) equals() {}

type iRaidWithPrismaStoriesOnRaidsEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	raidModel()
	storiesOnRaidsField()
}

type raidWithPrismaStoriesOnRaidsSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidWithPrismaStoriesOnRaidsSetParams) field() builder.Field {
	return p.data
}

func (p raidWithPrismaStoriesOnRaidsSetParams) getQuery() builder.Query {
	return p.query
}

func (p raidWithPrismaStoriesOnRaidsSetParams) raidModel() {}

func (p raidWithPrismaStoriesOnRaidsSetParams) storiesOnRaidsField() {}

type raidWithPrismaStoriesOnRaidsEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidWithPrismaStoriesOnRaidsEqualsParams) field() builder.Field {
	return p.data
}

func (p raidWithPrismaStoriesOnRaidsEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p raidWithPrismaStoriesOnRaidsEqualsParams) raidModel() {}

func (p raidWithPrismaStoriesOnRaidsEqualsParams) storiesOnRaidsField() {}

func (raidWithPrismaStoriesOnRaidsSetParams) settable()  {}
func (raidWithPrismaStoriesOnRaidsEqualsParams) equals() {}

type raidWithPrismaStoriesOnRaidsEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p raidWithPrismaStoriesOnRaidsEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p raidWithPrismaStoriesOnRaidsEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p raidWithPrismaStoriesOnRaidsEqualsParamsUnique) raidModel()           {}
func (p raidWithPrismaStoriesOnRaidsEqualsParamsUnique) storiesOnRaidsField() {}

func (raidWithPrismaStoriesOnRaidsEqualsParamsUnique) unique() {}
func (raidWithPrismaStoriesOnRaidsEqualsParamsUnique) equals() {}

type raidBossActions struct {
	// client holds the prisma client
	client *PrismaClient
}

var raidBossOutput = []builder.Output{
	{Name: "id"},
	{Name: "createdAt"},
	{Name: "deletedAt"},
	{Name: "updatedAt"},
	{Name: "name"},
	{Name: "image"},
}

type iRaidBossRelationWith interface {
	getQuery() builder.Query
	with()
	raidBossRelation()
}

type iRaidBossParams interface {
	field() builder.Field
	getQuery() builder.Query
	raidBossModel()
}

type raidBossParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossParams) field() builder.Field {
	return p.data
}

func (p raidBossParams) getQuery() builder.Query {
	return p.query
}

func (p raidBossParams) raidBossModel() {}

type iRaidBossOrderByParams interface {
	field() builder.Field
	getQuery() builder.Query
	raidBossModel()
}

type raidBossOrderByParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossOrderByParams) field() builder.Field {
	return p.data
}

func (p raidBossOrderByParams) getQuery() builder.Query {
	return p.query
}

func (p raidBossOrderByParams) raidBossModel() {}

type iRaidBossCursorParams interface {
	field() builder.Field
	getQuery() builder.Query
	raidBossModel()
	isCursor()
}

type raidBossCursorParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossCursorParams) field() builder.Field {
	return p.data
}

func (p raidBossCursorParams) isCursor() {}

func (p raidBossCursorParams) getQuery() builder.Query {
	return p.query
}

func (p raidBossCursorParams) raidBossModel() {}

type iRaidBossParamsUnique interface {
	field() builder.Field
	getQuery() builder.Query
	unique()
	raidBossModel()
}

type raidBossParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossParamsUnique) raidBossModel() {}

func (raidBossParamsUnique) unique() {}

func (p raidBossParamsUnique) field() builder.Field {
	return p.data
}

func (p raidBossParamsUnique) getQuery() builder.Query {
	return p.query
}

type iRaidBossEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	raidBossModel()
}

type raidBossEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossEqualsParams) raidBossModel() {}

func (raidBossEqualsParams) equals() {}

func (p raidBossEqualsParams) field() builder.Field {
	return p.data
}

func (p raidBossEqualsParams) getQuery() builder.Query {
	return p.query
}

type iRaidBossEqualsParamsUnique interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	unique()
	raidBossModel()
}

type raidBossEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossEqualsParamsUnique) raidBossModel() {}

func (raidBossEqualsParamsUnique) unique() {}
func (raidBossEqualsParamsUnique) equals() {}

func (p raidBossEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p raidBossEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

type iRaidBossSetParams interface {
	field() builder.Field
	settable()
}

type raidBossSetParams struct {
	data builder.Field
}

func (raidBossSetParams) settable() {}

func (p raidBossSetParams) field() builder.Field {
	return p.data
}

type iRaidBossWithPrismaIDEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	raidBossModel()
	idField()
}

type raidBossWithPrismaIDSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossWithPrismaIDSetParams) field() builder.Field {
	return p.data
}

func (p raidBossWithPrismaIDSetParams) getQuery() builder.Query {
	return p.query
}

func (p raidBossWithPrismaIDSetParams) raidBossModel() {}

func (p raidBossWithPrismaIDSetParams) idField() {}

type raidBossWithPrismaIDEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossWithPrismaIDEqualsParams) field() builder.Field {
	return p.data
}

func (p raidBossWithPrismaIDEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p raidBossWithPrismaIDEqualsParams) raidBossModel() {}

func (p raidBossWithPrismaIDEqualsParams) idField() {}

func (raidBossWithPrismaIDSetParams) settable()  {}
func (raidBossWithPrismaIDEqualsParams) equals() {}

type raidBossWithPrismaIDEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossWithPrismaIDEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p raidBossWithPrismaIDEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p raidBossWithPrismaIDEqualsParamsUnique) raidBossModel() {}
func (p raidBossWithPrismaIDEqualsParamsUnique) idField()       {}

func (raidBossWithPrismaIDEqualsParamsUnique) unique() {}
func (raidBossWithPrismaIDEqualsParamsUnique) equals() {}

type iRaidBossWithPrismaCreatedAtEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	raidBossModel()
	createdAtField()
}

type raidBossWithPrismaCreatedAtSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossWithPrismaCreatedAtSetParams) field() builder.Field {
	return p.data
}

func (p raidBossWithPrismaCreatedAtSetParams) getQuery() builder.Query {
	return p.query
}

func (p raidBossWithPrismaCreatedAtSetParams) raidBossModel() {}

func (p raidBossWithPrismaCreatedAtSetParams) createdAtField() {}

type raidBossWithPrismaCreatedAtEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossWithPrismaCreatedAtEqualsParams) field() builder.Field {
	return p.data
}

func (p raidBossWithPrismaCreatedAtEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p raidBossWithPrismaCreatedAtEqualsParams) raidBossModel() {}

func (p raidBossWithPrismaCreatedAtEqualsParams) createdAtField() {}

func (raidBossWithPrismaCreatedAtSetParams) settable()  {}
func (raidBossWithPrismaCreatedAtEqualsParams) equals() {}

type raidBossWithPrismaCreatedAtEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossWithPrismaCreatedAtEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p raidBossWithPrismaCreatedAtEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p raidBossWithPrismaCreatedAtEqualsParamsUnique) raidBossModel()  {}
func (p raidBossWithPrismaCreatedAtEqualsParamsUnique) createdAtField() {}

func (raidBossWithPrismaCreatedAtEqualsParamsUnique) unique() {}
func (raidBossWithPrismaCreatedAtEqualsParamsUnique) equals() {}

type iRaidBossWithPrismaDeletedAtEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	raidBossModel()
	deletedAtField()
}

type raidBossWithPrismaDeletedAtSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossWithPrismaDeletedAtSetParams) field() builder.Field {
	return p.data
}

func (p raidBossWithPrismaDeletedAtSetParams) getQuery() builder.Query {
	return p.query
}

func (p raidBossWithPrismaDeletedAtSetParams) raidBossModel() {}

func (p raidBossWithPrismaDeletedAtSetParams) deletedAtField() {}

type raidBossWithPrismaDeletedAtEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossWithPrismaDeletedAtEqualsParams) field() builder.Field {
	return p.data
}

func (p raidBossWithPrismaDeletedAtEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p raidBossWithPrismaDeletedAtEqualsParams) raidBossModel() {}

func (p raidBossWithPrismaDeletedAtEqualsParams) deletedAtField() {}

func (raidBossWithPrismaDeletedAtSetParams) settable()  {}
func (raidBossWithPrismaDeletedAtEqualsParams) equals() {}

type raidBossWithPrismaDeletedAtEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossWithPrismaDeletedAtEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p raidBossWithPrismaDeletedAtEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p raidBossWithPrismaDeletedAtEqualsParamsUnique) raidBossModel()  {}
func (p raidBossWithPrismaDeletedAtEqualsParamsUnique) deletedAtField() {}

func (raidBossWithPrismaDeletedAtEqualsParamsUnique) unique() {}
func (raidBossWithPrismaDeletedAtEqualsParamsUnique) equals() {}

type iRaidBossWithPrismaUpdatedAtEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	raidBossModel()
	updatedAtField()
}

type raidBossWithPrismaUpdatedAtSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossWithPrismaUpdatedAtSetParams) field() builder.Field {
	return p.data
}

func (p raidBossWithPrismaUpdatedAtSetParams) getQuery() builder.Query {
	return p.query
}

func (p raidBossWithPrismaUpdatedAtSetParams) raidBossModel() {}

func (p raidBossWithPrismaUpdatedAtSetParams) updatedAtField() {}

type raidBossWithPrismaUpdatedAtEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossWithPrismaUpdatedAtEqualsParams) field() builder.Field {
	return p.data
}

func (p raidBossWithPrismaUpdatedAtEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p raidBossWithPrismaUpdatedAtEqualsParams) raidBossModel() {}

func (p raidBossWithPrismaUpdatedAtEqualsParams) updatedAtField() {}

func (raidBossWithPrismaUpdatedAtSetParams) settable()  {}
func (raidBossWithPrismaUpdatedAtEqualsParams) equals() {}

type raidBossWithPrismaUpdatedAtEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossWithPrismaUpdatedAtEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p raidBossWithPrismaUpdatedAtEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p raidBossWithPrismaUpdatedAtEqualsParamsUnique) raidBossModel()  {}
func (p raidBossWithPrismaUpdatedAtEqualsParamsUnique) updatedAtField() {}

func (raidBossWithPrismaUpdatedAtEqualsParamsUnique) unique() {}
func (raidBossWithPrismaUpdatedAtEqualsParamsUnique) equals() {}

type iRaidBossWithPrismaNameEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	raidBossModel()
	nameField()
}

type raidBossWithPrismaNameSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossWithPrismaNameSetParams) field() builder.Field {
	return p.data
}

func (p raidBossWithPrismaNameSetParams) getQuery() builder.Query {
	return p.query
}

func (p raidBossWithPrismaNameSetParams) raidBossModel() {}

func (p raidBossWithPrismaNameSetParams) nameField() {}

type raidBossWithPrismaNameEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossWithPrismaNameEqualsParams) field() builder.Field {
	return p.data
}

func (p raidBossWithPrismaNameEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p raidBossWithPrismaNameEqualsParams) raidBossModel() {}

func (p raidBossWithPrismaNameEqualsParams) nameField() {}

func (raidBossWithPrismaNameSetParams) settable()  {}
func (raidBossWithPrismaNameEqualsParams) equals() {}

type raidBossWithPrismaNameEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossWithPrismaNameEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p raidBossWithPrismaNameEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p raidBossWithPrismaNameEqualsParamsUnique) raidBossModel() {}
func (p raidBossWithPrismaNameEqualsParamsUnique) nameField()     {}

func (raidBossWithPrismaNameEqualsParamsUnique) unique() {}
func (raidBossWithPrismaNameEqualsParamsUnique) equals() {}

type iRaidBossWithPrismaImageEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	raidBossModel()
	imageField()
}

type raidBossWithPrismaImageSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossWithPrismaImageSetParams) field() builder.Field {
	return p.data
}

func (p raidBossWithPrismaImageSetParams) getQuery() builder.Query {
	return p.query
}

func (p raidBossWithPrismaImageSetParams) raidBossModel() {}

func (p raidBossWithPrismaImageSetParams) imageField() {}

type raidBossWithPrismaImageEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossWithPrismaImageEqualsParams) field() builder.Field {
	return p.data
}

func (p raidBossWithPrismaImageEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p raidBossWithPrismaImageEqualsParams) raidBossModel() {}

func (p raidBossWithPrismaImageEqualsParams) imageField() {}

func (raidBossWithPrismaImageSetParams) settable()  {}
func (raidBossWithPrismaImageEqualsParams) equals() {}

type raidBossWithPrismaImageEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossWithPrismaImageEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p raidBossWithPrismaImageEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p raidBossWithPrismaImageEqualsParamsUnique) raidBossModel() {}
func (p raidBossWithPrismaImageEqualsParamsUnique) imageField()    {}

func (raidBossWithPrismaImageEqualsParamsUnique) unique() {}
func (raidBossWithPrismaImageEqualsParamsUnique) equals() {}

type iRaidBossWithPrismaRaidBossesOnRaidsEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	raidBossModel()
	raidBossesOnRaidsField()
}

type raidBossWithPrismaRaidBossesOnRaidsSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossWithPrismaRaidBossesOnRaidsSetParams) field() builder.Field {
	return p.data
}

func (p raidBossWithPrismaRaidBossesOnRaidsSetParams) getQuery() builder.Query {
	return p.query
}

func (p raidBossWithPrismaRaidBossesOnRaidsSetParams) raidBossModel() {}

func (p raidBossWithPrismaRaidBossesOnRaidsSetParams) raidBossesOnRaidsField() {}

type raidBossWithPrismaRaidBossesOnRaidsEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossWithPrismaRaidBossesOnRaidsEqualsParams) field() builder.Field {
	return p.data
}

func (p raidBossWithPrismaRaidBossesOnRaidsEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p raidBossWithPrismaRaidBossesOnRaidsEqualsParams) raidBossModel() {}

func (p raidBossWithPrismaRaidBossesOnRaidsEqualsParams) raidBossesOnRaidsField() {}

func (raidBossWithPrismaRaidBossesOnRaidsSetParams) settable()  {}
func (raidBossWithPrismaRaidBossesOnRaidsEqualsParams) equals() {}

type raidBossWithPrismaRaidBossesOnRaidsEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossWithPrismaRaidBossesOnRaidsEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p raidBossWithPrismaRaidBossesOnRaidsEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p raidBossWithPrismaRaidBossesOnRaidsEqualsParamsUnique) raidBossModel()          {}
func (p raidBossWithPrismaRaidBossesOnRaidsEqualsParamsUnique) raidBossesOnRaidsField() {}

func (raidBossWithPrismaRaidBossesOnRaidsEqualsParamsUnique) unique() {}
func (raidBossWithPrismaRaidBossesOnRaidsEqualsParamsUnique) equals() {}

type avatarsOnRaidsActions struct {
	// client holds the prisma client
	client *PrismaClient
}

var avatarsOnRaidsOutput = []builder.Output{
	{Name: "createdAt"},
	{Name: "deletedAt"},
	{Name: "updatedAt"},
	{Name: "position"},
	{Name: "raidId"},
	{Name: "avatarId"},
}

type iAvatarsOnRaidsRelationWith interface {
	getQuery() builder.Query
	with()
	avatarsOnRaidsRelation()
}

type iAvatarsOnRaidsParams interface {
	field() builder.Field
	getQuery() builder.Query
	avatarsOnRaidsModel()
}

type avatarsOnRaidsParams struct {
	data  builder.Field
	query builder.Query
}

func (p avatarsOnRaidsParams) field() builder.Field {
	return p.data
}

func (p avatarsOnRaidsParams) getQuery() builder.Query {
	return p.query
}

func (p avatarsOnRaidsParams) avatarsOnRaidsModel() {}

type iAvatarsOnRaidsOrderByParams interface {
	field() builder.Field
	getQuery() builder.Query
	avatarsOnRaidsModel()
}

type avatarsOnRaidsOrderByParams struct {
	data  builder.Field
	query builder.Query
}

func (p avatarsOnRaidsOrderByParams) field() builder.Field {
	return p.data
}

func (p avatarsOnRaidsOrderByParams) getQuery() builder.Query {
	return p.query
}

func (p avatarsOnRaidsOrderByParams) avatarsOnRaidsModel() {}

type iAvatarsOnRaidsCursorParams interface {
	field() builder.Field
	getQuery() builder.Query
	avatarsOnRaidsModel()
	isCursor()
}

type avatarsOnRaidsCursorParams struct {
	data  builder.Field
	query builder.Query
}

func (p avatarsOnRaidsCursorParams) field() builder.Field {
	return p.data
}

func (p avatarsOnRaidsCursorParams) isCursor() {}

func (p avatarsOnRaidsCursorParams) getQuery() builder.Query {
	return p.query
}

func (p avatarsOnRaidsCursorParams) avatarsOnRaidsModel() {}

type iAvatarsOnRaidsParamsUnique interface {
	field() builder.Field
	getQuery() builder.Query
	unique()
	avatarsOnRaidsModel()
}

type avatarsOnRaidsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p avatarsOnRaidsParamsUnique) avatarsOnRaidsModel() {}

func (avatarsOnRaidsParamsUnique) unique() {}

func (p avatarsOnRaidsParamsUnique) field() builder.Field {
	return p.data
}

func (p avatarsOnRaidsParamsUnique) getQuery() builder.Query {
	return p.query
}

type iAvatarsOnRaidsEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	avatarsOnRaidsModel()
}

type avatarsOnRaidsEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p avatarsOnRaidsEqualsParams) avatarsOnRaidsModel() {}

func (avatarsOnRaidsEqualsParams) equals() {}

func (p avatarsOnRaidsEqualsParams) field() builder.Field {
	return p.data
}

func (p avatarsOnRaidsEqualsParams) getQuery() builder.Query {
	return p.query
}

type iAvatarsOnRaidsEqualsParamsUnique interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	unique()
	avatarsOnRaidsModel()
}

type avatarsOnRaidsEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p avatarsOnRaidsEqualsParamsUnique) avatarsOnRaidsModel() {}

func (avatarsOnRaidsEqualsParamsUnique) unique() {}
func (avatarsOnRaidsEqualsParamsUnique) equals() {}

func (p avatarsOnRaidsEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p avatarsOnRaidsEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

type iAvatarsOnRaidsSetParams interface {
	field() builder.Field
	settable()
}

type avatarsOnRaidsSetParams struct {
	data builder.Field
}

func (avatarsOnRaidsSetParams) settable() {}

func (p avatarsOnRaidsSetParams) field() builder.Field {
	return p.data
}

type iAvatarsOnRaidsWithPrismaCreatedAtEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	avatarsOnRaidsModel()
	createdAtField()
}

type avatarsOnRaidsWithPrismaCreatedAtSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p avatarsOnRaidsWithPrismaCreatedAtSetParams) field() builder.Field {
	return p.data
}

func (p avatarsOnRaidsWithPrismaCreatedAtSetParams) getQuery() builder.Query {
	return p.query
}

func (p avatarsOnRaidsWithPrismaCreatedAtSetParams) avatarsOnRaidsModel() {}

func (p avatarsOnRaidsWithPrismaCreatedAtSetParams) createdAtField() {}

type avatarsOnRaidsWithPrismaCreatedAtEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p avatarsOnRaidsWithPrismaCreatedAtEqualsParams) field() builder.Field {
	return p.data
}

func (p avatarsOnRaidsWithPrismaCreatedAtEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p avatarsOnRaidsWithPrismaCreatedAtEqualsParams) avatarsOnRaidsModel() {}

func (p avatarsOnRaidsWithPrismaCreatedAtEqualsParams) createdAtField() {}

func (avatarsOnRaidsWithPrismaCreatedAtSetParams) settable()  {}
func (avatarsOnRaidsWithPrismaCreatedAtEqualsParams) equals() {}

type avatarsOnRaidsWithPrismaCreatedAtEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p avatarsOnRaidsWithPrismaCreatedAtEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p avatarsOnRaidsWithPrismaCreatedAtEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p avatarsOnRaidsWithPrismaCreatedAtEqualsParamsUnique) avatarsOnRaidsModel() {}
func (p avatarsOnRaidsWithPrismaCreatedAtEqualsParamsUnique) createdAtField()      {}

func (avatarsOnRaidsWithPrismaCreatedAtEqualsParamsUnique) unique() {}
func (avatarsOnRaidsWithPrismaCreatedAtEqualsParamsUnique) equals() {}

type iAvatarsOnRaidsWithPrismaDeletedAtEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	avatarsOnRaidsModel()
	deletedAtField()
}

type avatarsOnRaidsWithPrismaDeletedAtSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p avatarsOnRaidsWithPrismaDeletedAtSetParams) field() builder.Field {
	return p.data
}

func (p avatarsOnRaidsWithPrismaDeletedAtSetParams) getQuery() builder.Query {
	return p.query
}

func (p avatarsOnRaidsWithPrismaDeletedAtSetParams) avatarsOnRaidsModel() {}

func (p avatarsOnRaidsWithPrismaDeletedAtSetParams) deletedAtField() {}

type avatarsOnRaidsWithPrismaDeletedAtEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p avatarsOnRaidsWithPrismaDeletedAtEqualsParams) field() builder.Field {
	return p.data
}

func (p avatarsOnRaidsWithPrismaDeletedAtEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p avatarsOnRaidsWithPrismaDeletedAtEqualsParams) avatarsOnRaidsModel() {}

func (p avatarsOnRaidsWithPrismaDeletedAtEqualsParams) deletedAtField() {}

func (avatarsOnRaidsWithPrismaDeletedAtSetParams) settable()  {}
func (avatarsOnRaidsWithPrismaDeletedAtEqualsParams) equals() {}

type avatarsOnRaidsWithPrismaDeletedAtEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p avatarsOnRaidsWithPrismaDeletedAtEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p avatarsOnRaidsWithPrismaDeletedAtEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p avatarsOnRaidsWithPrismaDeletedAtEqualsParamsUnique) avatarsOnRaidsModel() {}
func (p avatarsOnRaidsWithPrismaDeletedAtEqualsParamsUnique) deletedAtField()      {}

func (avatarsOnRaidsWithPrismaDeletedAtEqualsParamsUnique) unique() {}
func (avatarsOnRaidsWithPrismaDeletedAtEqualsParamsUnique) equals() {}

type iAvatarsOnRaidsWithPrismaUpdatedAtEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	avatarsOnRaidsModel()
	updatedAtField()
}

type avatarsOnRaidsWithPrismaUpdatedAtSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p avatarsOnRaidsWithPrismaUpdatedAtSetParams) field() builder.Field {
	return p.data
}

func (p avatarsOnRaidsWithPrismaUpdatedAtSetParams) getQuery() builder.Query {
	return p.query
}

func (p avatarsOnRaidsWithPrismaUpdatedAtSetParams) avatarsOnRaidsModel() {}

func (p avatarsOnRaidsWithPrismaUpdatedAtSetParams) updatedAtField() {}

type avatarsOnRaidsWithPrismaUpdatedAtEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p avatarsOnRaidsWithPrismaUpdatedAtEqualsParams) field() builder.Field {
	return p.data
}

func (p avatarsOnRaidsWithPrismaUpdatedAtEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p avatarsOnRaidsWithPrismaUpdatedAtEqualsParams) avatarsOnRaidsModel() {}

func (p avatarsOnRaidsWithPrismaUpdatedAtEqualsParams) updatedAtField() {}

func (avatarsOnRaidsWithPrismaUpdatedAtSetParams) settable()  {}
func (avatarsOnRaidsWithPrismaUpdatedAtEqualsParams) equals() {}

type avatarsOnRaidsWithPrismaUpdatedAtEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p avatarsOnRaidsWithPrismaUpdatedAtEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p avatarsOnRaidsWithPrismaUpdatedAtEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p avatarsOnRaidsWithPrismaUpdatedAtEqualsParamsUnique) avatarsOnRaidsModel() {}
func (p avatarsOnRaidsWithPrismaUpdatedAtEqualsParamsUnique) updatedAtField()      {}

func (avatarsOnRaidsWithPrismaUpdatedAtEqualsParamsUnique) unique() {}
func (avatarsOnRaidsWithPrismaUpdatedAtEqualsParamsUnique) equals() {}

type iAvatarsOnRaidsWithPrismaPositionEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	avatarsOnRaidsModel()
	positionField()
}

type avatarsOnRaidsWithPrismaPositionSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p avatarsOnRaidsWithPrismaPositionSetParams) field() builder.Field {
	return p.data
}

func (p avatarsOnRaidsWithPrismaPositionSetParams) getQuery() builder.Query {
	return p.query
}

func (p avatarsOnRaidsWithPrismaPositionSetParams) avatarsOnRaidsModel() {}

func (p avatarsOnRaidsWithPrismaPositionSetParams) positionField() {}

type avatarsOnRaidsWithPrismaPositionEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p avatarsOnRaidsWithPrismaPositionEqualsParams) field() builder.Field {
	return p.data
}

func (p avatarsOnRaidsWithPrismaPositionEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p avatarsOnRaidsWithPrismaPositionEqualsParams) avatarsOnRaidsModel() {}

func (p avatarsOnRaidsWithPrismaPositionEqualsParams) positionField() {}

func (avatarsOnRaidsWithPrismaPositionSetParams) settable()  {}
func (avatarsOnRaidsWithPrismaPositionEqualsParams) equals() {}

type avatarsOnRaidsWithPrismaPositionEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p avatarsOnRaidsWithPrismaPositionEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p avatarsOnRaidsWithPrismaPositionEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p avatarsOnRaidsWithPrismaPositionEqualsParamsUnique) avatarsOnRaidsModel() {}
func (p avatarsOnRaidsWithPrismaPositionEqualsParamsUnique) positionField()       {}

func (avatarsOnRaidsWithPrismaPositionEqualsParamsUnique) unique() {}
func (avatarsOnRaidsWithPrismaPositionEqualsParamsUnique) equals() {}

type iAvatarsOnRaidsWithPrismaRaidEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	avatarsOnRaidsModel()
	raidField()
}

type avatarsOnRaidsWithPrismaRaidSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p avatarsOnRaidsWithPrismaRaidSetParams) field() builder.Field {
	return p.data
}

func (p avatarsOnRaidsWithPrismaRaidSetParams) getQuery() builder.Query {
	return p.query
}

func (p avatarsOnRaidsWithPrismaRaidSetParams) avatarsOnRaidsModel() {}

func (p avatarsOnRaidsWithPrismaRaidSetParams) raidField() {}

type avatarsOnRaidsWithPrismaRaidEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p avatarsOnRaidsWithPrismaRaidEqualsParams) field() builder.Field {
	return p.data
}

func (p avatarsOnRaidsWithPrismaRaidEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p avatarsOnRaidsWithPrismaRaidEqualsParams) avatarsOnRaidsModel() {}

func (p avatarsOnRaidsWithPrismaRaidEqualsParams) raidField() {}

func (avatarsOnRaidsWithPrismaRaidSetParams) settable()  {}
func (avatarsOnRaidsWithPrismaRaidEqualsParams) equals() {}

type avatarsOnRaidsWithPrismaRaidEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p avatarsOnRaidsWithPrismaRaidEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p avatarsOnRaidsWithPrismaRaidEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p avatarsOnRaidsWithPrismaRaidEqualsParamsUnique) avatarsOnRaidsModel() {}
func (p avatarsOnRaidsWithPrismaRaidEqualsParamsUnique) raidField()           {}

func (avatarsOnRaidsWithPrismaRaidEqualsParamsUnique) unique() {}
func (avatarsOnRaidsWithPrismaRaidEqualsParamsUnique) equals() {}

type iAvatarsOnRaidsWithPrismaRaidIDEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	avatarsOnRaidsModel()
	raidIDField()
}

type avatarsOnRaidsWithPrismaRaidIDSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p avatarsOnRaidsWithPrismaRaidIDSetParams) field() builder.Field {
	return p.data
}

func (p avatarsOnRaidsWithPrismaRaidIDSetParams) getQuery() builder.Query {
	return p.query
}

func (p avatarsOnRaidsWithPrismaRaidIDSetParams) avatarsOnRaidsModel() {}

func (p avatarsOnRaidsWithPrismaRaidIDSetParams) raidIDField() {}

type avatarsOnRaidsWithPrismaRaidIDEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p avatarsOnRaidsWithPrismaRaidIDEqualsParams) field() builder.Field {
	return p.data
}

func (p avatarsOnRaidsWithPrismaRaidIDEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p avatarsOnRaidsWithPrismaRaidIDEqualsParams) avatarsOnRaidsModel() {}

func (p avatarsOnRaidsWithPrismaRaidIDEqualsParams) raidIDField() {}

func (avatarsOnRaidsWithPrismaRaidIDSetParams) settable()  {}
func (avatarsOnRaidsWithPrismaRaidIDEqualsParams) equals() {}

type avatarsOnRaidsWithPrismaRaidIDEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p avatarsOnRaidsWithPrismaRaidIDEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p avatarsOnRaidsWithPrismaRaidIDEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p avatarsOnRaidsWithPrismaRaidIDEqualsParamsUnique) avatarsOnRaidsModel() {}
func (p avatarsOnRaidsWithPrismaRaidIDEqualsParamsUnique) raidIDField()         {}

func (avatarsOnRaidsWithPrismaRaidIDEqualsParamsUnique) unique() {}
func (avatarsOnRaidsWithPrismaRaidIDEqualsParamsUnique) equals() {}

type iAvatarsOnRaidsWithPrismaAvatarEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	avatarsOnRaidsModel()
	avatarField()
}

type avatarsOnRaidsWithPrismaAvatarSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p avatarsOnRaidsWithPrismaAvatarSetParams) field() builder.Field {
	return p.data
}

func (p avatarsOnRaidsWithPrismaAvatarSetParams) getQuery() builder.Query {
	return p.query
}

func (p avatarsOnRaidsWithPrismaAvatarSetParams) avatarsOnRaidsModel() {}

func (p avatarsOnRaidsWithPrismaAvatarSetParams) avatarField() {}

type avatarsOnRaidsWithPrismaAvatarEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p avatarsOnRaidsWithPrismaAvatarEqualsParams) field() builder.Field {
	return p.data
}

func (p avatarsOnRaidsWithPrismaAvatarEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p avatarsOnRaidsWithPrismaAvatarEqualsParams) avatarsOnRaidsModel() {}

func (p avatarsOnRaidsWithPrismaAvatarEqualsParams) avatarField() {}

func (avatarsOnRaidsWithPrismaAvatarSetParams) settable()  {}
func (avatarsOnRaidsWithPrismaAvatarEqualsParams) equals() {}

type avatarsOnRaidsWithPrismaAvatarEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p avatarsOnRaidsWithPrismaAvatarEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p avatarsOnRaidsWithPrismaAvatarEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p avatarsOnRaidsWithPrismaAvatarEqualsParamsUnique) avatarsOnRaidsModel() {}
func (p avatarsOnRaidsWithPrismaAvatarEqualsParamsUnique) avatarField()         {}

func (avatarsOnRaidsWithPrismaAvatarEqualsParamsUnique) unique() {}
func (avatarsOnRaidsWithPrismaAvatarEqualsParamsUnique) equals() {}

type iAvatarsOnRaidsWithPrismaAvatarIDEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	avatarsOnRaidsModel()
	avatarIDField()
}

type avatarsOnRaidsWithPrismaAvatarIDSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p avatarsOnRaidsWithPrismaAvatarIDSetParams) field() builder.Field {
	return p.data
}

func (p avatarsOnRaidsWithPrismaAvatarIDSetParams) getQuery() builder.Query {
	return p.query
}

func (p avatarsOnRaidsWithPrismaAvatarIDSetParams) avatarsOnRaidsModel() {}

func (p avatarsOnRaidsWithPrismaAvatarIDSetParams) avatarIDField() {}

type avatarsOnRaidsWithPrismaAvatarIDEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p avatarsOnRaidsWithPrismaAvatarIDEqualsParams) field() builder.Field {
	return p.data
}

func (p avatarsOnRaidsWithPrismaAvatarIDEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p avatarsOnRaidsWithPrismaAvatarIDEqualsParams) avatarsOnRaidsModel() {}

func (p avatarsOnRaidsWithPrismaAvatarIDEqualsParams) avatarIDField() {}

func (avatarsOnRaidsWithPrismaAvatarIDSetParams) settable()  {}
func (avatarsOnRaidsWithPrismaAvatarIDEqualsParams) equals() {}

type avatarsOnRaidsWithPrismaAvatarIDEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p avatarsOnRaidsWithPrismaAvatarIDEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p avatarsOnRaidsWithPrismaAvatarIDEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p avatarsOnRaidsWithPrismaAvatarIDEqualsParamsUnique) avatarsOnRaidsModel() {}
func (p avatarsOnRaidsWithPrismaAvatarIDEqualsParamsUnique) avatarIDField()       {}

func (avatarsOnRaidsWithPrismaAvatarIDEqualsParamsUnique) unique() {}
func (avatarsOnRaidsWithPrismaAvatarIDEqualsParamsUnique) equals() {}

type raidBossesOnRaidsActions struct {
	// client holds the prisma client
	client *PrismaClient
}

var raidBossesOnRaidsOutput = []builder.Output{
	{Name: "createdAt"},
	{Name: "deletedAt"},
	{Name: "updatedAt"},
	{Name: "raidId"},
	{Name: "raidBossId"},
}

type iRaidBossesOnRaidsRelationWith interface {
	getQuery() builder.Query
	with()
	raidBossesOnRaidsRelation()
}

type iRaidBossesOnRaidsParams interface {
	field() builder.Field
	getQuery() builder.Query
	raidBossesOnRaidsModel()
}

type raidBossesOnRaidsParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossesOnRaidsParams) field() builder.Field {
	return p.data
}

func (p raidBossesOnRaidsParams) getQuery() builder.Query {
	return p.query
}

func (p raidBossesOnRaidsParams) raidBossesOnRaidsModel() {}

type iRaidBossesOnRaidsOrderByParams interface {
	field() builder.Field
	getQuery() builder.Query
	raidBossesOnRaidsModel()
}

type raidBossesOnRaidsOrderByParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossesOnRaidsOrderByParams) field() builder.Field {
	return p.data
}

func (p raidBossesOnRaidsOrderByParams) getQuery() builder.Query {
	return p.query
}

func (p raidBossesOnRaidsOrderByParams) raidBossesOnRaidsModel() {}

type iRaidBossesOnRaidsCursorParams interface {
	field() builder.Field
	getQuery() builder.Query
	raidBossesOnRaidsModel()
	isCursor()
}

type raidBossesOnRaidsCursorParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossesOnRaidsCursorParams) field() builder.Field {
	return p.data
}

func (p raidBossesOnRaidsCursorParams) isCursor() {}

func (p raidBossesOnRaidsCursorParams) getQuery() builder.Query {
	return p.query
}

func (p raidBossesOnRaidsCursorParams) raidBossesOnRaidsModel() {}

type iRaidBossesOnRaidsParamsUnique interface {
	field() builder.Field
	getQuery() builder.Query
	unique()
	raidBossesOnRaidsModel()
}

type raidBossesOnRaidsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossesOnRaidsParamsUnique) raidBossesOnRaidsModel() {}

func (raidBossesOnRaidsParamsUnique) unique() {}

func (p raidBossesOnRaidsParamsUnique) field() builder.Field {
	return p.data
}

func (p raidBossesOnRaidsParamsUnique) getQuery() builder.Query {
	return p.query
}

type iRaidBossesOnRaidsEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	raidBossesOnRaidsModel()
}

type raidBossesOnRaidsEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossesOnRaidsEqualsParams) raidBossesOnRaidsModel() {}

func (raidBossesOnRaidsEqualsParams) equals() {}

func (p raidBossesOnRaidsEqualsParams) field() builder.Field {
	return p.data
}

func (p raidBossesOnRaidsEqualsParams) getQuery() builder.Query {
	return p.query
}

type iRaidBossesOnRaidsEqualsParamsUnique interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	unique()
	raidBossesOnRaidsModel()
}

type raidBossesOnRaidsEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossesOnRaidsEqualsParamsUnique) raidBossesOnRaidsModel() {}

func (raidBossesOnRaidsEqualsParamsUnique) unique() {}
func (raidBossesOnRaidsEqualsParamsUnique) equals() {}

func (p raidBossesOnRaidsEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p raidBossesOnRaidsEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

type iRaidBossesOnRaidsSetParams interface {
	field() builder.Field
	settable()
}

type raidBossesOnRaidsSetParams struct {
	data builder.Field
}

func (raidBossesOnRaidsSetParams) settable() {}

func (p raidBossesOnRaidsSetParams) field() builder.Field {
	return p.data
}

type iRaidBossesOnRaidsWithPrismaCreatedAtEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	raidBossesOnRaidsModel()
	createdAtField()
}

type raidBossesOnRaidsWithPrismaCreatedAtSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossesOnRaidsWithPrismaCreatedAtSetParams) field() builder.Field {
	return p.data
}

func (p raidBossesOnRaidsWithPrismaCreatedAtSetParams) getQuery() builder.Query {
	return p.query
}

func (p raidBossesOnRaidsWithPrismaCreatedAtSetParams) raidBossesOnRaidsModel() {}

func (p raidBossesOnRaidsWithPrismaCreatedAtSetParams) createdAtField() {}

type raidBossesOnRaidsWithPrismaCreatedAtEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossesOnRaidsWithPrismaCreatedAtEqualsParams) field() builder.Field {
	return p.data
}

func (p raidBossesOnRaidsWithPrismaCreatedAtEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p raidBossesOnRaidsWithPrismaCreatedAtEqualsParams) raidBossesOnRaidsModel() {}

func (p raidBossesOnRaidsWithPrismaCreatedAtEqualsParams) createdAtField() {}

func (raidBossesOnRaidsWithPrismaCreatedAtSetParams) settable()  {}
func (raidBossesOnRaidsWithPrismaCreatedAtEqualsParams) equals() {}

type raidBossesOnRaidsWithPrismaCreatedAtEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossesOnRaidsWithPrismaCreatedAtEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p raidBossesOnRaidsWithPrismaCreatedAtEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p raidBossesOnRaidsWithPrismaCreatedAtEqualsParamsUnique) raidBossesOnRaidsModel() {}
func (p raidBossesOnRaidsWithPrismaCreatedAtEqualsParamsUnique) createdAtField()         {}

func (raidBossesOnRaidsWithPrismaCreatedAtEqualsParamsUnique) unique() {}
func (raidBossesOnRaidsWithPrismaCreatedAtEqualsParamsUnique) equals() {}

type iRaidBossesOnRaidsWithPrismaDeletedAtEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	raidBossesOnRaidsModel()
	deletedAtField()
}

type raidBossesOnRaidsWithPrismaDeletedAtSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossesOnRaidsWithPrismaDeletedAtSetParams) field() builder.Field {
	return p.data
}

func (p raidBossesOnRaidsWithPrismaDeletedAtSetParams) getQuery() builder.Query {
	return p.query
}

func (p raidBossesOnRaidsWithPrismaDeletedAtSetParams) raidBossesOnRaidsModel() {}

func (p raidBossesOnRaidsWithPrismaDeletedAtSetParams) deletedAtField() {}

type raidBossesOnRaidsWithPrismaDeletedAtEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossesOnRaidsWithPrismaDeletedAtEqualsParams) field() builder.Field {
	return p.data
}

func (p raidBossesOnRaidsWithPrismaDeletedAtEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p raidBossesOnRaidsWithPrismaDeletedAtEqualsParams) raidBossesOnRaidsModel() {}

func (p raidBossesOnRaidsWithPrismaDeletedAtEqualsParams) deletedAtField() {}

func (raidBossesOnRaidsWithPrismaDeletedAtSetParams) settable()  {}
func (raidBossesOnRaidsWithPrismaDeletedAtEqualsParams) equals() {}

type raidBossesOnRaidsWithPrismaDeletedAtEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossesOnRaidsWithPrismaDeletedAtEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p raidBossesOnRaidsWithPrismaDeletedAtEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p raidBossesOnRaidsWithPrismaDeletedAtEqualsParamsUnique) raidBossesOnRaidsModel() {}
func (p raidBossesOnRaidsWithPrismaDeletedAtEqualsParamsUnique) deletedAtField()         {}

func (raidBossesOnRaidsWithPrismaDeletedAtEqualsParamsUnique) unique() {}
func (raidBossesOnRaidsWithPrismaDeletedAtEqualsParamsUnique) equals() {}

type iRaidBossesOnRaidsWithPrismaUpdatedAtEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	raidBossesOnRaidsModel()
	updatedAtField()
}

type raidBossesOnRaidsWithPrismaUpdatedAtSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossesOnRaidsWithPrismaUpdatedAtSetParams) field() builder.Field {
	return p.data
}

func (p raidBossesOnRaidsWithPrismaUpdatedAtSetParams) getQuery() builder.Query {
	return p.query
}

func (p raidBossesOnRaidsWithPrismaUpdatedAtSetParams) raidBossesOnRaidsModel() {}

func (p raidBossesOnRaidsWithPrismaUpdatedAtSetParams) updatedAtField() {}

type raidBossesOnRaidsWithPrismaUpdatedAtEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossesOnRaidsWithPrismaUpdatedAtEqualsParams) field() builder.Field {
	return p.data
}

func (p raidBossesOnRaidsWithPrismaUpdatedAtEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p raidBossesOnRaidsWithPrismaUpdatedAtEqualsParams) raidBossesOnRaidsModel() {}

func (p raidBossesOnRaidsWithPrismaUpdatedAtEqualsParams) updatedAtField() {}

func (raidBossesOnRaidsWithPrismaUpdatedAtSetParams) settable()  {}
func (raidBossesOnRaidsWithPrismaUpdatedAtEqualsParams) equals() {}

type raidBossesOnRaidsWithPrismaUpdatedAtEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossesOnRaidsWithPrismaUpdatedAtEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p raidBossesOnRaidsWithPrismaUpdatedAtEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p raidBossesOnRaidsWithPrismaUpdatedAtEqualsParamsUnique) raidBossesOnRaidsModel() {}
func (p raidBossesOnRaidsWithPrismaUpdatedAtEqualsParamsUnique) updatedAtField()         {}

func (raidBossesOnRaidsWithPrismaUpdatedAtEqualsParamsUnique) unique() {}
func (raidBossesOnRaidsWithPrismaUpdatedAtEqualsParamsUnique) equals() {}

type iRaidBossesOnRaidsWithPrismaRaidEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	raidBossesOnRaidsModel()
	raidField()
}

type raidBossesOnRaidsWithPrismaRaidSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossesOnRaidsWithPrismaRaidSetParams) field() builder.Field {
	return p.data
}

func (p raidBossesOnRaidsWithPrismaRaidSetParams) getQuery() builder.Query {
	return p.query
}

func (p raidBossesOnRaidsWithPrismaRaidSetParams) raidBossesOnRaidsModel() {}

func (p raidBossesOnRaidsWithPrismaRaidSetParams) raidField() {}

type raidBossesOnRaidsWithPrismaRaidEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossesOnRaidsWithPrismaRaidEqualsParams) field() builder.Field {
	return p.data
}

func (p raidBossesOnRaidsWithPrismaRaidEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p raidBossesOnRaidsWithPrismaRaidEqualsParams) raidBossesOnRaidsModel() {}

func (p raidBossesOnRaidsWithPrismaRaidEqualsParams) raidField() {}

func (raidBossesOnRaidsWithPrismaRaidSetParams) settable()  {}
func (raidBossesOnRaidsWithPrismaRaidEqualsParams) equals() {}

type raidBossesOnRaidsWithPrismaRaidEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossesOnRaidsWithPrismaRaidEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p raidBossesOnRaidsWithPrismaRaidEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p raidBossesOnRaidsWithPrismaRaidEqualsParamsUnique) raidBossesOnRaidsModel() {}
func (p raidBossesOnRaidsWithPrismaRaidEqualsParamsUnique) raidField()              {}

func (raidBossesOnRaidsWithPrismaRaidEqualsParamsUnique) unique() {}
func (raidBossesOnRaidsWithPrismaRaidEqualsParamsUnique) equals() {}

type iRaidBossesOnRaidsWithPrismaRaidIDEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	raidBossesOnRaidsModel()
	raidIDField()
}

type raidBossesOnRaidsWithPrismaRaidIDSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossesOnRaidsWithPrismaRaidIDSetParams) field() builder.Field {
	return p.data
}

func (p raidBossesOnRaidsWithPrismaRaidIDSetParams) getQuery() builder.Query {
	return p.query
}

func (p raidBossesOnRaidsWithPrismaRaidIDSetParams) raidBossesOnRaidsModel() {}

func (p raidBossesOnRaidsWithPrismaRaidIDSetParams) raidIDField() {}

type raidBossesOnRaidsWithPrismaRaidIDEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossesOnRaidsWithPrismaRaidIDEqualsParams) field() builder.Field {
	return p.data
}

func (p raidBossesOnRaidsWithPrismaRaidIDEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p raidBossesOnRaidsWithPrismaRaidIDEqualsParams) raidBossesOnRaidsModel() {}

func (p raidBossesOnRaidsWithPrismaRaidIDEqualsParams) raidIDField() {}

func (raidBossesOnRaidsWithPrismaRaidIDSetParams) settable()  {}
func (raidBossesOnRaidsWithPrismaRaidIDEqualsParams) equals() {}

type raidBossesOnRaidsWithPrismaRaidIDEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossesOnRaidsWithPrismaRaidIDEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p raidBossesOnRaidsWithPrismaRaidIDEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p raidBossesOnRaidsWithPrismaRaidIDEqualsParamsUnique) raidBossesOnRaidsModel() {}
func (p raidBossesOnRaidsWithPrismaRaidIDEqualsParamsUnique) raidIDField()            {}

func (raidBossesOnRaidsWithPrismaRaidIDEqualsParamsUnique) unique() {}
func (raidBossesOnRaidsWithPrismaRaidIDEqualsParamsUnique) equals() {}

type iRaidBossesOnRaidsWithPrismaRaidBossEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	raidBossesOnRaidsModel()
	raidBossField()
}

type raidBossesOnRaidsWithPrismaRaidBossSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossesOnRaidsWithPrismaRaidBossSetParams) field() builder.Field {
	return p.data
}

func (p raidBossesOnRaidsWithPrismaRaidBossSetParams) getQuery() builder.Query {
	return p.query
}

func (p raidBossesOnRaidsWithPrismaRaidBossSetParams) raidBossesOnRaidsModel() {}

func (p raidBossesOnRaidsWithPrismaRaidBossSetParams) raidBossField() {}

type raidBossesOnRaidsWithPrismaRaidBossEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossesOnRaidsWithPrismaRaidBossEqualsParams) field() builder.Field {
	return p.data
}

func (p raidBossesOnRaidsWithPrismaRaidBossEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p raidBossesOnRaidsWithPrismaRaidBossEqualsParams) raidBossesOnRaidsModel() {}

func (p raidBossesOnRaidsWithPrismaRaidBossEqualsParams) raidBossField() {}

func (raidBossesOnRaidsWithPrismaRaidBossSetParams) settable()  {}
func (raidBossesOnRaidsWithPrismaRaidBossEqualsParams) equals() {}

type raidBossesOnRaidsWithPrismaRaidBossEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossesOnRaidsWithPrismaRaidBossEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p raidBossesOnRaidsWithPrismaRaidBossEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p raidBossesOnRaidsWithPrismaRaidBossEqualsParamsUnique) raidBossesOnRaidsModel() {}
func (p raidBossesOnRaidsWithPrismaRaidBossEqualsParamsUnique) raidBossField()          {}

func (raidBossesOnRaidsWithPrismaRaidBossEqualsParamsUnique) unique() {}
func (raidBossesOnRaidsWithPrismaRaidBossEqualsParamsUnique) equals() {}

type iRaidBossesOnRaidsWithPrismaRaidBossIDEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	raidBossesOnRaidsModel()
	raidBossIDField()
}

type raidBossesOnRaidsWithPrismaRaidBossIDSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossesOnRaidsWithPrismaRaidBossIDSetParams) field() builder.Field {
	return p.data
}

func (p raidBossesOnRaidsWithPrismaRaidBossIDSetParams) getQuery() builder.Query {
	return p.query
}

func (p raidBossesOnRaidsWithPrismaRaidBossIDSetParams) raidBossesOnRaidsModel() {}

func (p raidBossesOnRaidsWithPrismaRaidBossIDSetParams) raidBossIDField() {}

type raidBossesOnRaidsWithPrismaRaidBossIDEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossesOnRaidsWithPrismaRaidBossIDEqualsParams) field() builder.Field {
	return p.data
}

func (p raidBossesOnRaidsWithPrismaRaidBossIDEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p raidBossesOnRaidsWithPrismaRaidBossIDEqualsParams) raidBossesOnRaidsModel() {}

func (p raidBossesOnRaidsWithPrismaRaidBossIDEqualsParams) raidBossIDField() {}

func (raidBossesOnRaidsWithPrismaRaidBossIDSetParams) settable()  {}
func (raidBossesOnRaidsWithPrismaRaidBossIDEqualsParams) equals() {}

type raidBossesOnRaidsWithPrismaRaidBossIDEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossesOnRaidsWithPrismaRaidBossIDEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p raidBossesOnRaidsWithPrismaRaidBossIDEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p raidBossesOnRaidsWithPrismaRaidBossIDEqualsParamsUnique) raidBossesOnRaidsModel() {}
func (p raidBossesOnRaidsWithPrismaRaidBossIDEqualsParamsUnique) raidBossIDField()        {}

func (raidBossesOnRaidsWithPrismaRaidBossIDEqualsParamsUnique) unique() {}
func (raidBossesOnRaidsWithPrismaRaidBossIDEqualsParamsUnique) equals() {}

type storyActions struct {
	// client holds the prisma client
	client *PrismaClient
}

var storyOutput = []builder.Output{
	{Name: "id"},
	{Name: "createdAt"},
	{Name: "deletedAt"},
	{Name: "updatedAt"},
}

type iStoryRelationWith interface {
	getQuery() builder.Query
	with()
	storyRelation()
}

type iStoryParams interface {
	field() builder.Field
	getQuery() builder.Query
	storyModel()
}

type storyParams struct {
	data  builder.Field
	query builder.Query
}

func (p storyParams) field() builder.Field {
	return p.data
}

func (p storyParams) getQuery() builder.Query {
	return p.query
}

func (p storyParams) storyModel() {}

type iStoryOrderByParams interface {
	field() builder.Field
	getQuery() builder.Query
	storyModel()
}

type storyOrderByParams struct {
	data  builder.Field
	query builder.Query
}

func (p storyOrderByParams) field() builder.Field {
	return p.data
}

func (p storyOrderByParams) getQuery() builder.Query {
	return p.query
}

func (p storyOrderByParams) storyModel() {}

type iStoryCursorParams interface {
	field() builder.Field
	getQuery() builder.Query
	storyModel()
	isCursor()
}

type storyCursorParams struct {
	data  builder.Field
	query builder.Query
}

func (p storyCursorParams) field() builder.Field {
	return p.data
}

func (p storyCursorParams) isCursor() {}

func (p storyCursorParams) getQuery() builder.Query {
	return p.query
}

func (p storyCursorParams) storyModel() {}

type iStoryParamsUnique interface {
	field() builder.Field
	getQuery() builder.Query
	unique()
	storyModel()
}

type storyParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p storyParamsUnique) storyModel() {}

func (storyParamsUnique) unique() {}

func (p storyParamsUnique) field() builder.Field {
	return p.data
}

func (p storyParamsUnique) getQuery() builder.Query {
	return p.query
}

type iStoryEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	storyModel()
}

type storyEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p storyEqualsParams) storyModel() {}

func (storyEqualsParams) equals() {}

func (p storyEqualsParams) field() builder.Field {
	return p.data
}

func (p storyEqualsParams) getQuery() builder.Query {
	return p.query
}

type iStoryEqualsParamsUnique interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	unique()
	storyModel()
}

type storyEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p storyEqualsParamsUnique) storyModel() {}

func (storyEqualsParamsUnique) unique() {}
func (storyEqualsParamsUnique) equals() {}

func (p storyEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p storyEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

type iStorySetParams interface {
	field() builder.Field
	settable()
}

type storySetParams struct {
	data builder.Field
}

func (storySetParams) settable() {}

func (p storySetParams) field() builder.Field {
	return p.data
}

type iStoryWithPrismaIDEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	storyModel()
	idField()
}

type storyWithPrismaIDSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p storyWithPrismaIDSetParams) field() builder.Field {
	return p.data
}

func (p storyWithPrismaIDSetParams) getQuery() builder.Query {
	return p.query
}

func (p storyWithPrismaIDSetParams) storyModel() {}

func (p storyWithPrismaIDSetParams) idField() {}

type storyWithPrismaIDEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p storyWithPrismaIDEqualsParams) field() builder.Field {
	return p.data
}

func (p storyWithPrismaIDEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p storyWithPrismaIDEqualsParams) storyModel() {}

func (p storyWithPrismaIDEqualsParams) idField() {}

func (storyWithPrismaIDSetParams) settable()  {}
func (storyWithPrismaIDEqualsParams) equals() {}

type storyWithPrismaIDEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p storyWithPrismaIDEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p storyWithPrismaIDEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p storyWithPrismaIDEqualsParamsUnique) storyModel() {}
func (p storyWithPrismaIDEqualsParamsUnique) idField()    {}

func (storyWithPrismaIDEqualsParamsUnique) unique() {}
func (storyWithPrismaIDEqualsParamsUnique) equals() {}

type iStoryWithPrismaCreatedAtEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	storyModel()
	createdAtField()
}

type storyWithPrismaCreatedAtSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p storyWithPrismaCreatedAtSetParams) field() builder.Field {
	return p.data
}

func (p storyWithPrismaCreatedAtSetParams) getQuery() builder.Query {
	return p.query
}

func (p storyWithPrismaCreatedAtSetParams) storyModel() {}

func (p storyWithPrismaCreatedAtSetParams) createdAtField() {}

type storyWithPrismaCreatedAtEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p storyWithPrismaCreatedAtEqualsParams) field() builder.Field {
	return p.data
}

func (p storyWithPrismaCreatedAtEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p storyWithPrismaCreatedAtEqualsParams) storyModel() {}

func (p storyWithPrismaCreatedAtEqualsParams) createdAtField() {}

func (storyWithPrismaCreatedAtSetParams) settable()  {}
func (storyWithPrismaCreatedAtEqualsParams) equals() {}

type storyWithPrismaCreatedAtEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p storyWithPrismaCreatedAtEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p storyWithPrismaCreatedAtEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p storyWithPrismaCreatedAtEqualsParamsUnique) storyModel()     {}
func (p storyWithPrismaCreatedAtEqualsParamsUnique) createdAtField() {}

func (storyWithPrismaCreatedAtEqualsParamsUnique) unique() {}
func (storyWithPrismaCreatedAtEqualsParamsUnique) equals() {}

type iStoryWithPrismaDeletedAtEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	storyModel()
	deletedAtField()
}

type storyWithPrismaDeletedAtSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p storyWithPrismaDeletedAtSetParams) field() builder.Field {
	return p.data
}

func (p storyWithPrismaDeletedAtSetParams) getQuery() builder.Query {
	return p.query
}

func (p storyWithPrismaDeletedAtSetParams) storyModel() {}

func (p storyWithPrismaDeletedAtSetParams) deletedAtField() {}

type storyWithPrismaDeletedAtEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p storyWithPrismaDeletedAtEqualsParams) field() builder.Field {
	return p.data
}

func (p storyWithPrismaDeletedAtEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p storyWithPrismaDeletedAtEqualsParams) storyModel() {}

func (p storyWithPrismaDeletedAtEqualsParams) deletedAtField() {}

func (storyWithPrismaDeletedAtSetParams) settable()  {}
func (storyWithPrismaDeletedAtEqualsParams) equals() {}

type storyWithPrismaDeletedAtEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p storyWithPrismaDeletedAtEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p storyWithPrismaDeletedAtEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p storyWithPrismaDeletedAtEqualsParamsUnique) storyModel()     {}
func (p storyWithPrismaDeletedAtEqualsParamsUnique) deletedAtField() {}

func (storyWithPrismaDeletedAtEqualsParamsUnique) unique() {}
func (storyWithPrismaDeletedAtEqualsParamsUnique) equals() {}

type iStoryWithPrismaUpdatedAtEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	storyModel()
	updatedAtField()
}

type storyWithPrismaUpdatedAtSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p storyWithPrismaUpdatedAtSetParams) field() builder.Field {
	return p.data
}

func (p storyWithPrismaUpdatedAtSetParams) getQuery() builder.Query {
	return p.query
}

func (p storyWithPrismaUpdatedAtSetParams) storyModel() {}

func (p storyWithPrismaUpdatedAtSetParams) updatedAtField() {}

type storyWithPrismaUpdatedAtEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p storyWithPrismaUpdatedAtEqualsParams) field() builder.Field {
	return p.data
}

func (p storyWithPrismaUpdatedAtEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p storyWithPrismaUpdatedAtEqualsParams) storyModel() {}

func (p storyWithPrismaUpdatedAtEqualsParams) updatedAtField() {}

func (storyWithPrismaUpdatedAtSetParams) settable()  {}
func (storyWithPrismaUpdatedAtEqualsParams) equals() {}

type storyWithPrismaUpdatedAtEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p storyWithPrismaUpdatedAtEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p storyWithPrismaUpdatedAtEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p storyWithPrismaUpdatedAtEqualsParamsUnique) storyModel()     {}
func (p storyWithPrismaUpdatedAtEqualsParamsUnique) updatedAtField() {}

func (storyWithPrismaUpdatedAtEqualsParamsUnique) unique() {}
func (storyWithPrismaUpdatedAtEqualsParamsUnique) equals() {}

type iStoryWithPrismaStoriesOnRaidsEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	storyModel()
	storiesOnRaidsField()
}

type storyWithPrismaStoriesOnRaidsSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p storyWithPrismaStoriesOnRaidsSetParams) field() builder.Field {
	return p.data
}

func (p storyWithPrismaStoriesOnRaidsSetParams) getQuery() builder.Query {
	return p.query
}

func (p storyWithPrismaStoriesOnRaidsSetParams) storyModel() {}

func (p storyWithPrismaStoriesOnRaidsSetParams) storiesOnRaidsField() {}

type storyWithPrismaStoriesOnRaidsEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p storyWithPrismaStoriesOnRaidsEqualsParams) field() builder.Field {
	return p.data
}

func (p storyWithPrismaStoriesOnRaidsEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p storyWithPrismaStoriesOnRaidsEqualsParams) storyModel() {}

func (p storyWithPrismaStoriesOnRaidsEqualsParams) storiesOnRaidsField() {}

func (storyWithPrismaStoriesOnRaidsSetParams) settable()  {}
func (storyWithPrismaStoriesOnRaidsEqualsParams) equals() {}

type storyWithPrismaStoriesOnRaidsEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p storyWithPrismaStoriesOnRaidsEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p storyWithPrismaStoriesOnRaidsEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p storyWithPrismaStoriesOnRaidsEqualsParamsUnique) storyModel()          {}
func (p storyWithPrismaStoriesOnRaidsEqualsParamsUnique) storiesOnRaidsField() {}

func (storyWithPrismaStoriesOnRaidsEqualsParamsUnique) unique() {}
func (storyWithPrismaStoriesOnRaidsEqualsParamsUnique) equals() {}

type iStoryWithPrismaEventEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	storyModel()
	eventField()
}

type storyWithPrismaEventSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p storyWithPrismaEventSetParams) field() builder.Field {
	return p.data
}

func (p storyWithPrismaEventSetParams) getQuery() builder.Query {
	return p.query
}

func (p storyWithPrismaEventSetParams) storyModel() {}

func (p storyWithPrismaEventSetParams) eventField() {}

type storyWithPrismaEventEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p storyWithPrismaEventEqualsParams) field() builder.Field {
	return p.data
}

func (p storyWithPrismaEventEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p storyWithPrismaEventEqualsParams) storyModel() {}

func (p storyWithPrismaEventEqualsParams) eventField() {}

func (storyWithPrismaEventSetParams) settable()  {}
func (storyWithPrismaEventEqualsParams) equals() {}

type storyWithPrismaEventEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p storyWithPrismaEventEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p storyWithPrismaEventEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p storyWithPrismaEventEqualsParamsUnique) storyModel() {}
func (p storyWithPrismaEventEqualsParamsUnique) eventField() {}

func (storyWithPrismaEventEqualsParamsUnique) unique() {}
func (storyWithPrismaEventEqualsParamsUnique) equals() {}

type storiesOnRaidsActions struct {
	// client holds the prisma client
	client *PrismaClient
}

var storiesOnRaidsOutput = []builder.Output{
	{Name: "createdAt"},
	{Name: "deletedAt"},
	{Name: "updatedAt"},
	{Name: "raidId"},
	{Name: "storyId"},
}

type iStoriesOnRaidsRelationWith interface {
	getQuery() builder.Query
	with()
	storiesOnRaidsRelation()
}

type iStoriesOnRaidsParams interface {
	field() builder.Field
	getQuery() builder.Query
	storiesOnRaidsModel()
}

type storiesOnRaidsParams struct {
	data  builder.Field
	query builder.Query
}

func (p storiesOnRaidsParams) field() builder.Field {
	return p.data
}

func (p storiesOnRaidsParams) getQuery() builder.Query {
	return p.query
}

func (p storiesOnRaidsParams) storiesOnRaidsModel() {}

type iStoriesOnRaidsOrderByParams interface {
	field() builder.Field
	getQuery() builder.Query
	storiesOnRaidsModel()
}

type storiesOnRaidsOrderByParams struct {
	data  builder.Field
	query builder.Query
}

func (p storiesOnRaidsOrderByParams) field() builder.Field {
	return p.data
}

func (p storiesOnRaidsOrderByParams) getQuery() builder.Query {
	return p.query
}

func (p storiesOnRaidsOrderByParams) storiesOnRaidsModel() {}

type iStoriesOnRaidsCursorParams interface {
	field() builder.Field
	getQuery() builder.Query
	storiesOnRaidsModel()
	isCursor()
}

type storiesOnRaidsCursorParams struct {
	data  builder.Field
	query builder.Query
}

func (p storiesOnRaidsCursorParams) field() builder.Field {
	return p.data
}

func (p storiesOnRaidsCursorParams) isCursor() {}

func (p storiesOnRaidsCursorParams) getQuery() builder.Query {
	return p.query
}

func (p storiesOnRaidsCursorParams) storiesOnRaidsModel() {}

type iStoriesOnRaidsParamsUnique interface {
	field() builder.Field
	getQuery() builder.Query
	unique()
	storiesOnRaidsModel()
}

type storiesOnRaidsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p storiesOnRaidsParamsUnique) storiesOnRaidsModel() {}

func (storiesOnRaidsParamsUnique) unique() {}

func (p storiesOnRaidsParamsUnique) field() builder.Field {
	return p.data
}

func (p storiesOnRaidsParamsUnique) getQuery() builder.Query {
	return p.query
}

type iStoriesOnRaidsEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	storiesOnRaidsModel()
}

type storiesOnRaidsEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p storiesOnRaidsEqualsParams) storiesOnRaidsModel() {}

func (storiesOnRaidsEqualsParams) equals() {}

func (p storiesOnRaidsEqualsParams) field() builder.Field {
	return p.data
}

func (p storiesOnRaidsEqualsParams) getQuery() builder.Query {
	return p.query
}

type iStoriesOnRaidsEqualsParamsUnique interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	unique()
	storiesOnRaidsModel()
}

type storiesOnRaidsEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p storiesOnRaidsEqualsParamsUnique) storiesOnRaidsModel() {}

func (storiesOnRaidsEqualsParamsUnique) unique() {}
func (storiesOnRaidsEqualsParamsUnique) equals() {}

func (p storiesOnRaidsEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p storiesOnRaidsEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

type iStoriesOnRaidsSetParams interface {
	field() builder.Field
	settable()
}

type storiesOnRaidsSetParams struct {
	data builder.Field
}

func (storiesOnRaidsSetParams) settable() {}

func (p storiesOnRaidsSetParams) field() builder.Field {
	return p.data
}

type iStoriesOnRaidsWithPrismaCreatedAtEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	storiesOnRaidsModel()
	createdAtField()
}

type storiesOnRaidsWithPrismaCreatedAtSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p storiesOnRaidsWithPrismaCreatedAtSetParams) field() builder.Field {
	return p.data
}

func (p storiesOnRaidsWithPrismaCreatedAtSetParams) getQuery() builder.Query {
	return p.query
}

func (p storiesOnRaidsWithPrismaCreatedAtSetParams) storiesOnRaidsModel() {}

func (p storiesOnRaidsWithPrismaCreatedAtSetParams) createdAtField() {}

type storiesOnRaidsWithPrismaCreatedAtEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p storiesOnRaidsWithPrismaCreatedAtEqualsParams) field() builder.Field {
	return p.data
}

func (p storiesOnRaidsWithPrismaCreatedAtEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p storiesOnRaidsWithPrismaCreatedAtEqualsParams) storiesOnRaidsModel() {}

func (p storiesOnRaidsWithPrismaCreatedAtEqualsParams) createdAtField() {}

func (storiesOnRaidsWithPrismaCreatedAtSetParams) settable()  {}
func (storiesOnRaidsWithPrismaCreatedAtEqualsParams) equals() {}

type storiesOnRaidsWithPrismaCreatedAtEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p storiesOnRaidsWithPrismaCreatedAtEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p storiesOnRaidsWithPrismaCreatedAtEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p storiesOnRaidsWithPrismaCreatedAtEqualsParamsUnique) storiesOnRaidsModel() {}
func (p storiesOnRaidsWithPrismaCreatedAtEqualsParamsUnique) createdAtField()      {}

func (storiesOnRaidsWithPrismaCreatedAtEqualsParamsUnique) unique() {}
func (storiesOnRaidsWithPrismaCreatedAtEqualsParamsUnique) equals() {}

type iStoriesOnRaidsWithPrismaDeletedAtEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	storiesOnRaidsModel()
	deletedAtField()
}

type storiesOnRaidsWithPrismaDeletedAtSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p storiesOnRaidsWithPrismaDeletedAtSetParams) field() builder.Field {
	return p.data
}

func (p storiesOnRaidsWithPrismaDeletedAtSetParams) getQuery() builder.Query {
	return p.query
}

func (p storiesOnRaidsWithPrismaDeletedAtSetParams) storiesOnRaidsModel() {}

func (p storiesOnRaidsWithPrismaDeletedAtSetParams) deletedAtField() {}

type storiesOnRaidsWithPrismaDeletedAtEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p storiesOnRaidsWithPrismaDeletedAtEqualsParams) field() builder.Field {
	return p.data
}

func (p storiesOnRaidsWithPrismaDeletedAtEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p storiesOnRaidsWithPrismaDeletedAtEqualsParams) storiesOnRaidsModel() {}

func (p storiesOnRaidsWithPrismaDeletedAtEqualsParams) deletedAtField() {}

func (storiesOnRaidsWithPrismaDeletedAtSetParams) settable()  {}
func (storiesOnRaidsWithPrismaDeletedAtEqualsParams) equals() {}

type storiesOnRaidsWithPrismaDeletedAtEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p storiesOnRaidsWithPrismaDeletedAtEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p storiesOnRaidsWithPrismaDeletedAtEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p storiesOnRaidsWithPrismaDeletedAtEqualsParamsUnique) storiesOnRaidsModel() {}
func (p storiesOnRaidsWithPrismaDeletedAtEqualsParamsUnique) deletedAtField()      {}

func (storiesOnRaidsWithPrismaDeletedAtEqualsParamsUnique) unique() {}
func (storiesOnRaidsWithPrismaDeletedAtEqualsParamsUnique) equals() {}

type iStoriesOnRaidsWithPrismaUpdatedAtEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	storiesOnRaidsModel()
	updatedAtField()
}

type storiesOnRaidsWithPrismaUpdatedAtSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p storiesOnRaidsWithPrismaUpdatedAtSetParams) field() builder.Field {
	return p.data
}

func (p storiesOnRaidsWithPrismaUpdatedAtSetParams) getQuery() builder.Query {
	return p.query
}

func (p storiesOnRaidsWithPrismaUpdatedAtSetParams) storiesOnRaidsModel() {}

func (p storiesOnRaidsWithPrismaUpdatedAtSetParams) updatedAtField() {}

type storiesOnRaidsWithPrismaUpdatedAtEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p storiesOnRaidsWithPrismaUpdatedAtEqualsParams) field() builder.Field {
	return p.data
}

func (p storiesOnRaidsWithPrismaUpdatedAtEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p storiesOnRaidsWithPrismaUpdatedAtEqualsParams) storiesOnRaidsModel() {}

func (p storiesOnRaidsWithPrismaUpdatedAtEqualsParams) updatedAtField() {}

func (storiesOnRaidsWithPrismaUpdatedAtSetParams) settable()  {}
func (storiesOnRaidsWithPrismaUpdatedAtEqualsParams) equals() {}

type storiesOnRaidsWithPrismaUpdatedAtEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p storiesOnRaidsWithPrismaUpdatedAtEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p storiesOnRaidsWithPrismaUpdatedAtEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p storiesOnRaidsWithPrismaUpdatedAtEqualsParamsUnique) storiesOnRaidsModel() {}
func (p storiesOnRaidsWithPrismaUpdatedAtEqualsParamsUnique) updatedAtField()      {}

func (storiesOnRaidsWithPrismaUpdatedAtEqualsParamsUnique) unique() {}
func (storiesOnRaidsWithPrismaUpdatedAtEqualsParamsUnique) equals() {}

type iStoriesOnRaidsWithPrismaRaidEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	storiesOnRaidsModel()
	raidField()
}

type storiesOnRaidsWithPrismaRaidSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p storiesOnRaidsWithPrismaRaidSetParams) field() builder.Field {
	return p.data
}

func (p storiesOnRaidsWithPrismaRaidSetParams) getQuery() builder.Query {
	return p.query
}

func (p storiesOnRaidsWithPrismaRaidSetParams) storiesOnRaidsModel() {}

func (p storiesOnRaidsWithPrismaRaidSetParams) raidField() {}

type storiesOnRaidsWithPrismaRaidEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p storiesOnRaidsWithPrismaRaidEqualsParams) field() builder.Field {
	return p.data
}

func (p storiesOnRaidsWithPrismaRaidEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p storiesOnRaidsWithPrismaRaidEqualsParams) storiesOnRaidsModel() {}

func (p storiesOnRaidsWithPrismaRaidEqualsParams) raidField() {}

func (storiesOnRaidsWithPrismaRaidSetParams) settable()  {}
func (storiesOnRaidsWithPrismaRaidEqualsParams) equals() {}

type storiesOnRaidsWithPrismaRaidEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p storiesOnRaidsWithPrismaRaidEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p storiesOnRaidsWithPrismaRaidEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p storiesOnRaidsWithPrismaRaidEqualsParamsUnique) storiesOnRaidsModel() {}
func (p storiesOnRaidsWithPrismaRaidEqualsParamsUnique) raidField()           {}

func (storiesOnRaidsWithPrismaRaidEqualsParamsUnique) unique() {}
func (storiesOnRaidsWithPrismaRaidEqualsParamsUnique) equals() {}

type iStoriesOnRaidsWithPrismaRaidIDEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	storiesOnRaidsModel()
	raidIDField()
}

type storiesOnRaidsWithPrismaRaidIDSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p storiesOnRaidsWithPrismaRaidIDSetParams) field() builder.Field {
	return p.data
}

func (p storiesOnRaidsWithPrismaRaidIDSetParams) getQuery() builder.Query {
	return p.query
}

func (p storiesOnRaidsWithPrismaRaidIDSetParams) storiesOnRaidsModel() {}

func (p storiesOnRaidsWithPrismaRaidIDSetParams) raidIDField() {}

type storiesOnRaidsWithPrismaRaidIDEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p storiesOnRaidsWithPrismaRaidIDEqualsParams) field() builder.Field {
	return p.data
}

func (p storiesOnRaidsWithPrismaRaidIDEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p storiesOnRaidsWithPrismaRaidIDEqualsParams) storiesOnRaidsModel() {}

func (p storiesOnRaidsWithPrismaRaidIDEqualsParams) raidIDField() {}

func (storiesOnRaidsWithPrismaRaidIDSetParams) settable()  {}
func (storiesOnRaidsWithPrismaRaidIDEqualsParams) equals() {}

type storiesOnRaidsWithPrismaRaidIDEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p storiesOnRaidsWithPrismaRaidIDEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p storiesOnRaidsWithPrismaRaidIDEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p storiesOnRaidsWithPrismaRaidIDEqualsParamsUnique) storiesOnRaidsModel() {}
func (p storiesOnRaidsWithPrismaRaidIDEqualsParamsUnique) raidIDField()         {}

func (storiesOnRaidsWithPrismaRaidIDEqualsParamsUnique) unique() {}
func (storiesOnRaidsWithPrismaRaidIDEqualsParamsUnique) equals() {}

type iStoriesOnRaidsWithPrismaStoryEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	storiesOnRaidsModel()
	storyField()
}

type storiesOnRaidsWithPrismaStorySetParams struct {
	data  builder.Field
	query builder.Query
}

func (p storiesOnRaidsWithPrismaStorySetParams) field() builder.Field {
	return p.data
}

func (p storiesOnRaidsWithPrismaStorySetParams) getQuery() builder.Query {
	return p.query
}

func (p storiesOnRaidsWithPrismaStorySetParams) storiesOnRaidsModel() {}

func (p storiesOnRaidsWithPrismaStorySetParams) storyField() {}

type storiesOnRaidsWithPrismaStoryEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p storiesOnRaidsWithPrismaStoryEqualsParams) field() builder.Field {
	return p.data
}

func (p storiesOnRaidsWithPrismaStoryEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p storiesOnRaidsWithPrismaStoryEqualsParams) storiesOnRaidsModel() {}

func (p storiesOnRaidsWithPrismaStoryEqualsParams) storyField() {}

func (storiesOnRaidsWithPrismaStorySetParams) settable()  {}
func (storiesOnRaidsWithPrismaStoryEqualsParams) equals() {}

type storiesOnRaidsWithPrismaStoryEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p storiesOnRaidsWithPrismaStoryEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p storiesOnRaidsWithPrismaStoryEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p storiesOnRaidsWithPrismaStoryEqualsParamsUnique) storiesOnRaidsModel() {}
func (p storiesOnRaidsWithPrismaStoryEqualsParamsUnique) storyField()          {}

func (storiesOnRaidsWithPrismaStoryEqualsParamsUnique) unique() {}
func (storiesOnRaidsWithPrismaStoryEqualsParamsUnique) equals() {}

type iStoriesOnRaidsWithPrismaStoryIDEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	storiesOnRaidsModel()
	storyIDField()
}

type storiesOnRaidsWithPrismaStoryIDSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p storiesOnRaidsWithPrismaStoryIDSetParams) field() builder.Field {
	return p.data
}

func (p storiesOnRaidsWithPrismaStoryIDSetParams) getQuery() builder.Query {
	return p.query
}

func (p storiesOnRaidsWithPrismaStoryIDSetParams) storiesOnRaidsModel() {}

func (p storiesOnRaidsWithPrismaStoryIDSetParams) storyIDField() {}

type storiesOnRaidsWithPrismaStoryIDEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p storiesOnRaidsWithPrismaStoryIDEqualsParams) field() builder.Field {
	return p.data
}

func (p storiesOnRaidsWithPrismaStoryIDEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p storiesOnRaidsWithPrismaStoryIDEqualsParams) storiesOnRaidsModel() {}

func (p storiesOnRaidsWithPrismaStoryIDEqualsParams) storyIDField() {}

func (storiesOnRaidsWithPrismaStoryIDSetParams) settable()  {}
func (storiesOnRaidsWithPrismaStoryIDEqualsParams) equals() {}

type storiesOnRaidsWithPrismaStoryIDEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p storiesOnRaidsWithPrismaStoryIDEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p storiesOnRaidsWithPrismaStoryIDEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p storiesOnRaidsWithPrismaStoryIDEqualsParamsUnique) storiesOnRaidsModel() {}
func (p storiesOnRaidsWithPrismaStoryIDEqualsParamsUnique) storyIDField()        {}

func (storiesOnRaidsWithPrismaStoryIDEqualsParamsUnique) unique() {}
func (storiesOnRaidsWithPrismaStoryIDEqualsParamsUnique) equals() {}

type eventActions struct {
	// client holds the prisma client
	client *PrismaClient
}

var eventOutput = []builder.Output{
	{Name: "id"},
	{Name: "createdAt"},
	{Name: "deletedAt"},
	{Name: "updatedAt"},
	{Name: "storyId"},
	{Name: "sequence"},
}

type iEventRelationWith interface {
	getQuery() builder.Query
	with()
	eventRelation()
}

type iEventParams interface {
	field() builder.Field
	getQuery() builder.Query
	eventModel()
}

type eventParams struct {
	data  builder.Field
	query builder.Query
}

func (p eventParams) field() builder.Field {
	return p.data
}

func (p eventParams) getQuery() builder.Query {
	return p.query
}

func (p eventParams) eventModel() {}

type iEventOrderByParams interface {
	field() builder.Field
	getQuery() builder.Query
	eventModel()
}

type eventOrderByParams struct {
	data  builder.Field
	query builder.Query
}

func (p eventOrderByParams) field() builder.Field {
	return p.data
}

func (p eventOrderByParams) getQuery() builder.Query {
	return p.query
}

func (p eventOrderByParams) eventModel() {}

type iEventCursorParams interface {
	field() builder.Field
	getQuery() builder.Query
	eventModel()
	isCursor()
}

type eventCursorParams struct {
	data  builder.Field
	query builder.Query
}

func (p eventCursorParams) field() builder.Field {
	return p.data
}

func (p eventCursorParams) isCursor() {}

func (p eventCursorParams) getQuery() builder.Query {
	return p.query
}

func (p eventCursorParams) eventModel() {}

type iEventParamsUnique interface {
	field() builder.Field
	getQuery() builder.Query
	unique()
	eventModel()
}

type eventParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p eventParamsUnique) eventModel() {}

func (eventParamsUnique) unique() {}

func (p eventParamsUnique) field() builder.Field {
	return p.data
}

func (p eventParamsUnique) getQuery() builder.Query {
	return p.query
}

type iEventEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	eventModel()
}

type eventEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p eventEqualsParams) eventModel() {}

func (eventEqualsParams) equals() {}

func (p eventEqualsParams) field() builder.Field {
	return p.data
}

func (p eventEqualsParams) getQuery() builder.Query {
	return p.query
}

type iEventEqualsParamsUnique interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	unique()
	eventModel()
}

type eventEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p eventEqualsParamsUnique) eventModel() {}

func (eventEqualsParamsUnique) unique() {}
func (eventEqualsParamsUnique) equals() {}

func (p eventEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p eventEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

type iEventSetParams interface {
	field() builder.Field
	settable()
}

type eventSetParams struct {
	data builder.Field
}

func (eventSetParams) settable() {}

func (p eventSetParams) field() builder.Field {
	return p.data
}

type iEventWithPrismaIDEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	eventModel()
	idField()
}

type eventWithPrismaIDSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p eventWithPrismaIDSetParams) field() builder.Field {
	return p.data
}

func (p eventWithPrismaIDSetParams) getQuery() builder.Query {
	return p.query
}

func (p eventWithPrismaIDSetParams) eventModel() {}

func (p eventWithPrismaIDSetParams) idField() {}

type eventWithPrismaIDEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p eventWithPrismaIDEqualsParams) field() builder.Field {
	return p.data
}

func (p eventWithPrismaIDEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p eventWithPrismaIDEqualsParams) eventModel() {}

func (p eventWithPrismaIDEqualsParams) idField() {}

func (eventWithPrismaIDSetParams) settable()  {}
func (eventWithPrismaIDEqualsParams) equals() {}

type eventWithPrismaIDEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p eventWithPrismaIDEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p eventWithPrismaIDEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p eventWithPrismaIDEqualsParamsUnique) eventModel() {}
func (p eventWithPrismaIDEqualsParamsUnique) idField()    {}

func (eventWithPrismaIDEqualsParamsUnique) unique() {}
func (eventWithPrismaIDEqualsParamsUnique) equals() {}

type iEventWithPrismaCreatedAtEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	eventModel()
	createdAtField()
}

type eventWithPrismaCreatedAtSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p eventWithPrismaCreatedAtSetParams) field() builder.Field {
	return p.data
}

func (p eventWithPrismaCreatedAtSetParams) getQuery() builder.Query {
	return p.query
}

func (p eventWithPrismaCreatedAtSetParams) eventModel() {}

func (p eventWithPrismaCreatedAtSetParams) createdAtField() {}

type eventWithPrismaCreatedAtEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p eventWithPrismaCreatedAtEqualsParams) field() builder.Field {
	return p.data
}

func (p eventWithPrismaCreatedAtEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p eventWithPrismaCreatedAtEqualsParams) eventModel() {}

func (p eventWithPrismaCreatedAtEqualsParams) createdAtField() {}

func (eventWithPrismaCreatedAtSetParams) settable()  {}
func (eventWithPrismaCreatedAtEqualsParams) equals() {}

type eventWithPrismaCreatedAtEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p eventWithPrismaCreatedAtEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p eventWithPrismaCreatedAtEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p eventWithPrismaCreatedAtEqualsParamsUnique) eventModel()     {}
func (p eventWithPrismaCreatedAtEqualsParamsUnique) createdAtField() {}

func (eventWithPrismaCreatedAtEqualsParamsUnique) unique() {}
func (eventWithPrismaCreatedAtEqualsParamsUnique) equals() {}

type iEventWithPrismaDeletedAtEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	eventModel()
	deletedAtField()
}

type eventWithPrismaDeletedAtSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p eventWithPrismaDeletedAtSetParams) field() builder.Field {
	return p.data
}

func (p eventWithPrismaDeletedAtSetParams) getQuery() builder.Query {
	return p.query
}

func (p eventWithPrismaDeletedAtSetParams) eventModel() {}

func (p eventWithPrismaDeletedAtSetParams) deletedAtField() {}

type eventWithPrismaDeletedAtEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p eventWithPrismaDeletedAtEqualsParams) field() builder.Field {
	return p.data
}

func (p eventWithPrismaDeletedAtEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p eventWithPrismaDeletedAtEqualsParams) eventModel() {}

func (p eventWithPrismaDeletedAtEqualsParams) deletedAtField() {}

func (eventWithPrismaDeletedAtSetParams) settable()  {}
func (eventWithPrismaDeletedAtEqualsParams) equals() {}

type eventWithPrismaDeletedAtEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p eventWithPrismaDeletedAtEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p eventWithPrismaDeletedAtEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p eventWithPrismaDeletedAtEqualsParamsUnique) eventModel()     {}
func (p eventWithPrismaDeletedAtEqualsParamsUnique) deletedAtField() {}

func (eventWithPrismaDeletedAtEqualsParamsUnique) unique() {}
func (eventWithPrismaDeletedAtEqualsParamsUnique) equals() {}

type iEventWithPrismaUpdatedAtEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	eventModel()
	updatedAtField()
}

type eventWithPrismaUpdatedAtSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p eventWithPrismaUpdatedAtSetParams) field() builder.Field {
	return p.data
}

func (p eventWithPrismaUpdatedAtSetParams) getQuery() builder.Query {
	return p.query
}

func (p eventWithPrismaUpdatedAtSetParams) eventModel() {}

func (p eventWithPrismaUpdatedAtSetParams) updatedAtField() {}

type eventWithPrismaUpdatedAtEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p eventWithPrismaUpdatedAtEqualsParams) field() builder.Field {
	return p.data
}

func (p eventWithPrismaUpdatedAtEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p eventWithPrismaUpdatedAtEqualsParams) eventModel() {}

func (p eventWithPrismaUpdatedAtEqualsParams) updatedAtField() {}

func (eventWithPrismaUpdatedAtSetParams) settable()  {}
func (eventWithPrismaUpdatedAtEqualsParams) equals() {}

type eventWithPrismaUpdatedAtEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p eventWithPrismaUpdatedAtEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p eventWithPrismaUpdatedAtEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p eventWithPrismaUpdatedAtEqualsParamsUnique) eventModel()     {}
func (p eventWithPrismaUpdatedAtEqualsParamsUnique) updatedAtField() {}

func (eventWithPrismaUpdatedAtEqualsParamsUnique) unique() {}
func (eventWithPrismaUpdatedAtEqualsParamsUnique) equals() {}

type iEventWithPrismaStoryEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	eventModel()
	storyField()
}

type eventWithPrismaStorySetParams struct {
	data  builder.Field
	query builder.Query
}

func (p eventWithPrismaStorySetParams) field() builder.Field {
	return p.data
}

func (p eventWithPrismaStorySetParams) getQuery() builder.Query {
	return p.query
}

func (p eventWithPrismaStorySetParams) eventModel() {}

func (p eventWithPrismaStorySetParams) storyField() {}

type eventWithPrismaStoryEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p eventWithPrismaStoryEqualsParams) field() builder.Field {
	return p.data
}

func (p eventWithPrismaStoryEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p eventWithPrismaStoryEqualsParams) eventModel() {}

func (p eventWithPrismaStoryEqualsParams) storyField() {}

func (eventWithPrismaStorySetParams) settable()  {}
func (eventWithPrismaStoryEqualsParams) equals() {}

type eventWithPrismaStoryEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p eventWithPrismaStoryEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p eventWithPrismaStoryEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p eventWithPrismaStoryEqualsParamsUnique) eventModel() {}
func (p eventWithPrismaStoryEqualsParamsUnique) storyField() {}

func (eventWithPrismaStoryEqualsParamsUnique) unique() {}
func (eventWithPrismaStoryEqualsParamsUnique) equals() {}

type iEventWithPrismaStoryIDEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	eventModel()
	storyIDField()
}

type eventWithPrismaStoryIDSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p eventWithPrismaStoryIDSetParams) field() builder.Field {
	return p.data
}

func (p eventWithPrismaStoryIDSetParams) getQuery() builder.Query {
	return p.query
}

func (p eventWithPrismaStoryIDSetParams) eventModel() {}

func (p eventWithPrismaStoryIDSetParams) storyIDField() {}

type eventWithPrismaStoryIDEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p eventWithPrismaStoryIDEqualsParams) field() builder.Field {
	return p.data
}

func (p eventWithPrismaStoryIDEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p eventWithPrismaStoryIDEqualsParams) eventModel() {}

func (p eventWithPrismaStoryIDEqualsParams) storyIDField() {}

func (eventWithPrismaStoryIDSetParams) settable()  {}
func (eventWithPrismaStoryIDEqualsParams) equals() {}

type eventWithPrismaStoryIDEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p eventWithPrismaStoryIDEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p eventWithPrismaStoryIDEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p eventWithPrismaStoryIDEqualsParamsUnique) eventModel()   {}
func (p eventWithPrismaStoryIDEqualsParamsUnique) storyIDField() {}

func (eventWithPrismaStoryIDEqualsParamsUnique) unique() {}
func (eventWithPrismaStoryIDEqualsParamsUnique) equals() {}

type iEventWithPrismaSequenceEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	eventModel()
	sequenceField()
}

type eventWithPrismaSequenceSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p eventWithPrismaSequenceSetParams) field() builder.Field {
	return p.data
}

func (p eventWithPrismaSequenceSetParams) getQuery() builder.Query {
	return p.query
}

func (p eventWithPrismaSequenceSetParams) eventModel() {}

func (p eventWithPrismaSequenceSetParams) sequenceField() {}

type eventWithPrismaSequenceEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p eventWithPrismaSequenceEqualsParams) field() builder.Field {
	return p.data
}

func (p eventWithPrismaSequenceEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p eventWithPrismaSequenceEqualsParams) eventModel() {}

func (p eventWithPrismaSequenceEqualsParams) sequenceField() {}

func (eventWithPrismaSequenceSetParams) settable()  {}
func (eventWithPrismaSequenceEqualsParams) equals() {}

type eventWithPrismaSequenceEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p eventWithPrismaSequenceEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p eventWithPrismaSequenceEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p eventWithPrismaSequenceEqualsParamsUnique) eventModel()    {}
func (p eventWithPrismaSequenceEqualsParamsUnique) sequenceField() {}

func (eventWithPrismaSequenceEqualsParamsUnique) unique() {}
func (eventWithPrismaSequenceEqualsParamsUnique) equals() {}

type iEventWithPrismaActionEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	eventModel()
	actionField()
}

type eventWithPrismaActionSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p eventWithPrismaActionSetParams) field() builder.Field {
	return p.data
}

func (p eventWithPrismaActionSetParams) getQuery() builder.Query {
	return p.query
}

func (p eventWithPrismaActionSetParams) eventModel() {}

func (p eventWithPrismaActionSetParams) actionField() {}

type eventWithPrismaActionEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p eventWithPrismaActionEqualsParams) field() builder.Field {
	return p.data
}

func (p eventWithPrismaActionEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p eventWithPrismaActionEqualsParams) eventModel() {}

func (p eventWithPrismaActionEqualsParams) actionField() {}

func (eventWithPrismaActionSetParams) settable()  {}
func (eventWithPrismaActionEqualsParams) equals() {}

type eventWithPrismaActionEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p eventWithPrismaActionEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p eventWithPrismaActionEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p eventWithPrismaActionEqualsParamsUnique) eventModel()  {}
func (p eventWithPrismaActionEqualsParamsUnique) actionField() {}

func (eventWithPrismaActionEqualsParamsUnique) unique() {}
func (eventWithPrismaActionEqualsParamsUnique) equals() {}

type iEventWithPrismaMessagesOnEventsEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	eventModel()
	messagesOnEventsField()
}

type eventWithPrismaMessagesOnEventsSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p eventWithPrismaMessagesOnEventsSetParams) field() builder.Field {
	return p.data
}

func (p eventWithPrismaMessagesOnEventsSetParams) getQuery() builder.Query {
	return p.query
}

func (p eventWithPrismaMessagesOnEventsSetParams) eventModel() {}

func (p eventWithPrismaMessagesOnEventsSetParams) messagesOnEventsField() {}

type eventWithPrismaMessagesOnEventsEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p eventWithPrismaMessagesOnEventsEqualsParams) field() builder.Field {
	return p.data
}

func (p eventWithPrismaMessagesOnEventsEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p eventWithPrismaMessagesOnEventsEqualsParams) eventModel() {}

func (p eventWithPrismaMessagesOnEventsEqualsParams) messagesOnEventsField() {}

func (eventWithPrismaMessagesOnEventsSetParams) settable()  {}
func (eventWithPrismaMessagesOnEventsEqualsParams) equals() {}

type eventWithPrismaMessagesOnEventsEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p eventWithPrismaMessagesOnEventsEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p eventWithPrismaMessagesOnEventsEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p eventWithPrismaMessagesOnEventsEqualsParamsUnique) eventModel()            {}
func (p eventWithPrismaMessagesOnEventsEqualsParamsUnique) messagesOnEventsField() {}

func (eventWithPrismaMessagesOnEventsEqualsParamsUnique) unique() {}
func (eventWithPrismaMessagesOnEventsEqualsParamsUnique) equals() {}

type actionActions struct {
	// client holds the prisma client
	client *PrismaClient
}

var actionOutput = []builder.Output{
	{Name: "id"},
	{Name: "createdAt"},
	{Name: "deletedAt"},
	{Name: "updatedAt"},
	{Name: "position"},
	{Name: "eventId"},
}

type iActionRelationWith interface {
	getQuery() builder.Query
	with()
	actionRelation()
}

type iActionParams interface {
	field() builder.Field
	getQuery() builder.Query
	actionModel()
}

type actionParams struct {
	data  builder.Field
	query builder.Query
}

func (p actionParams) field() builder.Field {
	return p.data
}

func (p actionParams) getQuery() builder.Query {
	return p.query
}

func (p actionParams) actionModel() {}

type iActionOrderByParams interface {
	field() builder.Field
	getQuery() builder.Query
	actionModel()
}

type actionOrderByParams struct {
	data  builder.Field
	query builder.Query
}

func (p actionOrderByParams) field() builder.Field {
	return p.data
}

func (p actionOrderByParams) getQuery() builder.Query {
	return p.query
}

func (p actionOrderByParams) actionModel() {}

type iActionCursorParams interface {
	field() builder.Field
	getQuery() builder.Query
	actionModel()
	isCursor()
}

type actionCursorParams struct {
	data  builder.Field
	query builder.Query
}

func (p actionCursorParams) field() builder.Field {
	return p.data
}

func (p actionCursorParams) isCursor() {}

func (p actionCursorParams) getQuery() builder.Query {
	return p.query
}

func (p actionCursorParams) actionModel() {}

type iActionParamsUnique interface {
	field() builder.Field
	getQuery() builder.Query
	unique()
	actionModel()
}

type actionParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p actionParamsUnique) actionModel() {}

func (actionParamsUnique) unique() {}

func (p actionParamsUnique) field() builder.Field {
	return p.data
}

func (p actionParamsUnique) getQuery() builder.Query {
	return p.query
}

type iActionEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	actionModel()
}

type actionEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p actionEqualsParams) actionModel() {}

func (actionEqualsParams) equals() {}

func (p actionEqualsParams) field() builder.Field {
	return p.data
}

func (p actionEqualsParams) getQuery() builder.Query {
	return p.query
}

type iActionEqualsParamsUnique interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	unique()
	actionModel()
}

type actionEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p actionEqualsParamsUnique) actionModel() {}

func (actionEqualsParamsUnique) unique() {}
func (actionEqualsParamsUnique) equals() {}

func (p actionEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p actionEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

type iActionSetParams interface {
	field() builder.Field
	settable()
}

type actionSetParams struct {
	data builder.Field
}

func (actionSetParams) settable() {}

func (p actionSetParams) field() builder.Field {
	return p.data
}

type iActionWithPrismaIDEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	actionModel()
	idField()
}

type actionWithPrismaIDSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p actionWithPrismaIDSetParams) field() builder.Field {
	return p.data
}

func (p actionWithPrismaIDSetParams) getQuery() builder.Query {
	return p.query
}

func (p actionWithPrismaIDSetParams) actionModel() {}

func (p actionWithPrismaIDSetParams) idField() {}

type actionWithPrismaIDEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p actionWithPrismaIDEqualsParams) field() builder.Field {
	return p.data
}

func (p actionWithPrismaIDEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p actionWithPrismaIDEqualsParams) actionModel() {}

func (p actionWithPrismaIDEqualsParams) idField() {}

func (actionWithPrismaIDSetParams) settable()  {}
func (actionWithPrismaIDEqualsParams) equals() {}

type actionWithPrismaIDEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p actionWithPrismaIDEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p actionWithPrismaIDEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p actionWithPrismaIDEqualsParamsUnique) actionModel() {}
func (p actionWithPrismaIDEqualsParamsUnique) idField()     {}

func (actionWithPrismaIDEqualsParamsUnique) unique() {}
func (actionWithPrismaIDEqualsParamsUnique) equals() {}

type iActionWithPrismaCreatedAtEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	actionModel()
	createdAtField()
}

type actionWithPrismaCreatedAtSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p actionWithPrismaCreatedAtSetParams) field() builder.Field {
	return p.data
}

func (p actionWithPrismaCreatedAtSetParams) getQuery() builder.Query {
	return p.query
}

func (p actionWithPrismaCreatedAtSetParams) actionModel() {}

func (p actionWithPrismaCreatedAtSetParams) createdAtField() {}

type actionWithPrismaCreatedAtEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p actionWithPrismaCreatedAtEqualsParams) field() builder.Field {
	return p.data
}

func (p actionWithPrismaCreatedAtEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p actionWithPrismaCreatedAtEqualsParams) actionModel() {}

func (p actionWithPrismaCreatedAtEqualsParams) createdAtField() {}

func (actionWithPrismaCreatedAtSetParams) settable()  {}
func (actionWithPrismaCreatedAtEqualsParams) equals() {}

type actionWithPrismaCreatedAtEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p actionWithPrismaCreatedAtEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p actionWithPrismaCreatedAtEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p actionWithPrismaCreatedAtEqualsParamsUnique) actionModel()    {}
func (p actionWithPrismaCreatedAtEqualsParamsUnique) createdAtField() {}

func (actionWithPrismaCreatedAtEqualsParamsUnique) unique() {}
func (actionWithPrismaCreatedAtEqualsParamsUnique) equals() {}

type iActionWithPrismaDeletedAtEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	actionModel()
	deletedAtField()
}

type actionWithPrismaDeletedAtSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p actionWithPrismaDeletedAtSetParams) field() builder.Field {
	return p.data
}

func (p actionWithPrismaDeletedAtSetParams) getQuery() builder.Query {
	return p.query
}

func (p actionWithPrismaDeletedAtSetParams) actionModel() {}

func (p actionWithPrismaDeletedAtSetParams) deletedAtField() {}

type actionWithPrismaDeletedAtEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p actionWithPrismaDeletedAtEqualsParams) field() builder.Field {
	return p.data
}

func (p actionWithPrismaDeletedAtEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p actionWithPrismaDeletedAtEqualsParams) actionModel() {}

func (p actionWithPrismaDeletedAtEqualsParams) deletedAtField() {}

func (actionWithPrismaDeletedAtSetParams) settable()  {}
func (actionWithPrismaDeletedAtEqualsParams) equals() {}

type actionWithPrismaDeletedAtEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p actionWithPrismaDeletedAtEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p actionWithPrismaDeletedAtEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p actionWithPrismaDeletedAtEqualsParamsUnique) actionModel()    {}
func (p actionWithPrismaDeletedAtEqualsParamsUnique) deletedAtField() {}

func (actionWithPrismaDeletedAtEqualsParamsUnique) unique() {}
func (actionWithPrismaDeletedAtEqualsParamsUnique) equals() {}

type iActionWithPrismaUpdatedAtEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	actionModel()
	updatedAtField()
}

type actionWithPrismaUpdatedAtSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p actionWithPrismaUpdatedAtSetParams) field() builder.Field {
	return p.data
}

func (p actionWithPrismaUpdatedAtSetParams) getQuery() builder.Query {
	return p.query
}

func (p actionWithPrismaUpdatedAtSetParams) actionModel() {}

func (p actionWithPrismaUpdatedAtSetParams) updatedAtField() {}

type actionWithPrismaUpdatedAtEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p actionWithPrismaUpdatedAtEqualsParams) field() builder.Field {
	return p.data
}

func (p actionWithPrismaUpdatedAtEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p actionWithPrismaUpdatedAtEqualsParams) actionModel() {}

func (p actionWithPrismaUpdatedAtEqualsParams) updatedAtField() {}

func (actionWithPrismaUpdatedAtSetParams) settable()  {}
func (actionWithPrismaUpdatedAtEqualsParams) equals() {}

type actionWithPrismaUpdatedAtEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p actionWithPrismaUpdatedAtEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p actionWithPrismaUpdatedAtEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p actionWithPrismaUpdatedAtEqualsParamsUnique) actionModel()    {}
func (p actionWithPrismaUpdatedAtEqualsParamsUnique) updatedAtField() {}

func (actionWithPrismaUpdatedAtEqualsParamsUnique) unique() {}
func (actionWithPrismaUpdatedAtEqualsParamsUnique) equals() {}

type iActionWithPrismaPositionEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	actionModel()
	positionField()
}

type actionWithPrismaPositionSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p actionWithPrismaPositionSetParams) field() builder.Field {
	return p.data
}

func (p actionWithPrismaPositionSetParams) getQuery() builder.Query {
	return p.query
}

func (p actionWithPrismaPositionSetParams) actionModel() {}

func (p actionWithPrismaPositionSetParams) positionField() {}

type actionWithPrismaPositionEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p actionWithPrismaPositionEqualsParams) field() builder.Field {
	return p.data
}

func (p actionWithPrismaPositionEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p actionWithPrismaPositionEqualsParams) actionModel() {}

func (p actionWithPrismaPositionEqualsParams) positionField() {}

func (actionWithPrismaPositionSetParams) settable()  {}
func (actionWithPrismaPositionEqualsParams) equals() {}

type actionWithPrismaPositionEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p actionWithPrismaPositionEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p actionWithPrismaPositionEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p actionWithPrismaPositionEqualsParamsUnique) actionModel()   {}
func (p actionWithPrismaPositionEqualsParamsUnique) positionField() {}

func (actionWithPrismaPositionEqualsParamsUnique) unique() {}
func (actionWithPrismaPositionEqualsParamsUnique) equals() {}

type iActionWithPrismaEventEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	actionModel()
	eventField()
}

type actionWithPrismaEventSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p actionWithPrismaEventSetParams) field() builder.Field {
	return p.data
}

func (p actionWithPrismaEventSetParams) getQuery() builder.Query {
	return p.query
}

func (p actionWithPrismaEventSetParams) actionModel() {}

func (p actionWithPrismaEventSetParams) eventField() {}

type actionWithPrismaEventEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p actionWithPrismaEventEqualsParams) field() builder.Field {
	return p.data
}

func (p actionWithPrismaEventEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p actionWithPrismaEventEqualsParams) actionModel() {}

func (p actionWithPrismaEventEqualsParams) eventField() {}

func (actionWithPrismaEventSetParams) settable()  {}
func (actionWithPrismaEventEqualsParams) equals() {}

type actionWithPrismaEventEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p actionWithPrismaEventEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p actionWithPrismaEventEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p actionWithPrismaEventEqualsParamsUnique) actionModel() {}
func (p actionWithPrismaEventEqualsParamsUnique) eventField()  {}

func (actionWithPrismaEventEqualsParamsUnique) unique() {}
func (actionWithPrismaEventEqualsParamsUnique) equals() {}

type iActionWithPrismaEventIDEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	actionModel()
	eventIDField()
}

type actionWithPrismaEventIDSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p actionWithPrismaEventIDSetParams) field() builder.Field {
	return p.data
}

func (p actionWithPrismaEventIDSetParams) getQuery() builder.Query {
	return p.query
}

func (p actionWithPrismaEventIDSetParams) actionModel() {}

func (p actionWithPrismaEventIDSetParams) eventIDField() {}

type actionWithPrismaEventIDEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p actionWithPrismaEventIDEqualsParams) field() builder.Field {
	return p.data
}

func (p actionWithPrismaEventIDEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p actionWithPrismaEventIDEqualsParams) actionModel() {}

func (p actionWithPrismaEventIDEqualsParams) eventIDField() {}

func (actionWithPrismaEventIDSetParams) settable()  {}
func (actionWithPrismaEventIDEqualsParams) equals() {}

type actionWithPrismaEventIDEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p actionWithPrismaEventIDEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p actionWithPrismaEventIDEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p actionWithPrismaEventIDEqualsParamsUnique) actionModel()  {}
func (p actionWithPrismaEventIDEqualsParamsUnique) eventIDField() {}

func (actionWithPrismaEventIDEqualsParamsUnique) unique() {}
func (actionWithPrismaEventIDEqualsParamsUnique) equals() {}

type iActionWithPrismaMessagesOnActionsEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	actionModel()
	messagesOnActionsField()
}

type actionWithPrismaMessagesOnActionsSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p actionWithPrismaMessagesOnActionsSetParams) field() builder.Field {
	return p.data
}

func (p actionWithPrismaMessagesOnActionsSetParams) getQuery() builder.Query {
	return p.query
}

func (p actionWithPrismaMessagesOnActionsSetParams) actionModel() {}

func (p actionWithPrismaMessagesOnActionsSetParams) messagesOnActionsField() {}

type actionWithPrismaMessagesOnActionsEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p actionWithPrismaMessagesOnActionsEqualsParams) field() builder.Field {
	return p.data
}

func (p actionWithPrismaMessagesOnActionsEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p actionWithPrismaMessagesOnActionsEqualsParams) actionModel() {}

func (p actionWithPrismaMessagesOnActionsEqualsParams) messagesOnActionsField() {}

func (actionWithPrismaMessagesOnActionsSetParams) settable()  {}
func (actionWithPrismaMessagesOnActionsEqualsParams) equals() {}

type actionWithPrismaMessagesOnActionsEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p actionWithPrismaMessagesOnActionsEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p actionWithPrismaMessagesOnActionsEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p actionWithPrismaMessagesOnActionsEqualsParamsUnique) actionModel()            {}
func (p actionWithPrismaMessagesOnActionsEqualsParamsUnique) messagesOnActionsField() {}

func (actionWithPrismaMessagesOnActionsEqualsParamsUnique) unique() {}
func (actionWithPrismaMessagesOnActionsEqualsParamsUnique) equals() {}

type messageActions struct {
	// client holds the prisma client
	client *PrismaClient
}

var messageOutput = []builder.Output{
	{Name: "id"},
	{Name: "createdAt"},
	{Name: "deletedAt"},
	{Name: "updatedAt"},
	{Name: "content"},
	{Name: "type"},
}

type iMessageRelationWith interface {
	getQuery() builder.Query
	with()
	messageRelation()
}

type iMessageParams interface {
	field() builder.Field
	getQuery() builder.Query
	messageModel()
}

type messageParams struct {
	data  builder.Field
	query builder.Query
}

func (p messageParams) field() builder.Field {
	return p.data
}

func (p messageParams) getQuery() builder.Query {
	return p.query
}

func (p messageParams) messageModel() {}

type iMessageOrderByParams interface {
	field() builder.Field
	getQuery() builder.Query
	messageModel()
}

type messageOrderByParams struct {
	data  builder.Field
	query builder.Query
}

func (p messageOrderByParams) field() builder.Field {
	return p.data
}

func (p messageOrderByParams) getQuery() builder.Query {
	return p.query
}

func (p messageOrderByParams) messageModel() {}

type iMessageCursorParams interface {
	field() builder.Field
	getQuery() builder.Query
	messageModel()
	isCursor()
}

type messageCursorParams struct {
	data  builder.Field
	query builder.Query
}

func (p messageCursorParams) field() builder.Field {
	return p.data
}

func (p messageCursorParams) isCursor() {}

func (p messageCursorParams) getQuery() builder.Query {
	return p.query
}

func (p messageCursorParams) messageModel() {}

type iMessageParamsUnique interface {
	field() builder.Field
	getQuery() builder.Query
	unique()
	messageModel()
}

type messageParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p messageParamsUnique) messageModel() {}

func (messageParamsUnique) unique() {}

func (p messageParamsUnique) field() builder.Field {
	return p.data
}

func (p messageParamsUnique) getQuery() builder.Query {
	return p.query
}

type iMessageEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	messageModel()
}

type messageEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p messageEqualsParams) messageModel() {}

func (messageEqualsParams) equals() {}

func (p messageEqualsParams) field() builder.Field {
	return p.data
}

func (p messageEqualsParams) getQuery() builder.Query {
	return p.query
}

type iMessageEqualsParamsUnique interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	unique()
	messageModel()
}

type messageEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p messageEqualsParamsUnique) messageModel() {}

func (messageEqualsParamsUnique) unique() {}
func (messageEqualsParamsUnique) equals() {}

func (p messageEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p messageEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

type iMessageSetParams interface {
	field() builder.Field
	settable()
}

type messageSetParams struct {
	data builder.Field
}

func (messageSetParams) settable() {}

func (p messageSetParams) field() builder.Field {
	return p.data
}

type iMessageWithPrismaIDEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	messageModel()
	idField()
}

type messageWithPrismaIDSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p messageWithPrismaIDSetParams) field() builder.Field {
	return p.data
}

func (p messageWithPrismaIDSetParams) getQuery() builder.Query {
	return p.query
}

func (p messageWithPrismaIDSetParams) messageModel() {}

func (p messageWithPrismaIDSetParams) idField() {}

type messageWithPrismaIDEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p messageWithPrismaIDEqualsParams) field() builder.Field {
	return p.data
}

func (p messageWithPrismaIDEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p messageWithPrismaIDEqualsParams) messageModel() {}

func (p messageWithPrismaIDEqualsParams) idField() {}

func (messageWithPrismaIDSetParams) settable()  {}
func (messageWithPrismaIDEqualsParams) equals() {}

type messageWithPrismaIDEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p messageWithPrismaIDEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p messageWithPrismaIDEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p messageWithPrismaIDEqualsParamsUnique) messageModel() {}
func (p messageWithPrismaIDEqualsParamsUnique) idField()      {}

func (messageWithPrismaIDEqualsParamsUnique) unique() {}
func (messageWithPrismaIDEqualsParamsUnique) equals() {}

type iMessageWithPrismaCreatedAtEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	messageModel()
	createdAtField()
}

type messageWithPrismaCreatedAtSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p messageWithPrismaCreatedAtSetParams) field() builder.Field {
	return p.data
}

func (p messageWithPrismaCreatedAtSetParams) getQuery() builder.Query {
	return p.query
}

func (p messageWithPrismaCreatedAtSetParams) messageModel() {}

func (p messageWithPrismaCreatedAtSetParams) createdAtField() {}

type messageWithPrismaCreatedAtEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p messageWithPrismaCreatedAtEqualsParams) field() builder.Field {
	return p.data
}

func (p messageWithPrismaCreatedAtEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p messageWithPrismaCreatedAtEqualsParams) messageModel() {}

func (p messageWithPrismaCreatedAtEqualsParams) createdAtField() {}

func (messageWithPrismaCreatedAtSetParams) settable()  {}
func (messageWithPrismaCreatedAtEqualsParams) equals() {}

type messageWithPrismaCreatedAtEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p messageWithPrismaCreatedAtEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p messageWithPrismaCreatedAtEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p messageWithPrismaCreatedAtEqualsParamsUnique) messageModel()   {}
func (p messageWithPrismaCreatedAtEqualsParamsUnique) createdAtField() {}

func (messageWithPrismaCreatedAtEqualsParamsUnique) unique() {}
func (messageWithPrismaCreatedAtEqualsParamsUnique) equals() {}

type iMessageWithPrismaDeletedAtEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	messageModel()
	deletedAtField()
}

type messageWithPrismaDeletedAtSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p messageWithPrismaDeletedAtSetParams) field() builder.Field {
	return p.data
}

func (p messageWithPrismaDeletedAtSetParams) getQuery() builder.Query {
	return p.query
}

func (p messageWithPrismaDeletedAtSetParams) messageModel() {}

func (p messageWithPrismaDeletedAtSetParams) deletedAtField() {}

type messageWithPrismaDeletedAtEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p messageWithPrismaDeletedAtEqualsParams) field() builder.Field {
	return p.data
}

func (p messageWithPrismaDeletedAtEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p messageWithPrismaDeletedAtEqualsParams) messageModel() {}

func (p messageWithPrismaDeletedAtEqualsParams) deletedAtField() {}

func (messageWithPrismaDeletedAtSetParams) settable()  {}
func (messageWithPrismaDeletedAtEqualsParams) equals() {}

type messageWithPrismaDeletedAtEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p messageWithPrismaDeletedAtEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p messageWithPrismaDeletedAtEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p messageWithPrismaDeletedAtEqualsParamsUnique) messageModel()   {}
func (p messageWithPrismaDeletedAtEqualsParamsUnique) deletedAtField() {}

func (messageWithPrismaDeletedAtEqualsParamsUnique) unique() {}
func (messageWithPrismaDeletedAtEqualsParamsUnique) equals() {}

type iMessageWithPrismaUpdatedAtEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	messageModel()
	updatedAtField()
}

type messageWithPrismaUpdatedAtSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p messageWithPrismaUpdatedAtSetParams) field() builder.Field {
	return p.data
}

func (p messageWithPrismaUpdatedAtSetParams) getQuery() builder.Query {
	return p.query
}

func (p messageWithPrismaUpdatedAtSetParams) messageModel() {}

func (p messageWithPrismaUpdatedAtSetParams) updatedAtField() {}

type messageWithPrismaUpdatedAtEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p messageWithPrismaUpdatedAtEqualsParams) field() builder.Field {
	return p.data
}

func (p messageWithPrismaUpdatedAtEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p messageWithPrismaUpdatedAtEqualsParams) messageModel() {}

func (p messageWithPrismaUpdatedAtEqualsParams) updatedAtField() {}

func (messageWithPrismaUpdatedAtSetParams) settable()  {}
func (messageWithPrismaUpdatedAtEqualsParams) equals() {}

type messageWithPrismaUpdatedAtEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p messageWithPrismaUpdatedAtEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p messageWithPrismaUpdatedAtEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p messageWithPrismaUpdatedAtEqualsParamsUnique) messageModel()   {}
func (p messageWithPrismaUpdatedAtEqualsParamsUnique) updatedAtField() {}

func (messageWithPrismaUpdatedAtEqualsParamsUnique) unique() {}
func (messageWithPrismaUpdatedAtEqualsParamsUnique) equals() {}

type iMessageWithPrismaContentEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	messageModel()
	contentField()
}

type messageWithPrismaContentSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p messageWithPrismaContentSetParams) field() builder.Field {
	return p.data
}

func (p messageWithPrismaContentSetParams) getQuery() builder.Query {
	return p.query
}

func (p messageWithPrismaContentSetParams) messageModel() {}

func (p messageWithPrismaContentSetParams) contentField() {}

type messageWithPrismaContentEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p messageWithPrismaContentEqualsParams) field() builder.Field {
	return p.data
}

func (p messageWithPrismaContentEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p messageWithPrismaContentEqualsParams) messageModel() {}

func (p messageWithPrismaContentEqualsParams) contentField() {}

func (messageWithPrismaContentSetParams) settable()  {}
func (messageWithPrismaContentEqualsParams) equals() {}

type messageWithPrismaContentEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p messageWithPrismaContentEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p messageWithPrismaContentEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p messageWithPrismaContentEqualsParamsUnique) messageModel() {}
func (p messageWithPrismaContentEqualsParamsUnique) contentField() {}

func (messageWithPrismaContentEqualsParamsUnique) unique() {}
func (messageWithPrismaContentEqualsParamsUnique) equals() {}

type iMessageWithPrismaTypeEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	messageModel()
	typeField()
}

type messageWithPrismaTypeSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p messageWithPrismaTypeSetParams) field() builder.Field {
	return p.data
}

func (p messageWithPrismaTypeSetParams) getQuery() builder.Query {
	return p.query
}

func (p messageWithPrismaTypeSetParams) messageModel() {}

func (p messageWithPrismaTypeSetParams) typeField() {}

type messageWithPrismaTypeEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p messageWithPrismaTypeEqualsParams) field() builder.Field {
	return p.data
}

func (p messageWithPrismaTypeEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p messageWithPrismaTypeEqualsParams) messageModel() {}

func (p messageWithPrismaTypeEqualsParams) typeField() {}

func (messageWithPrismaTypeSetParams) settable()  {}
func (messageWithPrismaTypeEqualsParams) equals() {}

type messageWithPrismaTypeEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p messageWithPrismaTypeEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p messageWithPrismaTypeEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p messageWithPrismaTypeEqualsParamsUnique) messageModel() {}
func (p messageWithPrismaTypeEqualsParamsUnique) typeField()    {}

func (messageWithPrismaTypeEqualsParamsUnique) unique() {}
func (messageWithPrismaTypeEqualsParamsUnique) equals() {}

type iMessageWithPrismaMessagesOnActionsEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	messageModel()
	messagesOnActionsField()
}

type messageWithPrismaMessagesOnActionsSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p messageWithPrismaMessagesOnActionsSetParams) field() builder.Field {
	return p.data
}

func (p messageWithPrismaMessagesOnActionsSetParams) getQuery() builder.Query {
	return p.query
}

func (p messageWithPrismaMessagesOnActionsSetParams) messageModel() {}

func (p messageWithPrismaMessagesOnActionsSetParams) messagesOnActionsField() {}

type messageWithPrismaMessagesOnActionsEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p messageWithPrismaMessagesOnActionsEqualsParams) field() builder.Field {
	return p.data
}

func (p messageWithPrismaMessagesOnActionsEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p messageWithPrismaMessagesOnActionsEqualsParams) messageModel() {}

func (p messageWithPrismaMessagesOnActionsEqualsParams) messagesOnActionsField() {}

func (messageWithPrismaMessagesOnActionsSetParams) settable()  {}
func (messageWithPrismaMessagesOnActionsEqualsParams) equals() {}

type messageWithPrismaMessagesOnActionsEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p messageWithPrismaMessagesOnActionsEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p messageWithPrismaMessagesOnActionsEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p messageWithPrismaMessagesOnActionsEqualsParamsUnique) messageModel()           {}
func (p messageWithPrismaMessagesOnActionsEqualsParamsUnique) messagesOnActionsField() {}

func (messageWithPrismaMessagesOnActionsEqualsParamsUnique) unique() {}
func (messageWithPrismaMessagesOnActionsEqualsParamsUnique) equals() {}

type iMessageWithPrismaMessagesOnEventsEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	messageModel()
	messagesOnEventsField()
}

type messageWithPrismaMessagesOnEventsSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p messageWithPrismaMessagesOnEventsSetParams) field() builder.Field {
	return p.data
}

func (p messageWithPrismaMessagesOnEventsSetParams) getQuery() builder.Query {
	return p.query
}

func (p messageWithPrismaMessagesOnEventsSetParams) messageModel() {}

func (p messageWithPrismaMessagesOnEventsSetParams) messagesOnEventsField() {}

type messageWithPrismaMessagesOnEventsEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p messageWithPrismaMessagesOnEventsEqualsParams) field() builder.Field {
	return p.data
}

func (p messageWithPrismaMessagesOnEventsEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p messageWithPrismaMessagesOnEventsEqualsParams) messageModel() {}

func (p messageWithPrismaMessagesOnEventsEqualsParams) messagesOnEventsField() {}

func (messageWithPrismaMessagesOnEventsSetParams) settable()  {}
func (messageWithPrismaMessagesOnEventsEqualsParams) equals() {}

type messageWithPrismaMessagesOnEventsEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p messageWithPrismaMessagesOnEventsEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p messageWithPrismaMessagesOnEventsEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p messageWithPrismaMessagesOnEventsEqualsParamsUnique) messageModel()          {}
func (p messageWithPrismaMessagesOnEventsEqualsParamsUnique) messagesOnEventsField() {}

func (messageWithPrismaMessagesOnEventsEqualsParamsUnique) unique() {}
func (messageWithPrismaMessagesOnEventsEqualsParamsUnique) equals() {}

type messagesOnActionsActions struct {
	// client holds the prisma client
	client *PrismaClient
}

var messagesOnActionsOutput = []builder.Output{
	{Name: "createdAt"},
	{Name: "deletedAt"},
	{Name: "updatedAt"},
	{Name: "messageId"},
	{Name: "actionId"},
}

type iMessagesOnActionsRelationWith interface {
	getQuery() builder.Query
	with()
	messagesOnActionsRelation()
}

type iMessagesOnActionsParams interface {
	field() builder.Field
	getQuery() builder.Query
	messagesOnActionsModel()
}

type messagesOnActionsParams struct {
	data  builder.Field
	query builder.Query
}

func (p messagesOnActionsParams) field() builder.Field {
	return p.data
}

func (p messagesOnActionsParams) getQuery() builder.Query {
	return p.query
}

func (p messagesOnActionsParams) messagesOnActionsModel() {}

type iMessagesOnActionsOrderByParams interface {
	field() builder.Field
	getQuery() builder.Query
	messagesOnActionsModel()
}

type messagesOnActionsOrderByParams struct {
	data  builder.Field
	query builder.Query
}

func (p messagesOnActionsOrderByParams) field() builder.Field {
	return p.data
}

func (p messagesOnActionsOrderByParams) getQuery() builder.Query {
	return p.query
}

func (p messagesOnActionsOrderByParams) messagesOnActionsModel() {}

type iMessagesOnActionsCursorParams interface {
	field() builder.Field
	getQuery() builder.Query
	messagesOnActionsModel()
	isCursor()
}

type messagesOnActionsCursorParams struct {
	data  builder.Field
	query builder.Query
}

func (p messagesOnActionsCursorParams) field() builder.Field {
	return p.data
}

func (p messagesOnActionsCursorParams) isCursor() {}

func (p messagesOnActionsCursorParams) getQuery() builder.Query {
	return p.query
}

func (p messagesOnActionsCursorParams) messagesOnActionsModel() {}

type iMessagesOnActionsParamsUnique interface {
	field() builder.Field
	getQuery() builder.Query
	unique()
	messagesOnActionsModel()
}

type messagesOnActionsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p messagesOnActionsParamsUnique) messagesOnActionsModel() {}

func (messagesOnActionsParamsUnique) unique() {}

func (p messagesOnActionsParamsUnique) field() builder.Field {
	return p.data
}

func (p messagesOnActionsParamsUnique) getQuery() builder.Query {
	return p.query
}

type iMessagesOnActionsEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	messagesOnActionsModel()
}

type messagesOnActionsEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p messagesOnActionsEqualsParams) messagesOnActionsModel() {}

func (messagesOnActionsEqualsParams) equals() {}

func (p messagesOnActionsEqualsParams) field() builder.Field {
	return p.data
}

func (p messagesOnActionsEqualsParams) getQuery() builder.Query {
	return p.query
}

type iMessagesOnActionsEqualsParamsUnique interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	unique()
	messagesOnActionsModel()
}

type messagesOnActionsEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p messagesOnActionsEqualsParamsUnique) messagesOnActionsModel() {}

func (messagesOnActionsEqualsParamsUnique) unique() {}
func (messagesOnActionsEqualsParamsUnique) equals() {}

func (p messagesOnActionsEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p messagesOnActionsEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

type iMessagesOnActionsSetParams interface {
	field() builder.Field
	settable()
}

type messagesOnActionsSetParams struct {
	data builder.Field
}

func (messagesOnActionsSetParams) settable() {}

func (p messagesOnActionsSetParams) field() builder.Field {
	return p.data
}

type iMessagesOnActionsWithPrismaCreatedAtEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	messagesOnActionsModel()
	createdAtField()
}

type messagesOnActionsWithPrismaCreatedAtSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p messagesOnActionsWithPrismaCreatedAtSetParams) field() builder.Field {
	return p.data
}

func (p messagesOnActionsWithPrismaCreatedAtSetParams) getQuery() builder.Query {
	return p.query
}

func (p messagesOnActionsWithPrismaCreatedAtSetParams) messagesOnActionsModel() {}

func (p messagesOnActionsWithPrismaCreatedAtSetParams) createdAtField() {}

type messagesOnActionsWithPrismaCreatedAtEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p messagesOnActionsWithPrismaCreatedAtEqualsParams) field() builder.Field {
	return p.data
}

func (p messagesOnActionsWithPrismaCreatedAtEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p messagesOnActionsWithPrismaCreatedAtEqualsParams) messagesOnActionsModel() {}

func (p messagesOnActionsWithPrismaCreatedAtEqualsParams) createdAtField() {}

func (messagesOnActionsWithPrismaCreatedAtSetParams) settable()  {}
func (messagesOnActionsWithPrismaCreatedAtEqualsParams) equals() {}

type messagesOnActionsWithPrismaCreatedAtEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p messagesOnActionsWithPrismaCreatedAtEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p messagesOnActionsWithPrismaCreatedAtEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p messagesOnActionsWithPrismaCreatedAtEqualsParamsUnique) messagesOnActionsModel() {}
func (p messagesOnActionsWithPrismaCreatedAtEqualsParamsUnique) createdAtField()         {}

func (messagesOnActionsWithPrismaCreatedAtEqualsParamsUnique) unique() {}
func (messagesOnActionsWithPrismaCreatedAtEqualsParamsUnique) equals() {}

type iMessagesOnActionsWithPrismaDeletedAtEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	messagesOnActionsModel()
	deletedAtField()
}

type messagesOnActionsWithPrismaDeletedAtSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p messagesOnActionsWithPrismaDeletedAtSetParams) field() builder.Field {
	return p.data
}

func (p messagesOnActionsWithPrismaDeletedAtSetParams) getQuery() builder.Query {
	return p.query
}

func (p messagesOnActionsWithPrismaDeletedAtSetParams) messagesOnActionsModel() {}

func (p messagesOnActionsWithPrismaDeletedAtSetParams) deletedAtField() {}

type messagesOnActionsWithPrismaDeletedAtEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p messagesOnActionsWithPrismaDeletedAtEqualsParams) field() builder.Field {
	return p.data
}

func (p messagesOnActionsWithPrismaDeletedAtEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p messagesOnActionsWithPrismaDeletedAtEqualsParams) messagesOnActionsModel() {}

func (p messagesOnActionsWithPrismaDeletedAtEqualsParams) deletedAtField() {}

func (messagesOnActionsWithPrismaDeletedAtSetParams) settable()  {}
func (messagesOnActionsWithPrismaDeletedAtEqualsParams) equals() {}

type messagesOnActionsWithPrismaDeletedAtEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p messagesOnActionsWithPrismaDeletedAtEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p messagesOnActionsWithPrismaDeletedAtEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p messagesOnActionsWithPrismaDeletedAtEqualsParamsUnique) messagesOnActionsModel() {}
func (p messagesOnActionsWithPrismaDeletedAtEqualsParamsUnique) deletedAtField()         {}

func (messagesOnActionsWithPrismaDeletedAtEqualsParamsUnique) unique() {}
func (messagesOnActionsWithPrismaDeletedAtEqualsParamsUnique) equals() {}

type iMessagesOnActionsWithPrismaUpdatedAtEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	messagesOnActionsModel()
	updatedAtField()
}

type messagesOnActionsWithPrismaUpdatedAtSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p messagesOnActionsWithPrismaUpdatedAtSetParams) field() builder.Field {
	return p.data
}

func (p messagesOnActionsWithPrismaUpdatedAtSetParams) getQuery() builder.Query {
	return p.query
}

func (p messagesOnActionsWithPrismaUpdatedAtSetParams) messagesOnActionsModel() {}

func (p messagesOnActionsWithPrismaUpdatedAtSetParams) updatedAtField() {}

type messagesOnActionsWithPrismaUpdatedAtEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p messagesOnActionsWithPrismaUpdatedAtEqualsParams) field() builder.Field {
	return p.data
}

func (p messagesOnActionsWithPrismaUpdatedAtEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p messagesOnActionsWithPrismaUpdatedAtEqualsParams) messagesOnActionsModel() {}

func (p messagesOnActionsWithPrismaUpdatedAtEqualsParams) updatedAtField() {}

func (messagesOnActionsWithPrismaUpdatedAtSetParams) settable()  {}
func (messagesOnActionsWithPrismaUpdatedAtEqualsParams) equals() {}

type messagesOnActionsWithPrismaUpdatedAtEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p messagesOnActionsWithPrismaUpdatedAtEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p messagesOnActionsWithPrismaUpdatedAtEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p messagesOnActionsWithPrismaUpdatedAtEqualsParamsUnique) messagesOnActionsModel() {}
func (p messagesOnActionsWithPrismaUpdatedAtEqualsParamsUnique) updatedAtField()         {}

func (messagesOnActionsWithPrismaUpdatedAtEqualsParamsUnique) unique() {}
func (messagesOnActionsWithPrismaUpdatedAtEqualsParamsUnique) equals() {}

type iMessagesOnActionsWithPrismaMessageEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	messagesOnActionsModel()
	messageField()
}

type messagesOnActionsWithPrismaMessageSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p messagesOnActionsWithPrismaMessageSetParams) field() builder.Field {
	return p.data
}

func (p messagesOnActionsWithPrismaMessageSetParams) getQuery() builder.Query {
	return p.query
}

func (p messagesOnActionsWithPrismaMessageSetParams) messagesOnActionsModel() {}

func (p messagesOnActionsWithPrismaMessageSetParams) messageField() {}

type messagesOnActionsWithPrismaMessageEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p messagesOnActionsWithPrismaMessageEqualsParams) field() builder.Field {
	return p.data
}

func (p messagesOnActionsWithPrismaMessageEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p messagesOnActionsWithPrismaMessageEqualsParams) messagesOnActionsModel() {}

func (p messagesOnActionsWithPrismaMessageEqualsParams) messageField() {}

func (messagesOnActionsWithPrismaMessageSetParams) settable()  {}
func (messagesOnActionsWithPrismaMessageEqualsParams) equals() {}

type messagesOnActionsWithPrismaMessageEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p messagesOnActionsWithPrismaMessageEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p messagesOnActionsWithPrismaMessageEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p messagesOnActionsWithPrismaMessageEqualsParamsUnique) messagesOnActionsModel() {}
func (p messagesOnActionsWithPrismaMessageEqualsParamsUnique) messageField()           {}

func (messagesOnActionsWithPrismaMessageEqualsParamsUnique) unique() {}
func (messagesOnActionsWithPrismaMessageEqualsParamsUnique) equals() {}

type iMessagesOnActionsWithPrismaMessageIDEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	messagesOnActionsModel()
	messageIDField()
}

type messagesOnActionsWithPrismaMessageIDSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p messagesOnActionsWithPrismaMessageIDSetParams) field() builder.Field {
	return p.data
}

func (p messagesOnActionsWithPrismaMessageIDSetParams) getQuery() builder.Query {
	return p.query
}

func (p messagesOnActionsWithPrismaMessageIDSetParams) messagesOnActionsModel() {}

func (p messagesOnActionsWithPrismaMessageIDSetParams) messageIDField() {}

type messagesOnActionsWithPrismaMessageIDEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p messagesOnActionsWithPrismaMessageIDEqualsParams) field() builder.Field {
	return p.data
}

func (p messagesOnActionsWithPrismaMessageIDEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p messagesOnActionsWithPrismaMessageIDEqualsParams) messagesOnActionsModel() {}

func (p messagesOnActionsWithPrismaMessageIDEqualsParams) messageIDField() {}

func (messagesOnActionsWithPrismaMessageIDSetParams) settable()  {}
func (messagesOnActionsWithPrismaMessageIDEqualsParams) equals() {}

type messagesOnActionsWithPrismaMessageIDEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p messagesOnActionsWithPrismaMessageIDEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p messagesOnActionsWithPrismaMessageIDEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p messagesOnActionsWithPrismaMessageIDEqualsParamsUnique) messagesOnActionsModel() {}
func (p messagesOnActionsWithPrismaMessageIDEqualsParamsUnique) messageIDField()         {}

func (messagesOnActionsWithPrismaMessageIDEqualsParamsUnique) unique() {}
func (messagesOnActionsWithPrismaMessageIDEqualsParamsUnique) equals() {}

type iMessagesOnActionsWithPrismaActionEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	messagesOnActionsModel()
	actionField()
}

type messagesOnActionsWithPrismaActionSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p messagesOnActionsWithPrismaActionSetParams) field() builder.Field {
	return p.data
}

func (p messagesOnActionsWithPrismaActionSetParams) getQuery() builder.Query {
	return p.query
}

func (p messagesOnActionsWithPrismaActionSetParams) messagesOnActionsModel() {}

func (p messagesOnActionsWithPrismaActionSetParams) actionField() {}

type messagesOnActionsWithPrismaActionEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p messagesOnActionsWithPrismaActionEqualsParams) field() builder.Field {
	return p.data
}

func (p messagesOnActionsWithPrismaActionEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p messagesOnActionsWithPrismaActionEqualsParams) messagesOnActionsModel() {}

func (p messagesOnActionsWithPrismaActionEqualsParams) actionField() {}

func (messagesOnActionsWithPrismaActionSetParams) settable()  {}
func (messagesOnActionsWithPrismaActionEqualsParams) equals() {}

type messagesOnActionsWithPrismaActionEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p messagesOnActionsWithPrismaActionEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p messagesOnActionsWithPrismaActionEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p messagesOnActionsWithPrismaActionEqualsParamsUnique) messagesOnActionsModel() {}
func (p messagesOnActionsWithPrismaActionEqualsParamsUnique) actionField()            {}

func (messagesOnActionsWithPrismaActionEqualsParamsUnique) unique() {}
func (messagesOnActionsWithPrismaActionEqualsParamsUnique) equals() {}

type iMessagesOnActionsWithPrismaActionIDEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	messagesOnActionsModel()
	actionIDField()
}

type messagesOnActionsWithPrismaActionIDSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p messagesOnActionsWithPrismaActionIDSetParams) field() builder.Field {
	return p.data
}

func (p messagesOnActionsWithPrismaActionIDSetParams) getQuery() builder.Query {
	return p.query
}

func (p messagesOnActionsWithPrismaActionIDSetParams) messagesOnActionsModel() {}

func (p messagesOnActionsWithPrismaActionIDSetParams) actionIDField() {}

type messagesOnActionsWithPrismaActionIDEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p messagesOnActionsWithPrismaActionIDEqualsParams) field() builder.Field {
	return p.data
}

func (p messagesOnActionsWithPrismaActionIDEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p messagesOnActionsWithPrismaActionIDEqualsParams) messagesOnActionsModel() {}

func (p messagesOnActionsWithPrismaActionIDEqualsParams) actionIDField() {}

func (messagesOnActionsWithPrismaActionIDSetParams) settable()  {}
func (messagesOnActionsWithPrismaActionIDEqualsParams) equals() {}

type messagesOnActionsWithPrismaActionIDEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p messagesOnActionsWithPrismaActionIDEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p messagesOnActionsWithPrismaActionIDEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p messagesOnActionsWithPrismaActionIDEqualsParamsUnique) messagesOnActionsModel() {}
func (p messagesOnActionsWithPrismaActionIDEqualsParamsUnique) actionIDField()          {}

func (messagesOnActionsWithPrismaActionIDEqualsParamsUnique) unique() {}
func (messagesOnActionsWithPrismaActionIDEqualsParamsUnique) equals() {}

type messagesOnEventsActions struct {
	// client holds the prisma client
	client *PrismaClient
}

var messagesOnEventsOutput = []builder.Output{
	{Name: "createdAt"},
	{Name: "deletedAt"},
	{Name: "updatedAt"},
	{Name: "messageId"},
	{Name: "eventId"},
}

type iMessagesOnEventsRelationWith interface {
	getQuery() builder.Query
	with()
	messagesOnEventsRelation()
}

type iMessagesOnEventsParams interface {
	field() builder.Field
	getQuery() builder.Query
	messagesOnEventsModel()
}

type messagesOnEventsParams struct {
	data  builder.Field
	query builder.Query
}

func (p messagesOnEventsParams) field() builder.Field {
	return p.data
}

func (p messagesOnEventsParams) getQuery() builder.Query {
	return p.query
}

func (p messagesOnEventsParams) messagesOnEventsModel() {}

type iMessagesOnEventsOrderByParams interface {
	field() builder.Field
	getQuery() builder.Query
	messagesOnEventsModel()
}

type messagesOnEventsOrderByParams struct {
	data  builder.Field
	query builder.Query
}

func (p messagesOnEventsOrderByParams) field() builder.Field {
	return p.data
}

func (p messagesOnEventsOrderByParams) getQuery() builder.Query {
	return p.query
}

func (p messagesOnEventsOrderByParams) messagesOnEventsModel() {}

type iMessagesOnEventsCursorParams interface {
	field() builder.Field
	getQuery() builder.Query
	messagesOnEventsModel()
	isCursor()
}

type messagesOnEventsCursorParams struct {
	data  builder.Field
	query builder.Query
}

func (p messagesOnEventsCursorParams) field() builder.Field {
	return p.data
}

func (p messagesOnEventsCursorParams) isCursor() {}

func (p messagesOnEventsCursorParams) getQuery() builder.Query {
	return p.query
}

func (p messagesOnEventsCursorParams) messagesOnEventsModel() {}

type iMessagesOnEventsParamsUnique interface {
	field() builder.Field
	getQuery() builder.Query
	unique()
	messagesOnEventsModel()
}

type messagesOnEventsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p messagesOnEventsParamsUnique) messagesOnEventsModel() {}

func (messagesOnEventsParamsUnique) unique() {}

func (p messagesOnEventsParamsUnique) field() builder.Field {
	return p.data
}

func (p messagesOnEventsParamsUnique) getQuery() builder.Query {
	return p.query
}

type iMessagesOnEventsEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	messagesOnEventsModel()
}

type messagesOnEventsEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p messagesOnEventsEqualsParams) messagesOnEventsModel() {}

func (messagesOnEventsEqualsParams) equals() {}

func (p messagesOnEventsEqualsParams) field() builder.Field {
	return p.data
}

func (p messagesOnEventsEqualsParams) getQuery() builder.Query {
	return p.query
}

type iMessagesOnEventsEqualsParamsUnique interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	unique()
	messagesOnEventsModel()
}

type messagesOnEventsEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p messagesOnEventsEqualsParamsUnique) messagesOnEventsModel() {}

func (messagesOnEventsEqualsParamsUnique) unique() {}
func (messagesOnEventsEqualsParamsUnique) equals() {}

func (p messagesOnEventsEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p messagesOnEventsEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

type iMessagesOnEventsSetParams interface {
	field() builder.Field
	settable()
}

type messagesOnEventsSetParams struct {
	data builder.Field
}

func (messagesOnEventsSetParams) settable() {}

func (p messagesOnEventsSetParams) field() builder.Field {
	return p.data
}

type iMessagesOnEventsWithPrismaCreatedAtEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	messagesOnEventsModel()
	createdAtField()
}

type messagesOnEventsWithPrismaCreatedAtSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p messagesOnEventsWithPrismaCreatedAtSetParams) field() builder.Field {
	return p.data
}

func (p messagesOnEventsWithPrismaCreatedAtSetParams) getQuery() builder.Query {
	return p.query
}

func (p messagesOnEventsWithPrismaCreatedAtSetParams) messagesOnEventsModel() {}

func (p messagesOnEventsWithPrismaCreatedAtSetParams) createdAtField() {}

type messagesOnEventsWithPrismaCreatedAtEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p messagesOnEventsWithPrismaCreatedAtEqualsParams) field() builder.Field {
	return p.data
}

func (p messagesOnEventsWithPrismaCreatedAtEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p messagesOnEventsWithPrismaCreatedAtEqualsParams) messagesOnEventsModel() {}

func (p messagesOnEventsWithPrismaCreatedAtEqualsParams) createdAtField() {}

func (messagesOnEventsWithPrismaCreatedAtSetParams) settable()  {}
func (messagesOnEventsWithPrismaCreatedAtEqualsParams) equals() {}

type messagesOnEventsWithPrismaCreatedAtEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p messagesOnEventsWithPrismaCreatedAtEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p messagesOnEventsWithPrismaCreatedAtEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p messagesOnEventsWithPrismaCreatedAtEqualsParamsUnique) messagesOnEventsModel() {}
func (p messagesOnEventsWithPrismaCreatedAtEqualsParamsUnique) createdAtField()        {}

func (messagesOnEventsWithPrismaCreatedAtEqualsParamsUnique) unique() {}
func (messagesOnEventsWithPrismaCreatedAtEqualsParamsUnique) equals() {}

type iMessagesOnEventsWithPrismaDeletedAtEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	messagesOnEventsModel()
	deletedAtField()
}

type messagesOnEventsWithPrismaDeletedAtSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p messagesOnEventsWithPrismaDeletedAtSetParams) field() builder.Field {
	return p.data
}

func (p messagesOnEventsWithPrismaDeletedAtSetParams) getQuery() builder.Query {
	return p.query
}

func (p messagesOnEventsWithPrismaDeletedAtSetParams) messagesOnEventsModel() {}

func (p messagesOnEventsWithPrismaDeletedAtSetParams) deletedAtField() {}

type messagesOnEventsWithPrismaDeletedAtEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p messagesOnEventsWithPrismaDeletedAtEqualsParams) field() builder.Field {
	return p.data
}

func (p messagesOnEventsWithPrismaDeletedAtEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p messagesOnEventsWithPrismaDeletedAtEqualsParams) messagesOnEventsModel() {}

func (p messagesOnEventsWithPrismaDeletedAtEqualsParams) deletedAtField() {}

func (messagesOnEventsWithPrismaDeletedAtSetParams) settable()  {}
func (messagesOnEventsWithPrismaDeletedAtEqualsParams) equals() {}

type messagesOnEventsWithPrismaDeletedAtEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p messagesOnEventsWithPrismaDeletedAtEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p messagesOnEventsWithPrismaDeletedAtEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p messagesOnEventsWithPrismaDeletedAtEqualsParamsUnique) messagesOnEventsModel() {}
func (p messagesOnEventsWithPrismaDeletedAtEqualsParamsUnique) deletedAtField()        {}

func (messagesOnEventsWithPrismaDeletedAtEqualsParamsUnique) unique() {}
func (messagesOnEventsWithPrismaDeletedAtEqualsParamsUnique) equals() {}

type iMessagesOnEventsWithPrismaUpdatedAtEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	messagesOnEventsModel()
	updatedAtField()
}

type messagesOnEventsWithPrismaUpdatedAtSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p messagesOnEventsWithPrismaUpdatedAtSetParams) field() builder.Field {
	return p.data
}

func (p messagesOnEventsWithPrismaUpdatedAtSetParams) getQuery() builder.Query {
	return p.query
}

func (p messagesOnEventsWithPrismaUpdatedAtSetParams) messagesOnEventsModel() {}

func (p messagesOnEventsWithPrismaUpdatedAtSetParams) updatedAtField() {}

type messagesOnEventsWithPrismaUpdatedAtEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p messagesOnEventsWithPrismaUpdatedAtEqualsParams) field() builder.Field {
	return p.data
}

func (p messagesOnEventsWithPrismaUpdatedAtEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p messagesOnEventsWithPrismaUpdatedAtEqualsParams) messagesOnEventsModel() {}

func (p messagesOnEventsWithPrismaUpdatedAtEqualsParams) updatedAtField() {}

func (messagesOnEventsWithPrismaUpdatedAtSetParams) settable()  {}
func (messagesOnEventsWithPrismaUpdatedAtEqualsParams) equals() {}

type messagesOnEventsWithPrismaUpdatedAtEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p messagesOnEventsWithPrismaUpdatedAtEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p messagesOnEventsWithPrismaUpdatedAtEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p messagesOnEventsWithPrismaUpdatedAtEqualsParamsUnique) messagesOnEventsModel() {}
func (p messagesOnEventsWithPrismaUpdatedAtEqualsParamsUnique) updatedAtField()        {}

func (messagesOnEventsWithPrismaUpdatedAtEqualsParamsUnique) unique() {}
func (messagesOnEventsWithPrismaUpdatedAtEqualsParamsUnique) equals() {}

type iMessagesOnEventsWithPrismaMessageEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	messagesOnEventsModel()
	messageField()
}

type messagesOnEventsWithPrismaMessageSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p messagesOnEventsWithPrismaMessageSetParams) field() builder.Field {
	return p.data
}

func (p messagesOnEventsWithPrismaMessageSetParams) getQuery() builder.Query {
	return p.query
}

func (p messagesOnEventsWithPrismaMessageSetParams) messagesOnEventsModel() {}

func (p messagesOnEventsWithPrismaMessageSetParams) messageField() {}

type messagesOnEventsWithPrismaMessageEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p messagesOnEventsWithPrismaMessageEqualsParams) field() builder.Field {
	return p.data
}

func (p messagesOnEventsWithPrismaMessageEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p messagesOnEventsWithPrismaMessageEqualsParams) messagesOnEventsModel() {}

func (p messagesOnEventsWithPrismaMessageEqualsParams) messageField() {}

func (messagesOnEventsWithPrismaMessageSetParams) settable()  {}
func (messagesOnEventsWithPrismaMessageEqualsParams) equals() {}

type messagesOnEventsWithPrismaMessageEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p messagesOnEventsWithPrismaMessageEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p messagesOnEventsWithPrismaMessageEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p messagesOnEventsWithPrismaMessageEqualsParamsUnique) messagesOnEventsModel() {}
func (p messagesOnEventsWithPrismaMessageEqualsParamsUnique) messageField()          {}

func (messagesOnEventsWithPrismaMessageEqualsParamsUnique) unique() {}
func (messagesOnEventsWithPrismaMessageEqualsParamsUnique) equals() {}

type iMessagesOnEventsWithPrismaMessageIDEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	messagesOnEventsModel()
	messageIDField()
}

type messagesOnEventsWithPrismaMessageIDSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p messagesOnEventsWithPrismaMessageIDSetParams) field() builder.Field {
	return p.data
}

func (p messagesOnEventsWithPrismaMessageIDSetParams) getQuery() builder.Query {
	return p.query
}

func (p messagesOnEventsWithPrismaMessageIDSetParams) messagesOnEventsModel() {}

func (p messagesOnEventsWithPrismaMessageIDSetParams) messageIDField() {}

type messagesOnEventsWithPrismaMessageIDEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p messagesOnEventsWithPrismaMessageIDEqualsParams) field() builder.Field {
	return p.data
}

func (p messagesOnEventsWithPrismaMessageIDEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p messagesOnEventsWithPrismaMessageIDEqualsParams) messagesOnEventsModel() {}

func (p messagesOnEventsWithPrismaMessageIDEqualsParams) messageIDField() {}

func (messagesOnEventsWithPrismaMessageIDSetParams) settable()  {}
func (messagesOnEventsWithPrismaMessageIDEqualsParams) equals() {}

type messagesOnEventsWithPrismaMessageIDEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p messagesOnEventsWithPrismaMessageIDEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p messagesOnEventsWithPrismaMessageIDEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p messagesOnEventsWithPrismaMessageIDEqualsParamsUnique) messagesOnEventsModel() {}
func (p messagesOnEventsWithPrismaMessageIDEqualsParamsUnique) messageIDField()        {}

func (messagesOnEventsWithPrismaMessageIDEqualsParamsUnique) unique() {}
func (messagesOnEventsWithPrismaMessageIDEqualsParamsUnique) equals() {}

type iMessagesOnEventsWithPrismaEventEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	messagesOnEventsModel()
	eventField()
}

type messagesOnEventsWithPrismaEventSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p messagesOnEventsWithPrismaEventSetParams) field() builder.Field {
	return p.data
}

func (p messagesOnEventsWithPrismaEventSetParams) getQuery() builder.Query {
	return p.query
}

func (p messagesOnEventsWithPrismaEventSetParams) messagesOnEventsModel() {}

func (p messagesOnEventsWithPrismaEventSetParams) eventField() {}

type messagesOnEventsWithPrismaEventEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p messagesOnEventsWithPrismaEventEqualsParams) field() builder.Field {
	return p.data
}

func (p messagesOnEventsWithPrismaEventEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p messagesOnEventsWithPrismaEventEqualsParams) messagesOnEventsModel() {}

func (p messagesOnEventsWithPrismaEventEqualsParams) eventField() {}

func (messagesOnEventsWithPrismaEventSetParams) settable()  {}
func (messagesOnEventsWithPrismaEventEqualsParams) equals() {}

type messagesOnEventsWithPrismaEventEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p messagesOnEventsWithPrismaEventEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p messagesOnEventsWithPrismaEventEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p messagesOnEventsWithPrismaEventEqualsParamsUnique) messagesOnEventsModel() {}
func (p messagesOnEventsWithPrismaEventEqualsParamsUnique) eventField()            {}

func (messagesOnEventsWithPrismaEventEqualsParamsUnique) unique() {}
func (messagesOnEventsWithPrismaEventEqualsParamsUnique) equals() {}

type iMessagesOnEventsWithPrismaEventIDEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	messagesOnEventsModel()
	eventIDField()
}

type messagesOnEventsWithPrismaEventIDSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p messagesOnEventsWithPrismaEventIDSetParams) field() builder.Field {
	return p.data
}

func (p messagesOnEventsWithPrismaEventIDSetParams) getQuery() builder.Query {
	return p.query
}

func (p messagesOnEventsWithPrismaEventIDSetParams) messagesOnEventsModel() {}

func (p messagesOnEventsWithPrismaEventIDSetParams) eventIDField() {}

type messagesOnEventsWithPrismaEventIDEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p messagesOnEventsWithPrismaEventIDEqualsParams) field() builder.Field {
	return p.data
}

func (p messagesOnEventsWithPrismaEventIDEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p messagesOnEventsWithPrismaEventIDEqualsParams) messagesOnEventsModel() {}

func (p messagesOnEventsWithPrismaEventIDEqualsParams) eventIDField() {}

func (messagesOnEventsWithPrismaEventIDSetParams) settable()  {}
func (messagesOnEventsWithPrismaEventIDEqualsParams) equals() {}

type messagesOnEventsWithPrismaEventIDEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p messagesOnEventsWithPrismaEventIDEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p messagesOnEventsWithPrismaEventIDEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p messagesOnEventsWithPrismaEventIDEqualsParamsUnique) messagesOnEventsModel() {}
func (p messagesOnEventsWithPrismaEventIDEqualsParamsUnique) eventIDField()          {}

func (messagesOnEventsWithPrismaEventIDEqualsParamsUnique) unique() {}
func (messagesOnEventsWithPrismaEventIDEqualsParamsUnique) equals() {}

// --- template create.gotpl ---

// Creates a single user.
func (r userActions) CreateOne(
	_discordUserID userWithPrismaDiscordUserIDSetParams,
	optional ...userSetParams,
) userCreateOne {
	var v userCreateOne
	v.query = builder.NewQuery()
	v.query.Client = r.client

	v.query.Operation = "mutation"
	v.query.Method = "createOne"
	v.query.Model = "User"
	v.query.Outputs = userOutput

	var fields []builder.Field

	fields = append(fields, _discordUserID.data)

	for _, q := range optional {
		fields = append(fields, q.data)
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

func (r userCreateOne) With(params ...iUserRelationWith) userCreateOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

type userCreateOne struct {
	query builder.Query
}

func (r userCreateOne) Exec(ctx context.Context) (UserModel, error) {
	var v createOneUserResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return UserModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.CreateOneUser, err
}

// Creates a single user.
func (r avatarActions) CreateOne(
	_user avatarWithPrismaUserSetParams,
	optional ...avatarSetParams,
) avatarCreateOne {
	var v avatarCreateOne
	v.query = builder.NewQuery()
	v.query.Client = r.client

	v.query.Operation = "mutation"
	v.query.Method = "createOne"
	v.query.Model = "Avatar"
	v.query.Outputs = avatarOutput

	var fields []builder.Field

	fields = append(fields, _user.data)

	for _, q := range optional {
		fields = append(fields, q.data)
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

func (r avatarCreateOne) With(params ...iAvatarRelationWith) avatarCreateOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

type avatarCreateOne struct {
	query builder.Query
}

func (r avatarCreateOne) Exec(ctx context.Context) (AvatarModel, error) {
	var v createOneAvatarResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return AvatarModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.CreateOneAvatar, err
}

// Creates a single user.
func (r raidActions) CreateOne(

	optional ...raidSetParams,
) raidCreateOne {
	var v raidCreateOne
	v.query = builder.NewQuery()
	v.query.Client = r.client

	v.query.Operation = "mutation"
	v.query.Method = "createOne"
	v.query.Model = "Raid"
	v.query.Outputs = raidOutput

	var fields []builder.Field

	for _, q := range optional {
		fields = append(fields, q.data)
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

func (r raidCreateOne) With(params ...iRaidRelationWith) raidCreateOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

type raidCreateOne struct {
	query builder.Query
}

func (r raidCreateOne) Exec(ctx context.Context) (RaidModel, error) {
	var v createOneRaidResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return RaidModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.CreateOneRaid, err
}

// Creates a single user.
func (r raidBossActions) CreateOne(
	_name raidBossWithPrismaNameSetParams,
	optional ...raidBossSetParams,
) raidBossCreateOne {
	var v raidBossCreateOne
	v.query = builder.NewQuery()
	v.query.Client = r.client

	v.query.Operation = "mutation"
	v.query.Method = "createOne"
	v.query.Model = "RaidBoss"
	v.query.Outputs = raidBossOutput

	var fields []builder.Field

	fields = append(fields, _name.data)

	for _, q := range optional {
		fields = append(fields, q.data)
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

func (r raidBossCreateOne) With(params ...iRaidBossRelationWith) raidBossCreateOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

type raidBossCreateOne struct {
	query builder.Query
}

func (r raidBossCreateOne) Exec(ctx context.Context) (RaidBossModel, error) {
	var v createOneRaidBossResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return RaidBossModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.CreateOneRaidBoss, err
}

// Creates a single user.
func (r avatarsOnRaidsActions) CreateOne(
	_position avatarsOnRaidsWithPrismaPositionSetParams, _raid avatarsOnRaidsWithPrismaRaidSetParams, _avatar avatarsOnRaidsWithPrismaAvatarSetParams,
	optional ...avatarsOnRaidsSetParams,
) avatarsOnRaidsCreateOne {
	var v avatarsOnRaidsCreateOne
	v.query = builder.NewQuery()
	v.query.Client = r.client

	v.query.Operation = "mutation"
	v.query.Method = "createOne"
	v.query.Model = "AvatarsOnRaids"
	v.query.Outputs = avatarsOnRaidsOutput

	var fields []builder.Field

	fields = append(fields, _position.data)
	fields = append(fields, _raid.data)

	fields = append(fields, _avatar.data)

	for _, q := range optional {
		fields = append(fields, q.data)
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

func (r avatarsOnRaidsCreateOne) With(params ...iAvatarsOnRaidsRelationWith) avatarsOnRaidsCreateOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

type avatarsOnRaidsCreateOne struct {
	query builder.Query
}

func (r avatarsOnRaidsCreateOne) Exec(ctx context.Context) (AvatarsOnRaidsModel, error) {
	var v createOneAvatarsOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return AvatarsOnRaidsModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.CreateOneAvatarsOnRaids, err
}

// Creates a single user.
func (r raidBossesOnRaidsActions) CreateOne(
	_raid raidBossesOnRaidsWithPrismaRaidSetParams, _raidBoss raidBossesOnRaidsWithPrismaRaidBossSetParams,
	optional ...raidBossesOnRaidsSetParams,
) raidBossesOnRaidsCreateOne {
	var v raidBossesOnRaidsCreateOne
	v.query = builder.NewQuery()
	v.query.Client = r.client

	v.query.Operation = "mutation"
	v.query.Method = "createOne"
	v.query.Model = "RaidBossesOnRaids"
	v.query.Outputs = raidBossesOnRaidsOutput

	var fields []builder.Field

	fields = append(fields, _raid.data)

	fields = append(fields, _raidBoss.data)

	for _, q := range optional {
		fields = append(fields, q.data)
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

func (r raidBossesOnRaidsCreateOne) With(params ...iRaidBossesOnRaidsRelationWith) raidBossesOnRaidsCreateOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

type raidBossesOnRaidsCreateOne struct {
	query builder.Query
}

func (r raidBossesOnRaidsCreateOne) Exec(ctx context.Context) (RaidBossesOnRaidsModel, error) {
	var v createOneRaidBossesOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return RaidBossesOnRaidsModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.CreateOneRaidBossesOnRaids, err
}

// Creates a single user.
func (r storyActions) CreateOne(

	optional ...storySetParams,
) storyCreateOne {
	var v storyCreateOne
	v.query = builder.NewQuery()
	v.query.Client = r.client

	v.query.Operation = "mutation"
	v.query.Method = "createOne"
	v.query.Model = "Story"
	v.query.Outputs = storyOutput

	var fields []builder.Field

	for _, q := range optional {
		fields = append(fields, q.data)
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

func (r storyCreateOne) With(params ...iStoryRelationWith) storyCreateOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

type storyCreateOne struct {
	query builder.Query
}

func (r storyCreateOne) Exec(ctx context.Context) (StoryModel, error) {
	var v createOneStoryResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return StoryModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.CreateOneStory, err
}

// Creates a single user.
func (r storiesOnRaidsActions) CreateOne(
	_raid storiesOnRaidsWithPrismaRaidSetParams, _story storiesOnRaidsWithPrismaStorySetParams,
	optional ...storiesOnRaidsSetParams,
) storiesOnRaidsCreateOne {
	var v storiesOnRaidsCreateOne
	v.query = builder.NewQuery()
	v.query.Client = r.client

	v.query.Operation = "mutation"
	v.query.Method = "createOne"
	v.query.Model = "StoriesOnRaids"
	v.query.Outputs = storiesOnRaidsOutput

	var fields []builder.Field

	fields = append(fields, _raid.data)

	fields = append(fields, _story.data)

	for _, q := range optional {
		fields = append(fields, q.data)
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

func (r storiesOnRaidsCreateOne) With(params ...iStoriesOnRaidsRelationWith) storiesOnRaidsCreateOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

type storiesOnRaidsCreateOne struct {
	query builder.Query
}

func (r storiesOnRaidsCreateOne) Exec(ctx context.Context) (StoriesOnRaidsModel, error) {
	var v createOneStoriesOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return StoriesOnRaidsModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.CreateOneStoriesOnRaids, err
}

// Creates a single user.
func (r eventActions) CreateOne(
	_story eventWithPrismaStorySetParams, _sequence eventWithPrismaSequenceSetParams,
	optional ...eventSetParams,
) eventCreateOne {
	var v eventCreateOne
	v.query = builder.NewQuery()
	v.query.Client = r.client

	v.query.Operation = "mutation"
	v.query.Method = "createOne"
	v.query.Model = "Event"
	v.query.Outputs = eventOutput

	var fields []builder.Field

	fields = append(fields, _story.data)

	fields = append(fields, _sequence.data)

	for _, q := range optional {
		fields = append(fields, q.data)
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

func (r eventCreateOne) With(params ...iEventRelationWith) eventCreateOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

type eventCreateOne struct {
	query builder.Query
}

func (r eventCreateOne) Exec(ctx context.Context) (EventModel, error) {
	var v createOneEventResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return EventModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.CreateOneEvent, err
}

// Creates a single user.
func (r actionActions) CreateOne(
	_position actionWithPrismaPositionSetParams, _event actionWithPrismaEventSetParams,
	optional ...actionSetParams,
) actionCreateOne {
	var v actionCreateOne
	v.query = builder.NewQuery()
	v.query.Client = r.client

	v.query.Operation = "mutation"
	v.query.Method = "createOne"
	v.query.Model = "Action"
	v.query.Outputs = actionOutput

	var fields []builder.Field

	fields = append(fields, _position.data)
	fields = append(fields, _event.data)

	for _, q := range optional {
		fields = append(fields, q.data)
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

func (r actionCreateOne) With(params ...iActionRelationWith) actionCreateOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

type actionCreateOne struct {
	query builder.Query
}

func (r actionCreateOne) Exec(ctx context.Context) (ActionModel, error) {
	var v createOneActionResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return ActionModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.CreateOneAction, err
}

// Creates a single user.
func (r messageActions) CreateOne(
	_content messageWithPrismaContentSetParams, _type messageWithPrismaTypeSetParams,
	optional ...messageSetParams,
) messageCreateOne {
	var v messageCreateOne
	v.query = builder.NewQuery()
	v.query.Client = r.client

	v.query.Operation = "mutation"
	v.query.Method = "createOne"
	v.query.Model = "Message"
	v.query.Outputs = messageOutput

	var fields []builder.Field

	fields = append(fields, _content.data)
	fields = append(fields, _type.data)

	for _, q := range optional {
		fields = append(fields, q.data)
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

func (r messageCreateOne) With(params ...iMessageRelationWith) messageCreateOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

type messageCreateOne struct {
	query builder.Query
}

func (r messageCreateOne) Exec(ctx context.Context) (MessageModel, error) {
	var v createOneMessageResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return MessageModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.CreateOneMessage, err
}

// Creates a single user.
func (r messagesOnActionsActions) CreateOne(
	_message messagesOnActionsWithPrismaMessageSetParams, _action messagesOnActionsWithPrismaActionSetParams,
	optional ...messagesOnActionsSetParams,
) messagesOnActionsCreateOne {
	var v messagesOnActionsCreateOne
	v.query = builder.NewQuery()
	v.query.Client = r.client

	v.query.Operation = "mutation"
	v.query.Method = "createOne"
	v.query.Model = "MessagesOnActions"
	v.query.Outputs = messagesOnActionsOutput

	var fields []builder.Field

	fields = append(fields, _message.data)

	fields = append(fields, _action.data)

	for _, q := range optional {
		fields = append(fields, q.data)
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

func (r messagesOnActionsCreateOne) With(params ...iMessagesOnActionsRelationWith) messagesOnActionsCreateOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

type messagesOnActionsCreateOne struct {
	query builder.Query
}

func (r messagesOnActionsCreateOne) Exec(ctx context.Context) (MessagesOnActionsModel, error) {
	var v createOneMessagesOnActionsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return MessagesOnActionsModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.CreateOneMessagesOnActions, err
}

// Creates a single user.
func (r messagesOnEventsActions) CreateOne(
	_message messagesOnEventsWithPrismaMessageSetParams, _event messagesOnEventsWithPrismaEventSetParams,
	optional ...messagesOnEventsSetParams,
) messagesOnEventsCreateOne {
	var v messagesOnEventsCreateOne
	v.query = builder.NewQuery()
	v.query.Client = r.client

	v.query.Operation = "mutation"
	v.query.Method = "createOne"
	v.query.Model = "MessagesOnEvents"
	v.query.Outputs = messagesOnEventsOutput

	var fields []builder.Field

	fields = append(fields, _message.data)

	fields = append(fields, _event.data)

	for _, q := range optional {
		fields = append(fields, q.data)
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

func (r messagesOnEventsCreateOne) With(params ...iMessagesOnEventsRelationWith) messagesOnEventsCreateOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

type messagesOnEventsCreateOne struct {
	query builder.Query
}

func (r messagesOnEventsCreateOne) Exec(ctx context.Context) (MessagesOnEventsModel, error) {
	var v createOneMessagesOnEventsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return MessagesOnEventsModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.CreateOneMessagesOnEvents, err
}

// --- template find.gotpl ---

type userToAvatarFindOne struct {
	query builder.Query
}

func (r userToAvatarFindOne) getQuery() builder.Query {
	return r.query
}

func (r userToAvatarFindOne) with()         {}
func (r userToAvatarFindOne) userModel()    {}
func (r userToAvatarFindOne) userRelation() {}

func (r userToAvatarFindOne) With(params ...iAvatarRelationWith) userToAvatarFindOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userToAvatarFindOne) Exec(ctx context.Context) (
	UserModel,
	error,
) {
	var v findOneUserResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return UserModel{}, fmt.Errorf(first.Message)
	}

	if v.Data.FindOneUser == nil {
		return UserModel{}, ErrNotFound
	}

	return *v.Data.FindOneUser, err
}

func (r userToAvatarFindOne) Update(params ...iUserSetParams) userToAvatarUpdateOne {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "User"
	r.query.Outputs = userOutput

	var v userToAvatarUpdateOne
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type userToAvatarUpdateOne struct {
	query builder.Query
}

func (r userToAvatarUpdateOne) Exec(ctx context.Context) (UserModel, error) {
	var v updateOneUserResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return UserModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateOneUser, err
}

func (r userToAvatarFindOne) Delete() userToAvatarDeleteOne {
	var v userToAvatarDeleteOne
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "User"
	v.query.Outputs = userOutput
	return v
}

type userToAvatarDeleteOne struct {
	query builder.Query
}

func (r userToAvatarDeleteOne) Exec(ctx context.Context) (UserModel, error) {
	var v deleteOneUserResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return UserModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteOneUser, err
}

type userToAvatarFindMany struct {
	query builder.Query
}

func (r userToAvatarFindMany) getQuery() builder.Query {
	return r.query
}

func (r userToAvatarFindMany) with()         {}
func (r userToAvatarFindMany) userModel()    {}
func (r userToAvatarFindMany) userRelation() {}

func (r userToAvatarFindMany) With(params ...iAvatarRelationWith) userToAvatarFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userToAvatarFindMany) OrderBy(param iUserOrderByParams) userToAvatarFindMany {
	direction, _ := param.field().Value.(runtime.Direction)
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "orderBy",
		Value: runtime.Direction(param.field().Name + "_" + string(direction)),
	})
	return r
}

func (r userToAvatarFindMany) Skip(count int) userToAvatarFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r userToAvatarFindMany) Take(count int) userToAvatarFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r userToAvatarFindMany) Cursor(cursor iUserCursorParams) userToAvatarFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r userToAvatarFindMany) Exec(ctx context.Context) (
	[]UserModel,
	error,
) {
	var v findManyUserResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return []UserModel{}, fmt.Errorf(first.Message)
	}

	return v.Data.FindManyUser, err
}

func (r userToAvatarFindMany) Update(params ...iUserSetParams) userToAvatarUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "User"
	r.query.Outputs = countOutput

	var v userToAvatarUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type userToAvatarUpdateMany struct {
	query builder.Query
}

func (r userToAvatarUpdateMany) Exec(ctx context.Context) (int, error) {
	var v updateManyUserResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateManyUser.Count, err
}

func (r userToAvatarFindMany) Delete() userToAvatarDeleteMany {
	var v userToAvatarDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "User"
	v.query.Outputs = countOutput
	return v
}

type userToAvatarDeleteMany struct {
	query builder.Query
}

func (r userToAvatarDeleteMany) Exec(ctx context.Context) (int, error) {
	var v deleteManyUserResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteManyUser.Count, err
}

type userFindOne struct {
	query builder.Query
}

func (r userFindOne) getQuery() builder.Query {
	return r.query
}

func (r userFindOne) with()         {}
func (r userFindOne) userModel()    {}
func (r userFindOne) userRelation() {}

func (r userActions) FindOne(

	params iUserEqualsParamsUnique,
) userFindOne {
	var v userFindOne
	v.query = builder.NewQuery()
	v.query.Client = r.client

	v.query.Operation = "query"
	v.query.Method = "findOne"
	v.query.Model = "User"
	v.query.Outputs = userOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: []builder.Field{params.field()},
	})

	return v
}

func (r userFindOne) With(params ...iUserRelationWith) userFindOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userFindOne) Exec(ctx context.Context) (
	UserModel,
	error,
) {
	var v findOneUserResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return UserModel{}, fmt.Errorf(first.Message)
	}

	if v.Data.FindOneUser == nil {
		return UserModel{}, ErrNotFound
	}

	return *v.Data.FindOneUser, err
}

func (r userFindOne) Update(params ...iUserSetParams) userUpdateOne {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "User"
	r.query.Outputs = userOutput

	var v userUpdateOne
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type userUpdateOne struct {
	query builder.Query
}

func (r userUpdateOne) Exec(ctx context.Context) (UserModel, error) {
	var v updateOneUserResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return UserModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateOneUser, err
}

func (r userFindOne) Delete() userDeleteOne {
	var v userDeleteOne
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "User"
	v.query.Outputs = userOutput
	return v
}

type userDeleteOne struct {
	query builder.Query
}

func (r userDeleteOne) Exec(ctx context.Context) (UserModel, error) {
	var v deleteOneUserResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return UserModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteOneUser, err
}

type userFindMany struct {
	query builder.Query
}

func (r userFindMany) getQuery() builder.Query {
	return r.query
}

func (r userFindMany) with()         {}
func (r userFindMany) userModel()    {}
func (r userFindMany) userRelation() {}

func (r userActions) FindMany(

	params ...iUserParams,
) userFindMany {
	var v userFindMany
	v.query = builder.NewQuery()
	v.query.Client = r.client

	v.query.Operation = "query"
	v.query.Method = "findMany"
	v.query.Model = "User"
	v.query.Outputs = userOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r userFindMany) With(params ...iUserRelationWith) userFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userFindMany) OrderBy(param iUserOrderByParams) userFindMany {
	direction, _ := param.field().Value.(runtime.Direction)
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "orderBy",
		Value: runtime.Direction(param.field().Name + "_" + string(direction)),
	})
	return r
}

func (r userFindMany) Skip(count int) userFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r userFindMany) Take(count int) userFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r userFindMany) Cursor(cursor iUserCursorParams) userFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r userFindMany) Exec(ctx context.Context) (
	[]UserModel,
	error,
) {
	var v findManyUserResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return []UserModel{}, fmt.Errorf(first.Message)
	}

	return v.Data.FindManyUser, err
}

func (r userFindMany) Update(params ...iUserSetParams) userUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "User"
	r.query.Outputs = countOutput

	var v userUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type userUpdateMany struct {
	query builder.Query
}

func (r userUpdateMany) Exec(ctx context.Context) (int, error) {
	var v updateManyUserResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateManyUser.Count, err
}

func (r userFindMany) Delete() userDeleteMany {
	var v userDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "User"
	v.query.Outputs = countOutput
	return v
}

type userDeleteMany struct {
	query builder.Query
}

func (r userDeleteMany) Exec(ctx context.Context) (int, error) {
	var v deleteManyUserResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteManyUser.Count, err
}

type avatarToUserFindOne struct {
	query builder.Query
}

func (r avatarToUserFindOne) getQuery() builder.Query {
	return r.query
}

func (r avatarToUserFindOne) with()           {}
func (r avatarToUserFindOne) avatarModel()    {}
func (r avatarToUserFindOne) avatarRelation() {}

func (r avatarToUserFindOne) With(params ...iUserRelationWith) avatarToUserFindOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r avatarToUserFindOne) Exec(ctx context.Context) (
	AvatarModel,
	error,
) {
	var v findOneAvatarResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return AvatarModel{}, fmt.Errorf(first.Message)
	}

	if v.Data.FindOneAvatar == nil {
		return AvatarModel{}, ErrNotFound
	}

	return *v.Data.FindOneAvatar, err
}

func (r avatarToUserFindOne) Update(params ...iAvatarSetParams) avatarToUserUpdateOne {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Avatar"
	r.query.Outputs = avatarOutput

	var v avatarToUserUpdateOne
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type avatarToUserUpdateOne struct {
	query builder.Query
}

func (r avatarToUserUpdateOne) Exec(ctx context.Context) (AvatarModel, error) {
	var v updateOneAvatarResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return AvatarModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateOneAvatar, err
}

func (r avatarToUserFindOne) Delete() avatarToUserDeleteOne {
	var v avatarToUserDeleteOne
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Avatar"
	v.query.Outputs = avatarOutput
	return v
}

type avatarToUserDeleteOne struct {
	query builder.Query
}

func (r avatarToUserDeleteOne) Exec(ctx context.Context) (AvatarModel, error) {
	var v deleteOneAvatarResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return AvatarModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteOneAvatar, err
}

type avatarToUserFindMany struct {
	query builder.Query
}

func (r avatarToUserFindMany) getQuery() builder.Query {
	return r.query
}

func (r avatarToUserFindMany) with()           {}
func (r avatarToUserFindMany) avatarModel()    {}
func (r avatarToUserFindMany) avatarRelation() {}

func (r avatarToUserFindMany) With(params ...iUserRelationWith) avatarToUserFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r avatarToUserFindMany) OrderBy(param iAvatarOrderByParams) avatarToUserFindMany {
	direction, _ := param.field().Value.(runtime.Direction)
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "orderBy",
		Value: runtime.Direction(param.field().Name + "_" + string(direction)),
	})
	return r
}

func (r avatarToUserFindMany) Skip(count int) avatarToUserFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r avatarToUserFindMany) Take(count int) avatarToUserFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r avatarToUserFindMany) Cursor(cursor iAvatarCursorParams) avatarToUserFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r avatarToUserFindMany) Exec(ctx context.Context) (
	[]AvatarModel,
	error,
) {
	var v findManyAvatarResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return []AvatarModel{}, fmt.Errorf(first.Message)
	}

	return v.Data.FindManyAvatar, err
}

func (r avatarToUserFindMany) Update(params ...iAvatarSetParams) avatarToUserUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Avatar"
	r.query.Outputs = countOutput

	var v avatarToUserUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type avatarToUserUpdateMany struct {
	query builder.Query
}

func (r avatarToUserUpdateMany) Exec(ctx context.Context) (int, error) {
	var v updateManyAvatarResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateManyAvatar.Count, err
}

func (r avatarToUserFindMany) Delete() avatarToUserDeleteMany {
	var v avatarToUserDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Avatar"
	v.query.Outputs = countOutput
	return v
}

type avatarToUserDeleteMany struct {
	query builder.Query
}

func (r avatarToUserDeleteMany) Exec(ctx context.Context) (int, error) {
	var v deleteManyAvatarResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteManyAvatar.Count, err
}

type avatarToAvatarsOnRaidsFindOne struct {
	query builder.Query
}

func (r avatarToAvatarsOnRaidsFindOne) getQuery() builder.Query {
	return r.query
}

func (r avatarToAvatarsOnRaidsFindOne) with()           {}
func (r avatarToAvatarsOnRaidsFindOne) avatarModel()    {}
func (r avatarToAvatarsOnRaidsFindOne) avatarRelation() {}

func (r avatarToAvatarsOnRaidsFindOne) With(params ...iAvatarsOnRaidsRelationWith) avatarToAvatarsOnRaidsFindOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r avatarToAvatarsOnRaidsFindOne) Exec(ctx context.Context) (
	AvatarModel,
	error,
) {
	var v findOneAvatarResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return AvatarModel{}, fmt.Errorf(first.Message)
	}

	if v.Data.FindOneAvatar == nil {
		return AvatarModel{}, ErrNotFound
	}

	return *v.Data.FindOneAvatar, err
}

func (r avatarToAvatarsOnRaidsFindOne) Update(params ...iAvatarSetParams) avatarToAvatarsOnRaidsUpdateOne {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Avatar"
	r.query.Outputs = avatarOutput

	var v avatarToAvatarsOnRaidsUpdateOne
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type avatarToAvatarsOnRaidsUpdateOne struct {
	query builder.Query
}

func (r avatarToAvatarsOnRaidsUpdateOne) Exec(ctx context.Context) (AvatarModel, error) {
	var v updateOneAvatarResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return AvatarModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateOneAvatar, err
}

func (r avatarToAvatarsOnRaidsFindOne) Delete() avatarToAvatarsOnRaidsDeleteOne {
	var v avatarToAvatarsOnRaidsDeleteOne
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Avatar"
	v.query.Outputs = avatarOutput
	return v
}

type avatarToAvatarsOnRaidsDeleteOne struct {
	query builder.Query
}

func (r avatarToAvatarsOnRaidsDeleteOne) Exec(ctx context.Context) (AvatarModel, error) {
	var v deleteOneAvatarResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return AvatarModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteOneAvatar, err
}

type avatarToAvatarsOnRaidsFindMany struct {
	query builder.Query
}

func (r avatarToAvatarsOnRaidsFindMany) getQuery() builder.Query {
	return r.query
}

func (r avatarToAvatarsOnRaidsFindMany) with()           {}
func (r avatarToAvatarsOnRaidsFindMany) avatarModel()    {}
func (r avatarToAvatarsOnRaidsFindMany) avatarRelation() {}

func (r avatarToAvatarsOnRaidsFindMany) With(params ...iAvatarsOnRaidsRelationWith) avatarToAvatarsOnRaidsFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r avatarToAvatarsOnRaidsFindMany) OrderBy(param iAvatarOrderByParams) avatarToAvatarsOnRaidsFindMany {
	direction, _ := param.field().Value.(runtime.Direction)
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "orderBy",
		Value: runtime.Direction(param.field().Name + "_" + string(direction)),
	})
	return r
}

func (r avatarToAvatarsOnRaidsFindMany) Skip(count int) avatarToAvatarsOnRaidsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r avatarToAvatarsOnRaidsFindMany) Take(count int) avatarToAvatarsOnRaidsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r avatarToAvatarsOnRaidsFindMany) Cursor(cursor iAvatarCursorParams) avatarToAvatarsOnRaidsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r avatarToAvatarsOnRaidsFindMany) Exec(ctx context.Context) (
	[]AvatarModel,
	error,
) {
	var v findManyAvatarResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return []AvatarModel{}, fmt.Errorf(first.Message)
	}

	return v.Data.FindManyAvatar, err
}

func (r avatarToAvatarsOnRaidsFindMany) Update(params ...iAvatarSetParams) avatarToAvatarsOnRaidsUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Avatar"
	r.query.Outputs = countOutput

	var v avatarToAvatarsOnRaidsUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type avatarToAvatarsOnRaidsUpdateMany struct {
	query builder.Query
}

func (r avatarToAvatarsOnRaidsUpdateMany) Exec(ctx context.Context) (int, error) {
	var v updateManyAvatarResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateManyAvatar.Count, err
}

func (r avatarToAvatarsOnRaidsFindMany) Delete() avatarToAvatarsOnRaidsDeleteMany {
	var v avatarToAvatarsOnRaidsDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Avatar"
	v.query.Outputs = countOutput
	return v
}

type avatarToAvatarsOnRaidsDeleteMany struct {
	query builder.Query
}

func (r avatarToAvatarsOnRaidsDeleteMany) Exec(ctx context.Context) (int, error) {
	var v deleteManyAvatarResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteManyAvatar.Count, err
}

type avatarFindOne struct {
	query builder.Query
}

func (r avatarFindOne) getQuery() builder.Query {
	return r.query
}

func (r avatarFindOne) with()           {}
func (r avatarFindOne) avatarModel()    {}
func (r avatarFindOne) avatarRelation() {}

func (r avatarActions) FindOne(

	params iAvatarEqualsParamsUnique,
) avatarFindOne {
	var v avatarFindOne
	v.query = builder.NewQuery()
	v.query.Client = r.client

	v.query.Operation = "query"
	v.query.Method = "findOne"
	v.query.Model = "Avatar"
	v.query.Outputs = avatarOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: []builder.Field{params.field()},
	})

	return v
}

func (r avatarFindOne) With(params ...iAvatarRelationWith) avatarFindOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r avatarFindOne) Exec(ctx context.Context) (
	AvatarModel,
	error,
) {
	var v findOneAvatarResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return AvatarModel{}, fmt.Errorf(first.Message)
	}

	if v.Data.FindOneAvatar == nil {
		return AvatarModel{}, ErrNotFound
	}

	return *v.Data.FindOneAvatar, err
}

func (r avatarFindOne) Update(params ...iAvatarSetParams) avatarUpdateOne {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Avatar"
	r.query.Outputs = avatarOutput

	var v avatarUpdateOne
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type avatarUpdateOne struct {
	query builder.Query
}

func (r avatarUpdateOne) Exec(ctx context.Context) (AvatarModel, error) {
	var v updateOneAvatarResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return AvatarModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateOneAvatar, err
}

func (r avatarFindOne) Delete() avatarDeleteOne {
	var v avatarDeleteOne
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Avatar"
	v.query.Outputs = avatarOutput
	return v
}

type avatarDeleteOne struct {
	query builder.Query
}

func (r avatarDeleteOne) Exec(ctx context.Context) (AvatarModel, error) {
	var v deleteOneAvatarResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return AvatarModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteOneAvatar, err
}

type avatarFindMany struct {
	query builder.Query
}

func (r avatarFindMany) getQuery() builder.Query {
	return r.query
}

func (r avatarFindMany) with()           {}
func (r avatarFindMany) avatarModel()    {}
func (r avatarFindMany) avatarRelation() {}

func (r avatarActions) FindMany(

	params ...iAvatarParams,
) avatarFindMany {
	var v avatarFindMany
	v.query = builder.NewQuery()
	v.query.Client = r.client

	v.query.Operation = "query"
	v.query.Method = "findMany"
	v.query.Model = "Avatar"
	v.query.Outputs = avatarOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r avatarFindMany) With(params ...iAvatarRelationWith) avatarFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r avatarFindMany) OrderBy(param iAvatarOrderByParams) avatarFindMany {
	direction, _ := param.field().Value.(runtime.Direction)
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "orderBy",
		Value: runtime.Direction(param.field().Name + "_" + string(direction)),
	})
	return r
}

func (r avatarFindMany) Skip(count int) avatarFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r avatarFindMany) Take(count int) avatarFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r avatarFindMany) Cursor(cursor iAvatarCursorParams) avatarFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r avatarFindMany) Exec(ctx context.Context) (
	[]AvatarModel,
	error,
) {
	var v findManyAvatarResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return []AvatarModel{}, fmt.Errorf(first.Message)
	}

	return v.Data.FindManyAvatar, err
}

func (r avatarFindMany) Update(params ...iAvatarSetParams) avatarUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Avatar"
	r.query.Outputs = countOutput

	var v avatarUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type avatarUpdateMany struct {
	query builder.Query
}

func (r avatarUpdateMany) Exec(ctx context.Context) (int, error) {
	var v updateManyAvatarResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateManyAvatar.Count, err
}

func (r avatarFindMany) Delete() avatarDeleteMany {
	var v avatarDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Avatar"
	v.query.Outputs = countOutput
	return v
}

type avatarDeleteMany struct {
	query builder.Query
}

func (r avatarDeleteMany) Exec(ctx context.Context) (int, error) {
	var v deleteManyAvatarResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteManyAvatar.Count, err
}

type raidToAvatarsOnRaidsFindOne struct {
	query builder.Query
}

func (r raidToAvatarsOnRaidsFindOne) getQuery() builder.Query {
	return r.query
}

func (r raidToAvatarsOnRaidsFindOne) with()         {}
func (r raidToAvatarsOnRaidsFindOne) raidModel()    {}
func (r raidToAvatarsOnRaidsFindOne) raidRelation() {}

func (r raidToAvatarsOnRaidsFindOne) With(params ...iAvatarsOnRaidsRelationWith) raidToAvatarsOnRaidsFindOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r raidToAvatarsOnRaidsFindOne) Exec(ctx context.Context) (
	RaidModel,
	error,
) {
	var v findOneRaidResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return RaidModel{}, fmt.Errorf(first.Message)
	}

	if v.Data.FindOneRaid == nil {
		return RaidModel{}, ErrNotFound
	}

	return *v.Data.FindOneRaid, err
}

func (r raidToAvatarsOnRaidsFindOne) Update(params ...iRaidSetParams) raidToAvatarsOnRaidsUpdateOne {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Raid"
	r.query.Outputs = raidOutput

	var v raidToAvatarsOnRaidsUpdateOne
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type raidToAvatarsOnRaidsUpdateOne struct {
	query builder.Query
}

func (r raidToAvatarsOnRaidsUpdateOne) Exec(ctx context.Context) (RaidModel, error) {
	var v updateOneRaidResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return RaidModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateOneRaid, err
}

func (r raidToAvatarsOnRaidsFindOne) Delete() raidToAvatarsOnRaidsDeleteOne {
	var v raidToAvatarsOnRaidsDeleteOne
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Raid"
	v.query.Outputs = raidOutput
	return v
}

type raidToAvatarsOnRaidsDeleteOne struct {
	query builder.Query
}

func (r raidToAvatarsOnRaidsDeleteOne) Exec(ctx context.Context) (RaidModel, error) {
	var v deleteOneRaidResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return RaidModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteOneRaid, err
}

type raidToAvatarsOnRaidsFindMany struct {
	query builder.Query
}

func (r raidToAvatarsOnRaidsFindMany) getQuery() builder.Query {
	return r.query
}

func (r raidToAvatarsOnRaidsFindMany) with()         {}
func (r raidToAvatarsOnRaidsFindMany) raidModel()    {}
func (r raidToAvatarsOnRaidsFindMany) raidRelation() {}

func (r raidToAvatarsOnRaidsFindMany) With(params ...iAvatarsOnRaidsRelationWith) raidToAvatarsOnRaidsFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r raidToAvatarsOnRaidsFindMany) OrderBy(param iRaidOrderByParams) raidToAvatarsOnRaidsFindMany {
	direction, _ := param.field().Value.(runtime.Direction)
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "orderBy",
		Value: runtime.Direction(param.field().Name + "_" + string(direction)),
	})
	return r
}

func (r raidToAvatarsOnRaidsFindMany) Skip(count int) raidToAvatarsOnRaidsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r raidToAvatarsOnRaidsFindMany) Take(count int) raidToAvatarsOnRaidsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r raidToAvatarsOnRaidsFindMany) Cursor(cursor iRaidCursorParams) raidToAvatarsOnRaidsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r raidToAvatarsOnRaidsFindMany) Exec(ctx context.Context) (
	[]RaidModel,
	error,
) {
	var v findManyRaidResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return []RaidModel{}, fmt.Errorf(first.Message)
	}

	return v.Data.FindManyRaid, err
}

func (r raidToAvatarsOnRaidsFindMany) Update(params ...iRaidSetParams) raidToAvatarsOnRaidsUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Raid"
	r.query.Outputs = countOutput

	var v raidToAvatarsOnRaidsUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type raidToAvatarsOnRaidsUpdateMany struct {
	query builder.Query
}

func (r raidToAvatarsOnRaidsUpdateMany) Exec(ctx context.Context) (int, error) {
	var v updateManyRaidResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateManyRaid.Count, err
}

func (r raidToAvatarsOnRaidsFindMany) Delete() raidToAvatarsOnRaidsDeleteMany {
	var v raidToAvatarsOnRaidsDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Raid"
	v.query.Outputs = countOutput
	return v
}

type raidToAvatarsOnRaidsDeleteMany struct {
	query builder.Query
}

func (r raidToAvatarsOnRaidsDeleteMany) Exec(ctx context.Context) (int, error) {
	var v deleteManyRaidResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteManyRaid.Count, err
}

type raidToRaidBossesOnRaidsFindOne struct {
	query builder.Query
}

func (r raidToRaidBossesOnRaidsFindOne) getQuery() builder.Query {
	return r.query
}

func (r raidToRaidBossesOnRaidsFindOne) with()         {}
func (r raidToRaidBossesOnRaidsFindOne) raidModel()    {}
func (r raidToRaidBossesOnRaidsFindOne) raidRelation() {}

func (r raidToRaidBossesOnRaidsFindOne) With(params ...iRaidBossesOnRaidsRelationWith) raidToRaidBossesOnRaidsFindOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r raidToRaidBossesOnRaidsFindOne) Exec(ctx context.Context) (
	RaidModel,
	error,
) {
	var v findOneRaidResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return RaidModel{}, fmt.Errorf(first.Message)
	}

	if v.Data.FindOneRaid == nil {
		return RaidModel{}, ErrNotFound
	}

	return *v.Data.FindOneRaid, err
}

func (r raidToRaidBossesOnRaidsFindOne) Update(params ...iRaidSetParams) raidToRaidBossesOnRaidsUpdateOne {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Raid"
	r.query.Outputs = raidOutput

	var v raidToRaidBossesOnRaidsUpdateOne
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type raidToRaidBossesOnRaidsUpdateOne struct {
	query builder.Query
}

func (r raidToRaidBossesOnRaidsUpdateOne) Exec(ctx context.Context) (RaidModel, error) {
	var v updateOneRaidResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return RaidModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateOneRaid, err
}

func (r raidToRaidBossesOnRaidsFindOne) Delete() raidToRaidBossesOnRaidsDeleteOne {
	var v raidToRaidBossesOnRaidsDeleteOne
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Raid"
	v.query.Outputs = raidOutput
	return v
}

type raidToRaidBossesOnRaidsDeleteOne struct {
	query builder.Query
}

func (r raidToRaidBossesOnRaidsDeleteOne) Exec(ctx context.Context) (RaidModel, error) {
	var v deleteOneRaidResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return RaidModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteOneRaid, err
}

type raidToRaidBossesOnRaidsFindMany struct {
	query builder.Query
}

func (r raidToRaidBossesOnRaidsFindMany) getQuery() builder.Query {
	return r.query
}

func (r raidToRaidBossesOnRaidsFindMany) with()         {}
func (r raidToRaidBossesOnRaidsFindMany) raidModel()    {}
func (r raidToRaidBossesOnRaidsFindMany) raidRelation() {}

func (r raidToRaidBossesOnRaidsFindMany) With(params ...iRaidBossesOnRaidsRelationWith) raidToRaidBossesOnRaidsFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r raidToRaidBossesOnRaidsFindMany) OrderBy(param iRaidOrderByParams) raidToRaidBossesOnRaidsFindMany {
	direction, _ := param.field().Value.(runtime.Direction)
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "orderBy",
		Value: runtime.Direction(param.field().Name + "_" + string(direction)),
	})
	return r
}

func (r raidToRaidBossesOnRaidsFindMany) Skip(count int) raidToRaidBossesOnRaidsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r raidToRaidBossesOnRaidsFindMany) Take(count int) raidToRaidBossesOnRaidsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r raidToRaidBossesOnRaidsFindMany) Cursor(cursor iRaidCursorParams) raidToRaidBossesOnRaidsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r raidToRaidBossesOnRaidsFindMany) Exec(ctx context.Context) (
	[]RaidModel,
	error,
) {
	var v findManyRaidResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return []RaidModel{}, fmt.Errorf(first.Message)
	}

	return v.Data.FindManyRaid, err
}

func (r raidToRaidBossesOnRaidsFindMany) Update(params ...iRaidSetParams) raidToRaidBossesOnRaidsUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Raid"
	r.query.Outputs = countOutput

	var v raidToRaidBossesOnRaidsUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type raidToRaidBossesOnRaidsUpdateMany struct {
	query builder.Query
}

func (r raidToRaidBossesOnRaidsUpdateMany) Exec(ctx context.Context) (int, error) {
	var v updateManyRaidResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateManyRaid.Count, err
}

func (r raidToRaidBossesOnRaidsFindMany) Delete() raidToRaidBossesOnRaidsDeleteMany {
	var v raidToRaidBossesOnRaidsDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Raid"
	v.query.Outputs = countOutput
	return v
}

type raidToRaidBossesOnRaidsDeleteMany struct {
	query builder.Query
}

func (r raidToRaidBossesOnRaidsDeleteMany) Exec(ctx context.Context) (int, error) {
	var v deleteManyRaidResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteManyRaid.Count, err
}

type raidToStoriesOnRaidsFindOne struct {
	query builder.Query
}

func (r raidToStoriesOnRaidsFindOne) getQuery() builder.Query {
	return r.query
}

func (r raidToStoriesOnRaidsFindOne) with()         {}
func (r raidToStoriesOnRaidsFindOne) raidModel()    {}
func (r raidToStoriesOnRaidsFindOne) raidRelation() {}

func (r raidToStoriesOnRaidsFindOne) With(params ...iStoriesOnRaidsRelationWith) raidToStoriesOnRaidsFindOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r raidToStoriesOnRaidsFindOne) Exec(ctx context.Context) (
	RaidModel,
	error,
) {
	var v findOneRaidResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return RaidModel{}, fmt.Errorf(first.Message)
	}

	if v.Data.FindOneRaid == nil {
		return RaidModel{}, ErrNotFound
	}

	return *v.Data.FindOneRaid, err
}

func (r raidToStoriesOnRaidsFindOne) Update(params ...iRaidSetParams) raidToStoriesOnRaidsUpdateOne {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Raid"
	r.query.Outputs = raidOutput

	var v raidToStoriesOnRaidsUpdateOne
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type raidToStoriesOnRaidsUpdateOne struct {
	query builder.Query
}

func (r raidToStoriesOnRaidsUpdateOne) Exec(ctx context.Context) (RaidModel, error) {
	var v updateOneRaidResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return RaidModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateOneRaid, err
}

func (r raidToStoriesOnRaidsFindOne) Delete() raidToStoriesOnRaidsDeleteOne {
	var v raidToStoriesOnRaidsDeleteOne
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Raid"
	v.query.Outputs = raidOutput
	return v
}

type raidToStoriesOnRaidsDeleteOne struct {
	query builder.Query
}

func (r raidToStoriesOnRaidsDeleteOne) Exec(ctx context.Context) (RaidModel, error) {
	var v deleteOneRaidResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return RaidModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteOneRaid, err
}

type raidToStoriesOnRaidsFindMany struct {
	query builder.Query
}

func (r raidToStoriesOnRaidsFindMany) getQuery() builder.Query {
	return r.query
}

func (r raidToStoriesOnRaidsFindMany) with()         {}
func (r raidToStoriesOnRaidsFindMany) raidModel()    {}
func (r raidToStoriesOnRaidsFindMany) raidRelation() {}

func (r raidToStoriesOnRaidsFindMany) With(params ...iStoriesOnRaidsRelationWith) raidToStoriesOnRaidsFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r raidToStoriesOnRaidsFindMany) OrderBy(param iRaidOrderByParams) raidToStoriesOnRaidsFindMany {
	direction, _ := param.field().Value.(runtime.Direction)
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "orderBy",
		Value: runtime.Direction(param.field().Name + "_" + string(direction)),
	})
	return r
}

func (r raidToStoriesOnRaidsFindMany) Skip(count int) raidToStoriesOnRaidsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r raidToStoriesOnRaidsFindMany) Take(count int) raidToStoriesOnRaidsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r raidToStoriesOnRaidsFindMany) Cursor(cursor iRaidCursorParams) raidToStoriesOnRaidsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r raidToStoriesOnRaidsFindMany) Exec(ctx context.Context) (
	[]RaidModel,
	error,
) {
	var v findManyRaidResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return []RaidModel{}, fmt.Errorf(first.Message)
	}

	return v.Data.FindManyRaid, err
}

func (r raidToStoriesOnRaidsFindMany) Update(params ...iRaidSetParams) raidToStoriesOnRaidsUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Raid"
	r.query.Outputs = countOutput

	var v raidToStoriesOnRaidsUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type raidToStoriesOnRaidsUpdateMany struct {
	query builder.Query
}

func (r raidToStoriesOnRaidsUpdateMany) Exec(ctx context.Context) (int, error) {
	var v updateManyRaidResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateManyRaid.Count, err
}

func (r raidToStoriesOnRaidsFindMany) Delete() raidToStoriesOnRaidsDeleteMany {
	var v raidToStoriesOnRaidsDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Raid"
	v.query.Outputs = countOutput
	return v
}

type raidToStoriesOnRaidsDeleteMany struct {
	query builder.Query
}

func (r raidToStoriesOnRaidsDeleteMany) Exec(ctx context.Context) (int, error) {
	var v deleteManyRaidResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteManyRaid.Count, err
}

type raidFindOne struct {
	query builder.Query
}

func (r raidFindOne) getQuery() builder.Query {
	return r.query
}

func (r raidFindOne) with()         {}
func (r raidFindOne) raidModel()    {}
func (r raidFindOne) raidRelation() {}

func (r raidActions) FindOne(

	params iRaidEqualsParamsUnique,
) raidFindOne {
	var v raidFindOne
	v.query = builder.NewQuery()
	v.query.Client = r.client

	v.query.Operation = "query"
	v.query.Method = "findOne"
	v.query.Model = "Raid"
	v.query.Outputs = raidOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: []builder.Field{params.field()},
	})

	return v
}

func (r raidFindOne) With(params ...iRaidRelationWith) raidFindOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r raidFindOne) Exec(ctx context.Context) (
	RaidModel,
	error,
) {
	var v findOneRaidResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return RaidModel{}, fmt.Errorf(first.Message)
	}

	if v.Data.FindOneRaid == nil {
		return RaidModel{}, ErrNotFound
	}

	return *v.Data.FindOneRaid, err
}

func (r raidFindOne) Update(params ...iRaidSetParams) raidUpdateOne {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Raid"
	r.query.Outputs = raidOutput

	var v raidUpdateOne
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type raidUpdateOne struct {
	query builder.Query
}

func (r raidUpdateOne) Exec(ctx context.Context) (RaidModel, error) {
	var v updateOneRaidResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return RaidModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateOneRaid, err
}

func (r raidFindOne) Delete() raidDeleteOne {
	var v raidDeleteOne
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Raid"
	v.query.Outputs = raidOutput
	return v
}

type raidDeleteOne struct {
	query builder.Query
}

func (r raidDeleteOne) Exec(ctx context.Context) (RaidModel, error) {
	var v deleteOneRaidResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return RaidModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteOneRaid, err
}

type raidFindMany struct {
	query builder.Query
}

func (r raidFindMany) getQuery() builder.Query {
	return r.query
}

func (r raidFindMany) with()         {}
func (r raidFindMany) raidModel()    {}
func (r raidFindMany) raidRelation() {}

func (r raidActions) FindMany(

	params ...iRaidParams,
) raidFindMany {
	var v raidFindMany
	v.query = builder.NewQuery()
	v.query.Client = r.client

	v.query.Operation = "query"
	v.query.Method = "findMany"
	v.query.Model = "Raid"
	v.query.Outputs = raidOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r raidFindMany) With(params ...iRaidRelationWith) raidFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r raidFindMany) OrderBy(param iRaidOrderByParams) raidFindMany {
	direction, _ := param.field().Value.(runtime.Direction)
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "orderBy",
		Value: runtime.Direction(param.field().Name + "_" + string(direction)),
	})
	return r
}

func (r raidFindMany) Skip(count int) raidFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r raidFindMany) Take(count int) raidFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r raidFindMany) Cursor(cursor iRaidCursorParams) raidFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r raidFindMany) Exec(ctx context.Context) (
	[]RaidModel,
	error,
) {
	var v findManyRaidResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return []RaidModel{}, fmt.Errorf(first.Message)
	}

	return v.Data.FindManyRaid, err
}

func (r raidFindMany) Update(params ...iRaidSetParams) raidUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Raid"
	r.query.Outputs = countOutput

	var v raidUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type raidUpdateMany struct {
	query builder.Query
}

func (r raidUpdateMany) Exec(ctx context.Context) (int, error) {
	var v updateManyRaidResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateManyRaid.Count, err
}

func (r raidFindMany) Delete() raidDeleteMany {
	var v raidDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Raid"
	v.query.Outputs = countOutput
	return v
}

type raidDeleteMany struct {
	query builder.Query
}

func (r raidDeleteMany) Exec(ctx context.Context) (int, error) {
	var v deleteManyRaidResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteManyRaid.Count, err
}

type raidBossToRaidBossesOnRaidsFindOne struct {
	query builder.Query
}

func (r raidBossToRaidBossesOnRaidsFindOne) getQuery() builder.Query {
	return r.query
}

func (r raidBossToRaidBossesOnRaidsFindOne) with()             {}
func (r raidBossToRaidBossesOnRaidsFindOne) raidBossModel()    {}
func (r raidBossToRaidBossesOnRaidsFindOne) raidBossRelation() {}

func (r raidBossToRaidBossesOnRaidsFindOne) With(params ...iRaidBossesOnRaidsRelationWith) raidBossToRaidBossesOnRaidsFindOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r raidBossToRaidBossesOnRaidsFindOne) Exec(ctx context.Context) (
	RaidBossModel,
	error,
) {
	var v findOneRaidBossResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return RaidBossModel{}, fmt.Errorf(first.Message)
	}

	if v.Data.FindOneRaidBoss == nil {
		return RaidBossModel{}, ErrNotFound
	}

	return *v.Data.FindOneRaidBoss, err
}

func (r raidBossToRaidBossesOnRaidsFindOne) Update(params ...iRaidBossSetParams) raidBossToRaidBossesOnRaidsUpdateOne {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "RaidBoss"
	r.query.Outputs = raidBossOutput

	var v raidBossToRaidBossesOnRaidsUpdateOne
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type raidBossToRaidBossesOnRaidsUpdateOne struct {
	query builder.Query
}

func (r raidBossToRaidBossesOnRaidsUpdateOne) Exec(ctx context.Context) (RaidBossModel, error) {
	var v updateOneRaidBossResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return RaidBossModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateOneRaidBoss, err
}

func (r raidBossToRaidBossesOnRaidsFindOne) Delete() raidBossToRaidBossesOnRaidsDeleteOne {
	var v raidBossToRaidBossesOnRaidsDeleteOne
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "RaidBoss"
	v.query.Outputs = raidBossOutput
	return v
}

type raidBossToRaidBossesOnRaidsDeleteOne struct {
	query builder.Query
}

func (r raidBossToRaidBossesOnRaidsDeleteOne) Exec(ctx context.Context) (RaidBossModel, error) {
	var v deleteOneRaidBossResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return RaidBossModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteOneRaidBoss, err
}

type raidBossToRaidBossesOnRaidsFindMany struct {
	query builder.Query
}

func (r raidBossToRaidBossesOnRaidsFindMany) getQuery() builder.Query {
	return r.query
}

func (r raidBossToRaidBossesOnRaidsFindMany) with()             {}
func (r raidBossToRaidBossesOnRaidsFindMany) raidBossModel()    {}
func (r raidBossToRaidBossesOnRaidsFindMany) raidBossRelation() {}

func (r raidBossToRaidBossesOnRaidsFindMany) With(params ...iRaidBossesOnRaidsRelationWith) raidBossToRaidBossesOnRaidsFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r raidBossToRaidBossesOnRaidsFindMany) OrderBy(param iRaidBossOrderByParams) raidBossToRaidBossesOnRaidsFindMany {
	direction, _ := param.field().Value.(runtime.Direction)
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "orderBy",
		Value: runtime.Direction(param.field().Name + "_" + string(direction)),
	})
	return r
}

func (r raidBossToRaidBossesOnRaidsFindMany) Skip(count int) raidBossToRaidBossesOnRaidsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r raidBossToRaidBossesOnRaidsFindMany) Take(count int) raidBossToRaidBossesOnRaidsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r raidBossToRaidBossesOnRaidsFindMany) Cursor(cursor iRaidBossCursorParams) raidBossToRaidBossesOnRaidsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r raidBossToRaidBossesOnRaidsFindMany) Exec(ctx context.Context) (
	[]RaidBossModel,
	error,
) {
	var v findManyRaidBossResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return []RaidBossModel{}, fmt.Errorf(first.Message)
	}

	return v.Data.FindManyRaidBoss, err
}

func (r raidBossToRaidBossesOnRaidsFindMany) Update(params ...iRaidBossSetParams) raidBossToRaidBossesOnRaidsUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "RaidBoss"
	r.query.Outputs = countOutput

	var v raidBossToRaidBossesOnRaidsUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type raidBossToRaidBossesOnRaidsUpdateMany struct {
	query builder.Query
}

func (r raidBossToRaidBossesOnRaidsUpdateMany) Exec(ctx context.Context) (int, error) {
	var v updateManyRaidBossResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateManyRaidBoss.Count, err
}

func (r raidBossToRaidBossesOnRaidsFindMany) Delete() raidBossToRaidBossesOnRaidsDeleteMany {
	var v raidBossToRaidBossesOnRaidsDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "RaidBoss"
	v.query.Outputs = countOutput
	return v
}

type raidBossToRaidBossesOnRaidsDeleteMany struct {
	query builder.Query
}

func (r raidBossToRaidBossesOnRaidsDeleteMany) Exec(ctx context.Context) (int, error) {
	var v deleteManyRaidBossResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteManyRaidBoss.Count, err
}

type raidBossFindOne struct {
	query builder.Query
}

func (r raidBossFindOne) getQuery() builder.Query {
	return r.query
}

func (r raidBossFindOne) with()             {}
func (r raidBossFindOne) raidBossModel()    {}
func (r raidBossFindOne) raidBossRelation() {}

func (r raidBossActions) FindOne(

	params iRaidBossEqualsParamsUnique,
) raidBossFindOne {
	var v raidBossFindOne
	v.query = builder.NewQuery()
	v.query.Client = r.client

	v.query.Operation = "query"
	v.query.Method = "findOne"
	v.query.Model = "RaidBoss"
	v.query.Outputs = raidBossOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: []builder.Field{params.field()},
	})

	return v
}

func (r raidBossFindOne) With(params ...iRaidBossRelationWith) raidBossFindOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r raidBossFindOne) Exec(ctx context.Context) (
	RaidBossModel,
	error,
) {
	var v findOneRaidBossResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return RaidBossModel{}, fmt.Errorf(first.Message)
	}

	if v.Data.FindOneRaidBoss == nil {
		return RaidBossModel{}, ErrNotFound
	}

	return *v.Data.FindOneRaidBoss, err
}

func (r raidBossFindOne) Update(params ...iRaidBossSetParams) raidBossUpdateOne {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "RaidBoss"
	r.query.Outputs = raidBossOutput

	var v raidBossUpdateOne
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type raidBossUpdateOne struct {
	query builder.Query
}

func (r raidBossUpdateOne) Exec(ctx context.Context) (RaidBossModel, error) {
	var v updateOneRaidBossResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return RaidBossModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateOneRaidBoss, err
}

func (r raidBossFindOne) Delete() raidBossDeleteOne {
	var v raidBossDeleteOne
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "RaidBoss"
	v.query.Outputs = raidBossOutput
	return v
}

type raidBossDeleteOne struct {
	query builder.Query
}

func (r raidBossDeleteOne) Exec(ctx context.Context) (RaidBossModel, error) {
	var v deleteOneRaidBossResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return RaidBossModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteOneRaidBoss, err
}

type raidBossFindMany struct {
	query builder.Query
}

func (r raidBossFindMany) getQuery() builder.Query {
	return r.query
}

func (r raidBossFindMany) with()             {}
func (r raidBossFindMany) raidBossModel()    {}
func (r raidBossFindMany) raidBossRelation() {}

func (r raidBossActions) FindMany(

	params ...iRaidBossParams,
) raidBossFindMany {
	var v raidBossFindMany
	v.query = builder.NewQuery()
	v.query.Client = r.client

	v.query.Operation = "query"
	v.query.Method = "findMany"
	v.query.Model = "RaidBoss"
	v.query.Outputs = raidBossOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r raidBossFindMany) With(params ...iRaidBossRelationWith) raidBossFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r raidBossFindMany) OrderBy(param iRaidBossOrderByParams) raidBossFindMany {
	direction, _ := param.field().Value.(runtime.Direction)
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "orderBy",
		Value: runtime.Direction(param.field().Name + "_" + string(direction)),
	})
	return r
}

func (r raidBossFindMany) Skip(count int) raidBossFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r raidBossFindMany) Take(count int) raidBossFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r raidBossFindMany) Cursor(cursor iRaidBossCursorParams) raidBossFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r raidBossFindMany) Exec(ctx context.Context) (
	[]RaidBossModel,
	error,
) {
	var v findManyRaidBossResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return []RaidBossModel{}, fmt.Errorf(first.Message)
	}

	return v.Data.FindManyRaidBoss, err
}

func (r raidBossFindMany) Update(params ...iRaidBossSetParams) raidBossUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "RaidBoss"
	r.query.Outputs = countOutput

	var v raidBossUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type raidBossUpdateMany struct {
	query builder.Query
}

func (r raidBossUpdateMany) Exec(ctx context.Context) (int, error) {
	var v updateManyRaidBossResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateManyRaidBoss.Count, err
}

func (r raidBossFindMany) Delete() raidBossDeleteMany {
	var v raidBossDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "RaidBoss"
	v.query.Outputs = countOutput
	return v
}

type raidBossDeleteMany struct {
	query builder.Query
}

func (r raidBossDeleteMany) Exec(ctx context.Context) (int, error) {
	var v deleteManyRaidBossResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteManyRaidBoss.Count, err
}

type avatarsOnRaidsToRaidFindOne struct {
	query builder.Query
}

func (r avatarsOnRaidsToRaidFindOne) getQuery() builder.Query {
	return r.query
}

func (r avatarsOnRaidsToRaidFindOne) with()                   {}
func (r avatarsOnRaidsToRaidFindOne) avatarsOnRaidsModel()    {}
func (r avatarsOnRaidsToRaidFindOne) avatarsOnRaidsRelation() {}

func (r avatarsOnRaidsToRaidFindOne) With(params ...iRaidRelationWith) avatarsOnRaidsToRaidFindOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r avatarsOnRaidsToRaidFindOne) Exec(ctx context.Context) (
	AvatarsOnRaidsModel,
	error,
) {
	var v findOneAvatarsOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return AvatarsOnRaidsModel{}, fmt.Errorf(first.Message)
	}

	if v.Data.FindOneAvatarsOnRaids == nil {
		return AvatarsOnRaidsModel{}, ErrNotFound
	}

	return *v.Data.FindOneAvatarsOnRaids, err
}

func (r avatarsOnRaidsToRaidFindOne) Update(params ...iAvatarsOnRaidsSetParams) avatarsOnRaidsToRaidUpdateOne {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "AvatarsOnRaids"
	r.query.Outputs = avatarsOnRaidsOutput

	var v avatarsOnRaidsToRaidUpdateOne
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type avatarsOnRaidsToRaidUpdateOne struct {
	query builder.Query
}

func (r avatarsOnRaidsToRaidUpdateOne) Exec(ctx context.Context) (AvatarsOnRaidsModel, error) {
	var v updateOneAvatarsOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return AvatarsOnRaidsModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateOneAvatarsOnRaids, err
}

func (r avatarsOnRaidsToRaidFindOne) Delete() avatarsOnRaidsToRaidDeleteOne {
	var v avatarsOnRaidsToRaidDeleteOne
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "AvatarsOnRaids"
	v.query.Outputs = avatarsOnRaidsOutput
	return v
}

type avatarsOnRaidsToRaidDeleteOne struct {
	query builder.Query
}

func (r avatarsOnRaidsToRaidDeleteOne) Exec(ctx context.Context) (AvatarsOnRaidsModel, error) {
	var v deleteOneAvatarsOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return AvatarsOnRaidsModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteOneAvatarsOnRaids, err
}

type avatarsOnRaidsToRaidFindMany struct {
	query builder.Query
}

func (r avatarsOnRaidsToRaidFindMany) getQuery() builder.Query {
	return r.query
}

func (r avatarsOnRaidsToRaidFindMany) with()                   {}
func (r avatarsOnRaidsToRaidFindMany) avatarsOnRaidsModel()    {}
func (r avatarsOnRaidsToRaidFindMany) avatarsOnRaidsRelation() {}

func (r avatarsOnRaidsToRaidFindMany) With(params ...iRaidRelationWith) avatarsOnRaidsToRaidFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r avatarsOnRaidsToRaidFindMany) OrderBy(param iAvatarsOnRaidsOrderByParams) avatarsOnRaidsToRaidFindMany {
	direction, _ := param.field().Value.(runtime.Direction)
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "orderBy",
		Value: runtime.Direction(param.field().Name + "_" + string(direction)),
	})
	return r
}

func (r avatarsOnRaidsToRaidFindMany) Skip(count int) avatarsOnRaidsToRaidFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r avatarsOnRaidsToRaidFindMany) Take(count int) avatarsOnRaidsToRaidFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r avatarsOnRaidsToRaidFindMany) Cursor(cursor iAvatarsOnRaidsCursorParams) avatarsOnRaidsToRaidFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r avatarsOnRaidsToRaidFindMany) Exec(ctx context.Context) (
	[]AvatarsOnRaidsModel,
	error,
) {
	var v findManyAvatarsOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return []AvatarsOnRaidsModel{}, fmt.Errorf(first.Message)
	}

	return v.Data.FindManyAvatarsOnRaids, err
}

func (r avatarsOnRaidsToRaidFindMany) Update(params ...iAvatarsOnRaidsSetParams) avatarsOnRaidsToRaidUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "AvatarsOnRaids"
	r.query.Outputs = countOutput

	var v avatarsOnRaidsToRaidUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type avatarsOnRaidsToRaidUpdateMany struct {
	query builder.Query
}

func (r avatarsOnRaidsToRaidUpdateMany) Exec(ctx context.Context) (int, error) {
	var v updateManyAvatarsOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateManyAvatarsOnRaids.Count, err
}

func (r avatarsOnRaidsToRaidFindMany) Delete() avatarsOnRaidsToRaidDeleteMany {
	var v avatarsOnRaidsToRaidDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "AvatarsOnRaids"
	v.query.Outputs = countOutput
	return v
}

type avatarsOnRaidsToRaidDeleteMany struct {
	query builder.Query
}

func (r avatarsOnRaidsToRaidDeleteMany) Exec(ctx context.Context) (int, error) {
	var v deleteManyAvatarsOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteManyAvatarsOnRaids.Count, err
}

type avatarsOnRaidsToAvatarFindOne struct {
	query builder.Query
}

func (r avatarsOnRaidsToAvatarFindOne) getQuery() builder.Query {
	return r.query
}

func (r avatarsOnRaidsToAvatarFindOne) with()                   {}
func (r avatarsOnRaidsToAvatarFindOne) avatarsOnRaidsModel()    {}
func (r avatarsOnRaidsToAvatarFindOne) avatarsOnRaidsRelation() {}

func (r avatarsOnRaidsToAvatarFindOne) With(params ...iAvatarRelationWith) avatarsOnRaidsToAvatarFindOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r avatarsOnRaidsToAvatarFindOne) Exec(ctx context.Context) (
	AvatarsOnRaidsModel,
	error,
) {
	var v findOneAvatarsOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return AvatarsOnRaidsModel{}, fmt.Errorf(first.Message)
	}

	if v.Data.FindOneAvatarsOnRaids == nil {
		return AvatarsOnRaidsModel{}, ErrNotFound
	}

	return *v.Data.FindOneAvatarsOnRaids, err
}

func (r avatarsOnRaidsToAvatarFindOne) Update(params ...iAvatarsOnRaidsSetParams) avatarsOnRaidsToAvatarUpdateOne {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "AvatarsOnRaids"
	r.query.Outputs = avatarsOnRaidsOutput

	var v avatarsOnRaidsToAvatarUpdateOne
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type avatarsOnRaidsToAvatarUpdateOne struct {
	query builder.Query
}

func (r avatarsOnRaidsToAvatarUpdateOne) Exec(ctx context.Context) (AvatarsOnRaidsModel, error) {
	var v updateOneAvatarsOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return AvatarsOnRaidsModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateOneAvatarsOnRaids, err
}

func (r avatarsOnRaidsToAvatarFindOne) Delete() avatarsOnRaidsToAvatarDeleteOne {
	var v avatarsOnRaidsToAvatarDeleteOne
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "AvatarsOnRaids"
	v.query.Outputs = avatarsOnRaidsOutput
	return v
}

type avatarsOnRaidsToAvatarDeleteOne struct {
	query builder.Query
}

func (r avatarsOnRaidsToAvatarDeleteOne) Exec(ctx context.Context) (AvatarsOnRaidsModel, error) {
	var v deleteOneAvatarsOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return AvatarsOnRaidsModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteOneAvatarsOnRaids, err
}

type avatarsOnRaidsToAvatarFindMany struct {
	query builder.Query
}

func (r avatarsOnRaidsToAvatarFindMany) getQuery() builder.Query {
	return r.query
}

func (r avatarsOnRaidsToAvatarFindMany) with()                   {}
func (r avatarsOnRaidsToAvatarFindMany) avatarsOnRaidsModel()    {}
func (r avatarsOnRaidsToAvatarFindMany) avatarsOnRaidsRelation() {}

func (r avatarsOnRaidsToAvatarFindMany) With(params ...iAvatarRelationWith) avatarsOnRaidsToAvatarFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r avatarsOnRaidsToAvatarFindMany) OrderBy(param iAvatarsOnRaidsOrderByParams) avatarsOnRaidsToAvatarFindMany {
	direction, _ := param.field().Value.(runtime.Direction)
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "orderBy",
		Value: runtime.Direction(param.field().Name + "_" + string(direction)),
	})
	return r
}

func (r avatarsOnRaidsToAvatarFindMany) Skip(count int) avatarsOnRaidsToAvatarFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r avatarsOnRaidsToAvatarFindMany) Take(count int) avatarsOnRaidsToAvatarFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r avatarsOnRaidsToAvatarFindMany) Cursor(cursor iAvatarsOnRaidsCursorParams) avatarsOnRaidsToAvatarFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r avatarsOnRaidsToAvatarFindMany) Exec(ctx context.Context) (
	[]AvatarsOnRaidsModel,
	error,
) {
	var v findManyAvatarsOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return []AvatarsOnRaidsModel{}, fmt.Errorf(first.Message)
	}

	return v.Data.FindManyAvatarsOnRaids, err
}

func (r avatarsOnRaidsToAvatarFindMany) Update(params ...iAvatarsOnRaidsSetParams) avatarsOnRaidsToAvatarUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "AvatarsOnRaids"
	r.query.Outputs = countOutput

	var v avatarsOnRaidsToAvatarUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type avatarsOnRaidsToAvatarUpdateMany struct {
	query builder.Query
}

func (r avatarsOnRaidsToAvatarUpdateMany) Exec(ctx context.Context) (int, error) {
	var v updateManyAvatarsOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateManyAvatarsOnRaids.Count, err
}

func (r avatarsOnRaidsToAvatarFindMany) Delete() avatarsOnRaidsToAvatarDeleteMany {
	var v avatarsOnRaidsToAvatarDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "AvatarsOnRaids"
	v.query.Outputs = countOutput
	return v
}

type avatarsOnRaidsToAvatarDeleteMany struct {
	query builder.Query
}

func (r avatarsOnRaidsToAvatarDeleteMany) Exec(ctx context.Context) (int, error) {
	var v deleteManyAvatarsOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteManyAvatarsOnRaids.Count, err
}

type avatarsOnRaidsFindOne struct {
	query builder.Query
}

func (r avatarsOnRaidsFindOne) getQuery() builder.Query {
	return r.query
}

func (r avatarsOnRaidsFindOne) with()                   {}
func (r avatarsOnRaidsFindOne) avatarsOnRaidsModel()    {}
func (r avatarsOnRaidsFindOne) avatarsOnRaidsRelation() {}

func (r avatarsOnRaidsActions) FindOne(

	params iAvatarsOnRaidsEqualsParamsUnique,
) avatarsOnRaidsFindOne {
	var v avatarsOnRaidsFindOne
	v.query = builder.NewQuery()
	v.query.Client = r.client

	v.query.Operation = "query"
	v.query.Method = "findOne"
	v.query.Model = "AvatarsOnRaids"
	v.query.Outputs = avatarsOnRaidsOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: []builder.Field{params.field()},
	})

	return v
}

func (r avatarsOnRaidsFindOne) With(params ...iAvatarsOnRaidsRelationWith) avatarsOnRaidsFindOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r avatarsOnRaidsFindOne) Exec(ctx context.Context) (
	AvatarsOnRaidsModel,
	error,
) {
	var v findOneAvatarsOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return AvatarsOnRaidsModel{}, fmt.Errorf(first.Message)
	}

	if v.Data.FindOneAvatarsOnRaids == nil {
		return AvatarsOnRaidsModel{}, ErrNotFound
	}

	return *v.Data.FindOneAvatarsOnRaids, err
}

func (r avatarsOnRaidsFindOne) Update(params ...iAvatarsOnRaidsSetParams) avatarsOnRaidsUpdateOne {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "AvatarsOnRaids"
	r.query.Outputs = avatarsOnRaidsOutput

	var v avatarsOnRaidsUpdateOne
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type avatarsOnRaidsUpdateOne struct {
	query builder.Query
}

func (r avatarsOnRaidsUpdateOne) Exec(ctx context.Context) (AvatarsOnRaidsModel, error) {
	var v updateOneAvatarsOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return AvatarsOnRaidsModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateOneAvatarsOnRaids, err
}

func (r avatarsOnRaidsFindOne) Delete() avatarsOnRaidsDeleteOne {
	var v avatarsOnRaidsDeleteOne
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "AvatarsOnRaids"
	v.query.Outputs = avatarsOnRaidsOutput
	return v
}

type avatarsOnRaidsDeleteOne struct {
	query builder.Query
}

func (r avatarsOnRaidsDeleteOne) Exec(ctx context.Context) (AvatarsOnRaidsModel, error) {
	var v deleteOneAvatarsOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return AvatarsOnRaidsModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteOneAvatarsOnRaids, err
}

type avatarsOnRaidsFindMany struct {
	query builder.Query
}

func (r avatarsOnRaidsFindMany) getQuery() builder.Query {
	return r.query
}

func (r avatarsOnRaidsFindMany) with()                   {}
func (r avatarsOnRaidsFindMany) avatarsOnRaidsModel()    {}
func (r avatarsOnRaidsFindMany) avatarsOnRaidsRelation() {}

func (r avatarsOnRaidsActions) FindMany(

	params ...iAvatarsOnRaidsParams,
) avatarsOnRaidsFindMany {
	var v avatarsOnRaidsFindMany
	v.query = builder.NewQuery()
	v.query.Client = r.client

	v.query.Operation = "query"
	v.query.Method = "findMany"
	v.query.Model = "AvatarsOnRaids"
	v.query.Outputs = avatarsOnRaidsOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r avatarsOnRaidsFindMany) With(params ...iAvatarsOnRaidsRelationWith) avatarsOnRaidsFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r avatarsOnRaidsFindMany) OrderBy(param iAvatarsOnRaidsOrderByParams) avatarsOnRaidsFindMany {
	direction, _ := param.field().Value.(runtime.Direction)
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "orderBy",
		Value: runtime.Direction(param.field().Name + "_" + string(direction)),
	})
	return r
}

func (r avatarsOnRaidsFindMany) Skip(count int) avatarsOnRaidsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r avatarsOnRaidsFindMany) Take(count int) avatarsOnRaidsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r avatarsOnRaidsFindMany) Cursor(cursor iAvatarsOnRaidsCursorParams) avatarsOnRaidsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r avatarsOnRaidsFindMany) Exec(ctx context.Context) (
	[]AvatarsOnRaidsModel,
	error,
) {
	var v findManyAvatarsOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return []AvatarsOnRaidsModel{}, fmt.Errorf(first.Message)
	}

	return v.Data.FindManyAvatarsOnRaids, err
}

func (r avatarsOnRaidsFindMany) Update(params ...iAvatarsOnRaidsSetParams) avatarsOnRaidsUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "AvatarsOnRaids"
	r.query.Outputs = countOutput

	var v avatarsOnRaidsUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type avatarsOnRaidsUpdateMany struct {
	query builder.Query
}

func (r avatarsOnRaidsUpdateMany) Exec(ctx context.Context) (int, error) {
	var v updateManyAvatarsOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateManyAvatarsOnRaids.Count, err
}

func (r avatarsOnRaidsFindMany) Delete() avatarsOnRaidsDeleteMany {
	var v avatarsOnRaidsDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "AvatarsOnRaids"
	v.query.Outputs = countOutput
	return v
}

type avatarsOnRaidsDeleteMany struct {
	query builder.Query
}

func (r avatarsOnRaidsDeleteMany) Exec(ctx context.Context) (int, error) {
	var v deleteManyAvatarsOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteManyAvatarsOnRaids.Count, err
}

type raidBossesOnRaidsToRaidFindOne struct {
	query builder.Query
}

func (r raidBossesOnRaidsToRaidFindOne) getQuery() builder.Query {
	return r.query
}

func (r raidBossesOnRaidsToRaidFindOne) with()                      {}
func (r raidBossesOnRaidsToRaidFindOne) raidBossesOnRaidsModel()    {}
func (r raidBossesOnRaidsToRaidFindOne) raidBossesOnRaidsRelation() {}

func (r raidBossesOnRaidsToRaidFindOne) With(params ...iRaidRelationWith) raidBossesOnRaidsToRaidFindOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r raidBossesOnRaidsToRaidFindOne) Exec(ctx context.Context) (
	RaidBossesOnRaidsModel,
	error,
) {
	var v findOneRaidBossesOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return RaidBossesOnRaidsModel{}, fmt.Errorf(first.Message)
	}

	if v.Data.FindOneRaidBossesOnRaids == nil {
		return RaidBossesOnRaidsModel{}, ErrNotFound
	}

	return *v.Data.FindOneRaidBossesOnRaids, err
}

func (r raidBossesOnRaidsToRaidFindOne) Update(params ...iRaidBossesOnRaidsSetParams) raidBossesOnRaidsToRaidUpdateOne {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "RaidBossesOnRaids"
	r.query.Outputs = raidBossesOnRaidsOutput

	var v raidBossesOnRaidsToRaidUpdateOne
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type raidBossesOnRaidsToRaidUpdateOne struct {
	query builder.Query
}

func (r raidBossesOnRaidsToRaidUpdateOne) Exec(ctx context.Context) (RaidBossesOnRaidsModel, error) {
	var v updateOneRaidBossesOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return RaidBossesOnRaidsModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateOneRaidBossesOnRaids, err
}

func (r raidBossesOnRaidsToRaidFindOne) Delete() raidBossesOnRaidsToRaidDeleteOne {
	var v raidBossesOnRaidsToRaidDeleteOne
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "RaidBossesOnRaids"
	v.query.Outputs = raidBossesOnRaidsOutput
	return v
}

type raidBossesOnRaidsToRaidDeleteOne struct {
	query builder.Query
}

func (r raidBossesOnRaidsToRaidDeleteOne) Exec(ctx context.Context) (RaidBossesOnRaidsModel, error) {
	var v deleteOneRaidBossesOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return RaidBossesOnRaidsModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteOneRaidBossesOnRaids, err
}

type raidBossesOnRaidsToRaidFindMany struct {
	query builder.Query
}

func (r raidBossesOnRaidsToRaidFindMany) getQuery() builder.Query {
	return r.query
}

func (r raidBossesOnRaidsToRaidFindMany) with()                      {}
func (r raidBossesOnRaidsToRaidFindMany) raidBossesOnRaidsModel()    {}
func (r raidBossesOnRaidsToRaidFindMany) raidBossesOnRaidsRelation() {}

func (r raidBossesOnRaidsToRaidFindMany) With(params ...iRaidRelationWith) raidBossesOnRaidsToRaidFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r raidBossesOnRaidsToRaidFindMany) OrderBy(param iRaidBossesOnRaidsOrderByParams) raidBossesOnRaidsToRaidFindMany {
	direction, _ := param.field().Value.(runtime.Direction)
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "orderBy",
		Value: runtime.Direction(param.field().Name + "_" + string(direction)),
	})
	return r
}

func (r raidBossesOnRaidsToRaidFindMany) Skip(count int) raidBossesOnRaidsToRaidFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r raidBossesOnRaidsToRaidFindMany) Take(count int) raidBossesOnRaidsToRaidFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r raidBossesOnRaidsToRaidFindMany) Cursor(cursor iRaidBossesOnRaidsCursorParams) raidBossesOnRaidsToRaidFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r raidBossesOnRaidsToRaidFindMany) Exec(ctx context.Context) (
	[]RaidBossesOnRaidsModel,
	error,
) {
	var v findManyRaidBossesOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return []RaidBossesOnRaidsModel{}, fmt.Errorf(first.Message)
	}

	return v.Data.FindManyRaidBossesOnRaids, err
}

func (r raidBossesOnRaidsToRaidFindMany) Update(params ...iRaidBossesOnRaidsSetParams) raidBossesOnRaidsToRaidUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "RaidBossesOnRaids"
	r.query.Outputs = countOutput

	var v raidBossesOnRaidsToRaidUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type raidBossesOnRaidsToRaidUpdateMany struct {
	query builder.Query
}

func (r raidBossesOnRaidsToRaidUpdateMany) Exec(ctx context.Context) (int, error) {
	var v updateManyRaidBossesOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateManyRaidBossesOnRaids.Count, err
}

func (r raidBossesOnRaidsToRaidFindMany) Delete() raidBossesOnRaidsToRaidDeleteMany {
	var v raidBossesOnRaidsToRaidDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "RaidBossesOnRaids"
	v.query.Outputs = countOutput
	return v
}

type raidBossesOnRaidsToRaidDeleteMany struct {
	query builder.Query
}

func (r raidBossesOnRaidsToRaidDeleteMany) Exec(ctx context.Context) (int, error) {
	var v deleteManyRaidBossesOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteManyRaidBossesOnRaids.Count, err
}

type raidBossesOnRaidsToRaidBossFindOne struct {
	query builder.Query
}

func (r raidBossesOnRaidsToRaidBossFindOne) getQuery() builder.Query {
	return r.query
}

func (r raidBossesOnRaidsToRaidBossFindOne) with()                      {}
func (r raidBossesOnRaidsToRaidBossFindOne) raidBossesOnRaidsModel()    {}
func (r raidBossesOnRaidsToRaidBossFindOne) raidBossesOnRaidsRelation() {}

func (r raidBossesOnRaidsToRaidBossFindOne) With(params ...iRaidBossRelationWith) raidBossesOnRaidsToRaidBossFindOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r raidBossesOnRaidsToRaidBossFindOne) Exec(ctx context.Context) (
	RaidBossesOnRaidsModel,
	error,
) {
	var v findOneRaidBossesOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return RaidBossesOnRaidsModel{}, fmt.Errorf(first.Message)
	}

	if v.Data.FindOneRaidBossesOnRaids == nil {
		return RaidBossesOnRaidsModel{}, ErrNotFound
	}

	return *v.Data.FindOneRaidBossesOnRaids, err
}

func (r raidBossesOnRaidsToRaidBossFindOne) Update(params ...iRaidBossesOnRaidsSetParams) raidBossesOnRaidsToRaidBossUpdateOne {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "RaidBossesOnRaids"
	r.query.Outputs = raidBossesOnRaidsOutput

	var v raidBossesOnRaidsToRaidBossUpdateOne
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type raidBossesOnRaidsToRaidBossUpdateOne struct {
	query builder.Query
}

func (r raidBossesOnRaidsToRaidBossUpdateOne) Exec(ctx context.Context) (RaidBossesOnRaidsModel, error) {
	var v updateOneRaidBossesOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return RaidBossesOnRaidsModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateOneRaidBossesOnRaids, err
}

func (r raidBossesOnRaidsToRaidBossFindOne) Delete() raidBossesOnRaidsToRaidBossDeleteOne {
	var v raidBossesOnRaidsToRaidBossDeleteOne
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "RaidBossesOnRaids"
	v.query.Outputs = raidBossesOnRaidsOutput
	return v
}

type raidBossesOnRaidsToRaidBossDeleteOne struct {
	query builder.Query
}

func (r raidBossesOnRaidsToRaidBossDeleteOne) Exec(ctx context.Context) (RaidBossesOnRaidsModel, error) {
	var v deleteOneRaidBossesOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return RaidBossesOnRaidsModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteOneRaidBossesOnRaids, err
}

type raidBossesOnRaidsToRaidBossFindMany struct {
	query builder.Query
}

func (r raidBossesOnRaidsToRaidBossFindMany) getQuery() builder.Query {
	return r.query
}

func (r raidBossesOnRaidsToRaidBossFindMany) with()                      {}
func (r raidBossesOnRaidsToRaidBossFindMany) raidBossesOnRaidsModel()    {}
func (r raidBossesOnRaidsToRaidBossFindMany) raidBossesOnRaidsRelation() {}

func (r raidBossesOnRaidsToRaidBossFindMany) With(params ...iRaidBossRelationWith) raidBossesOnRaidsToRaidBossFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r raidBossesOnRaidsToRaidBossFindMany) OrderBy(param iRaidBossesOnRaidsOrderByParams) raidBossesOnRaidsToRaidBossFindMany {
	direction, _ := param.field().Value.(runtime.Direction)
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "orderBy",
		Value: runtime.Direction(param.field().Name + "_" + string(direction)),
	})
	return r
}

func (r raidBossesOnRaidsToRaidBossFindMany) Skip(count int) raidBossesOnRaidsToRaidBossFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r raidBossesOnRaidsToRaidBossFindMany) Take(count int) raidBossesOnRaidsToRaidBossFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r raidBossesOnRaidsToRaidBossFindMany) Cursor(cursor iRaidBossesOnRaidsCursorParams) raidBossesOnRaidsToRaidBossFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r raidBossesOnRaidsToRaidBossFindMany) Exec(ctx context.Context) (
	[]RaidBossesOnRaidsModel,
	error,
) {
	var v findManyRaidBossesOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return []RaidBossesOnRaidsModel{}, fmt.Errorf(first.Message)
	}

	return v.Data.FindManyRaidBossesOnRaids, err
}

func (r raidBossesOnRaidsToRaidBossFindMany) Update(params ...iRaidBossesOnRaidsSetParams) raidBossesOnRaidsToRaidBossUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "RaidBossesOnRaids"
	r.query.Outputs = countOutput

	var v raidBossesOnRaidsToRaidBossUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type raidBossesOnRaidsToRaidBossUpdateMany struct {
	query builder.Query
}

func (r raidBossesOnRaidsToRaidBossUpdateMany) Exec(ctx context.Context) (int, error) {
	var v updateManyRaidBossesOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateManyRaidBossesOnRaids.Count, err
}

func (r raidBossesOnRaidsToRaidBossFindMany) Delete() raidBossesOnRaidsToRaidBossDeleteMany {
	var v raidBossesOnRaidsToRaidBossDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "RaidBossesOnRaids"
	v.query.Outputs = countOutput
	return v
}

type raidBossesOnRaidsToRaidBossDeleteMany struct {
	query builder.Query
}

func (r raidBossesOnRaidsToRaidBossDeleteMany) Exec(ctx context.Context) (int, error) {
	var v deleteManyRaidBossesOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteManyRaidBossesOnRaids.Count, err
}

type raidBossesOnRaidsFindOne struct {
	query builder.Query
}

func (r raidBossesOnRaidsFindOne) getQuery() builder.Query {
	return r.query
}

func (r raidBossesOnRaidsFindOne) with()                      {}
func (r raidBossesOnRaidsFindOne) raidBossesOnRaidsModel()    {}
func (r raidBossesOnRaidsFindOne) raidBossesOnRaidsRelation() {}

func (r raidBossesOnRaidsActions) FindOne(

	params iRaidBossesOnRaidsEqualsParamsUnique,
) raidBossesOnRaidsFindOne {
	var v raidBossesOnRaidsFindOne
	v.query = builder.NewQuery()
	v.query.Client = r.client

	v.query.Operation = "query"
	v.query.Method = "findOne"
	v.query.Model = "RaidBossesOnRaids"
	v.query.Outputs = raidBossesOnRaidsOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: []builder.Field{params.field()},
	})

	return v
}

func (r raidBossesOnRaidsFindOne) With(params ...iRaidBossesOnRaidsRelationWith) raidBossesOnRaidsFindOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r raidBossesOnRaidsFindOne) Exec(ctx context.Context) (
	RaidBossesOnRaidsModel,
	error,
) {
	var v findOneRaidBossesOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return RaidBossesOnRaidsModel{}, fmt.Errorf(first.Message)
	}

	if v.Data.FindOneRaidBossesOnRaids == nil {
		return RaidBossesOnRaidsModel{}, ErrNotFound
	}

	return *v.Data.FindOneRaidBossesOnRaids, err
}

func (r raidBossesOnRaidsFindOne) Update(params ...iRaidBossesOnRaidsSetParams) raidBossesOnRaidsUpdateOne {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "RaidBossesOnRaids"
	r.query.Outputs = raidBossesOnRaidsOutput

	var v raidBossesOnRaidsUpdateOne
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type raidBossesOnRaidsUpdateOne struct {
	query builder.Query
}

func (r raidBossesOnRaidsUpdateOne) Exec(ctx context.Context) (RaidBossesOnRaidsModel, error) {
	var v updateOneRaidBossesOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return RaidBossesOnRaidsModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateOneRaidBossesOnRaids, err
}

func (r raidBossesOnRaidsFindOne) Delete() raidBossesOnRaidsDeleteOne {
	var v raidBossesOnRaidsDeleteOne
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "RaidBossesOnRaids"
	v.query.Outputs = raidBossesOnRaidsOutput
	return v
}

type raidBossesOnRaidsDeleteOne struct {
	query builder.Query
}

func (r raidBossesOnRaidsDeleteOne) Exec(ctx context.Context) (RaidBossesOnRaidsModel, error) {
	var v deleteOneRaidBossesOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return RaidBossesOnRaidsModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteOneRaidBossesOnRaids, err
}

type raidBossesOnRaidsFindMany struct {
	query builder.Query
}

func (r raidBossesOnRaidsFindMany) getQuery() builder.Query {
	return r.query
}

func (r raidBossesOnRaidsFindMany) with()                      {}
func (r raidBossesOnRaidsFindMany) raidBossesOnRaidsModel()    {}
func (r raidBossesOnRaidsFindMany) raidBossesOnRaidsRelation() {}

func (r raidBossesOnRaidsActions) FindMany(

	params ...iRaidBossesOnRaidsParams,
) raidBossesOnRaidsFindMany {
	var v raidBossesOnRaidsFindMany
	v.query = builder.NewQuery()
	v.query.Client = r.client

	v.query.Operation = "query"
	v.query.Method = "findMany"
	v.query.Model = "RaidBossesOnRaids"
	v.query.Outputs = raidBossesOnRaidsOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r raidBossesOnRaidsFindMany) With(params ...iRaidBossesOnRaidsRelationWith) raidBossesOnRaidsFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r raidBossesOnRaidsFindMany) OrderBy(param iRaidBossesOnRaidsOrderByParams) raidBossesOnRaidsFindMany {
	direction, _ := param.field().Value.(runtime.Direction)
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "orderBy",
		Value: runtime.Direction(param.field().Name + "_" + string(direction)),
	})
	return r
}

func (r raidBossesOnRaidsFindMany) Skip(count int) raidBossesOnRaidsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r raidBossesOnRaidsFindMany) Take(count int) raidBossesOnRaidsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r raidBossesOnRaidsFindMany) Cursor(cursor iRaidBossesOnRaidsCursorParams) raidBossesOnRaidsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r raidBossesOnRaidsFindMany) Exec(ctx context.Context) (
	[]RaidBossesOnRaidsModel,
	error,
) {
	var v findManyRaidBossesOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return []RaidBossesOnRaidsModel{}, fmt.Errorf(first.Message)
	}

	return v.Data.FindManyRaidBossesOnRaids, err
}

func (r raidBossesOnRaidsFindMany) Update(params ...iRaidBossesOnRaidsSetParams) raidBossesOnRaidsUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "RaidBossesOnRaids"
	r.query.Outputs = countOutput

	var v raidBossesOnRaidsUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type raidBossesOnRaidsUpdateMany struct {
	query builder.Query
}

func (r raidBossesOnRaidsUpdateMany) Exec(ctx context.Context) (int, error) {
	var v updateManyRaidBossesOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateManyRaidBossesOnRaids.Count, err
}

func (r raidBossesOnRaidsFindMany) Delete() raidBossesOnRaidsDeleteMany {
	var v raidBossesOnRaidsDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "RaidBossesOnRaids"
	v.query.Outputs = countOutput
	return v
}

type raidBossesOnRaidsDeleteMany struct {
	query builder.Query
}

func (r raidBossesOnRaidsDeleteMany) Exec(ctx context.Context) (int, error) {
	var v deleteManyRaidBossesOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteManyRaidBossesOnRaids.Count, err
}

type storyToStoriesOnRaidsFindOne struct {
	query builder.Query
}

func (r storyToStoriesOnRaidsFindOne) getQuery() builder.Query {
	return r.query
}

func (r storyToStoriesOnRaidsFindOne) with()          {}
func (r storyToStoriesOnRaidsFindOne) storyModel()    {}
func (r storyToStoriesOnRaidsFindOne) storyRelation() {}

func (r storyToStoriesOnRaidsFindOne) With(params ...iStoriesOnRaidsRelationWith) storyToStoriesOnRaidsFindOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r storyToStoriesOnRaidsFindOne) Exec(ctx context.Context) (
	StoryModel,
	error,
) {
	var v findOneStoryResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return StoryModel{}, fmt.Errorf(first.Message)
	}

	if v.Data.FindOneStory == nil {
		return StoryModel{}, ErrNotFound
	}

	return *v.Data.FindOneStory, err
}

func (r storyToStoriesOnRaidsFindOne) Update(params ...iStorySetParams) storyToStoriesOnRaidsUpdateOne {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Story"
	r.query.Outputs = storyOutput

	var v storyToStoriesOnRaidsUpdateOne
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type storyToStoriesOnRaidsUpdateOne struct {
	query builder.Query
}

func (r storyToStoriesOnRaidsUpdateOne) Exec(ctx context.Context) (StoryModel, error) {
	var v updateOneStoryResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return StoryModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateOneStory, err
}

func (r storyToStoriesOnRaidsFindOne) Delete() storyToStoriesOnRaidsDeleteOne {
	var v storyToStoriesOnRaidsDeleteOne
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Story"
	v.query.Outputs = storyOutput
	return v
}

type storyToStoriesOnRaidsDeleteOne struct {
	query builder.Query
}

func (r storyToStoriesOnRaidsDeleteOne) Exec(ctx context.Context) (StoryModel, error) {
	var v deleteOneStoryResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return StoryModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteOneStory, err
}

type storyToStoriesOnRaidsFindMany struct {
	query builder.Query
}

func (r storyToStoriesOnRaidsFindMany) getQuery() builder.Query {
	return r.query
}

func (r storyToStoriesOnRaidsFindMany) with()          {}
func (r storyToStoriesOnRaidsFindMany) storyModel()    {}
func (r storyToStoriesOnRaidsFindMany) storyRelation() {}

func (r storyToStoriesOnRaidsFindMany) With(params ...iStoriesOnRaidsRelationWith) storyToStoriesOnRaidsFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r storyToStoriesOnRaidsFindMany) OrderBy(param iStoryOrderByParams) storyToStoriesOnRaidsFindMany {
	direction, _ := param.field().Value.(runtime.Direction)
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "orderBy",
		Value: runtime.Direction(param.field().Name + "_" + string(direction)),
	})
	return r
}

func (r storyToStoriesOnRaidsFindMany) Skip(count int) storyToStoriesOnRaidsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r storyToStoriesOnRaidsFindMany) Take(count int) storyToStoriesOnRaidsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r storyToStoriesOnRaidsFindMany) Cursor(cursor iStoryCursorParams) storyToStoriesOnRaidsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r storyToStoriesOnRaidsFindMany) Exec(ctx context.Context) (
	[]StoryModel,
	error,
) {
	var v findManyStoryResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return []StoryModel{}, fmt.Errorf(first.Message)
	}

	return v.Data.FindManyStory, err
}

func (r storyToStoriesOnRaidsFindMany) Update(params ...iStorySetParams) storyToStoriesOnRaidsUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Story"
	r.query.Outputs = countOutput

	var v storyToStoriesOnRaidsUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type storyToStoriesOnRaidsUpdateMany struct {
	query builder.Query
}

func (r storyToStoriesOnRaidsUpdateMany) Exec(ctx context.Context) (int, error) {
	var v updateManyStoryResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateManyStory.Count, err
}

func (r storyToStoriesOnRaidsFindMany) Delete() storyToStoriesOnRaidsDeleteMany {
	var v storyToStoriesOnRaidsDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Story"
	v.query.Outputs = countOutput
	return v
}

type storyToStoriesOnRaidsDeleteMany struct {
	query builder.Query
}

func (r storyToStoriesOnRaidsDeleteMany) Exec(ctx context.Context) (int, error) {
	var v deleteManyStoryResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteManyStory.Count, err
}

type storyToEventFindOne struct {
	query builder.Query
}

func (r storyToEventFindOne) getQuery() builder.Query {
	return r.query
}

func (r storyToEventFindOne) with()          {}
func (r storyToEventFindOne) storyModel()    {}
func (r storyToEventFindOne) storyRelation() {}

func (r storyToEventFindOne) With(params ...iEventRelationWith) storyToEventFindOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r storyToEventFindOne) Exec(ctx context.Context) (
	StoryModel,
	error,
) {
	var v findOneStoryResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return StoryModel{}, fmt.Errorf(first.Message)
	}

	if v.Data.FindOneStory == nil {
		return StoryModel{}, ErrNotFound
	}

	return *v.Data.FindOneStory, err
}

func (r storyToEventFindOne) Update(params ...iStorySetParams) storyToEventUpdateOne {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Story"
	r.query.Outputs = storyOutput

	var v storyToEventUpdateOne
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type storyToEventUpdateOne struct {
	query builder.Query
}

func (r storyToEventUpdateOne) Exec(ctx context.Context) (StoryModel, error) {
	var v updateOneStoryResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return StoryModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateOneStory, err
}

func (r storyToEventFindOne) Delete() storyToEventDeleteOne {
	var v storyToEventDeleteOne
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Story"
	v.query.Outputs = storyOutput
	return v
}

type storyToEventDeleteOne struct {
	query builder.Query
}

func (r storyToEventDeleteOne) Exec(ctx context.Context) (StoryModel, error) {
	var v deleteOneStoryResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return StoryModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteOneStory, err
}

type storyToEventFindMany struct {
	query builder.Query
}

func (r storyToEventFindMany) getQuery() builder.Query {
	return r.query
}

func (r storyToEventFindMany) with()          {}
func (r storyToEventFindMany) storyModel()    {}
func (r storyToEventFindMany) storyRelation() {}

func (r storyToEventFindMany) With(params ...iEventRelationWith) storyToEventFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r storyToEventFindMany) OrderBy(param iStoryOrderByParams) storyToEventFindMany {
	direction, _ := param.field().Value.(runtime.Direction)
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "orderBy",
		Value: runtime.Direction(param.field().Name + "_" + string(direction)),
	})
	return r
}

func (r storyToEventFindMany) Skip(count int) storyToEventFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r storyToEventFindMany) Take(count int) storyToEventFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r storyToEventFindMany) Cursor(cursor iStoryCursorParams) storyToEventFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r storyToEventFindMany) Exec(ctx context.Context) (
	[]StoryModel,
	error,
) {
	var v findManyStoryResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return []StoryModel{}, fmt.Errorf(first.Message)
	}

	return v.Data.FindManyStory, err
}

func (r storyToEventFindMany) Update(params ...iStorySetParams) storyToEventUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Story"
	r.query.Outputs = countOutput

	var v storyToEventUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type storyToEventUpdateMany struct {
	query builder.Query
}

func (r storyToEventUpdateMany) Exec(ctx context.Context) (int, error) {
	var v updateManyStoryResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateManyStory.Count, err
}

func (r storyToEventFindMany) Delete() storyToEventDeleteMany {
	var v storyToEventDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Story"
	v.query.Outputs = countOutput
	return v
}

type storyToEventDeleteMany struct {
	query builder.Query
}

func (r storyToEventDeleteMany) Exec(ctx context.Context) (int, error) {
	var v deleteManyStoryResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteManyStory.Count, err
}

type storyFindOne struct {
	query builder.Query
}

func (r storyFindOne) getQuery() builder.Query {
	return r.query
}

func (r storyFindOne) with()          {}
func (r storyFindOne) storyModel()    {}
func (r storyFindOne) storyRelation() {}

func (r storyActions) FindOne(

	params iStoryEqualsParamsUnique,
) storyFindOne {
	var v storyFindOne
	v.query = builder.NewQuery()
	v.query.Client = r.client

	v.query.Operation = "query"
	v.query.Method = "findOne"
	v.query.Model = "Story"
	v.query.Outputs = storyOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: []builder.Field{params.field()},
	})

	return v
}

func (r storyFindOne) With(params ...iStoryRelationWith) storyFindOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r storyFindOne) Exec(ctx context.Context) (
	StoryModel,
	error,
) {
	var v findOneStoryResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return StoryModel{}, fmt.Errorf(first.Message)
	}

	if v.Data.FindOneStory == nil {
		return StoryModel{}, ErrNotFound
	}

	return *v.Data.FindOneStory, err
}

func (r storyFindOne) Update(params ...iStorySetParams) storyUpdateOne {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Story"
	r.query.Outputs = storyOutput

	var v storyUpdateOne
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type storyUpdateOne struct {
	query builder.Query
}

func (r storyUpdateOne) Exec(ctx context.Context) (StoryModel, error) {
	var v updateOneStoryResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return StoryModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateOneStory, err
}

func (r storyFindOne) Delete() storyDeleteOne {
	var v storyDeleteOne
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Story"
	v.query.Outputs = storyOutput
	return v
}

type storyDeleteOne struct {
	query builder.Query
}

func (r storyDeleteOne) Exec(ctx context.Context) (StoryModel, error) {
	var v deleteOneStoryResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return StoryModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteOneStory, err
}

type storyFindMany struct {
	query builder.Query
}

func (r storyFindMany) getQuery() builder.Query {
	return r.query
}

func (r storyFindMany) with()          {}
func (r storyFindMany) storyModel()    {}
func (r storyFindMany) storyRelation() {}

func (r storyActions) FindMany(

	params ...iStoryParams,
) storyFindMany {
	var v storyFindMany
	v.query = builder.NewQuery()
	v.query.Client = r.client

	v.query.Operation = "query"
	v.query.Method = "findMany"
	v.query.Model = "Story"
	v.query.Outputs = storyOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r storyFindMany) With(params ...iStoryRelationWith) storyFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r storyFindMany) OrderBy(param iStoryOrderByParams) storyFindMany {
	direction, _ := param.field().Value.(runtime.Direction)
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "orderBy",
		Value: runtime.Direction(param.field().Name + "_" + string(direction)),
	})
	return r
}

func (r storyFindMany) Skip(count int) storyFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r storyFindMany) Take(count int) storyFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r storyFindMany) Cursor(cursor iStoryCursorParams) storyFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r storyFindMany) Exec(ctx context.Context) (
	[]StoryModel,
	error,
) {
	var v findManyStoryResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return []StoryModel{}, fmt.Errorf(first.Message)
	}

	return v.Data.FindManyStory, err
}

func (r storyFindMany) Update(params ...iStorySetParams) storyUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Story"
	r.query.Outputs = countOutput

	var v storyUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type storyUpdateMany struct {
	query builder.Query
}

func (r storyUpdateMany) Exec(ctx context.Context) (int, error) {
	var v updateManyStoryResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateManyStory.Count, err
}

func (r storyFindMany) Delete() storyDeleteMany {
	var v storyDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Story"
	v.query.Outputs = countOutput
	return v
}

type storyDeleteMany struct {
	query builder.Query
}

func (r storyDeleteMany) Exec(ctx context.Context) (int, error) {
	var v deleteManyStoryResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteManyStory.Count, err
}

type storiesOnRaidsToRaidFindOne struct {
	query builder.Query
}

func (r storiesOnRaidsToRaidFindOne) getQuery() builder.Query {
	return r.query
}

func (r storiesOnRaidsToRaidFindOne) with()                   {}
func (r storiesOnRaidsToRaidFindOne) storiesOnRaidsModel()    {}
func (r storiesOnRaidsToRaidFindOne) storiesOnRaidsRelation() {}

func (r storiesOnRaidsToRaidFindOne) With(params ...iRaidRelationWith) storiesOnRaidsToRaidFindOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r storiesOnRaidsToRaidFindOne) Exec(ctx context.Context) (
	StoriesOnRaidsModel,
	error,
) {
	var v findOneStoriesOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return StoriesOnRaidsModel{}, fmt.Errorf(first.Message)
	}

	if v.Data.FindOneStoriesOnRaids == nil {
		return StoriesOnRaidsModel{}, ErrNotFound
	}

	return *v.Data.FindOneStoriesOnRaids, err
}

func (r storiesOnRaidsToRaidFindOne) Update(params ...iStoriesOnRaidsSetParams) storiesOnRaidsToRaidUpdateOne {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "StoriesOnRaids"
	r.query.Outputs = storiesOnRaidsOutput

	var v storiesOnRaidsToRaidUpdateOne
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type storiesOnRaidsToRaidUpdateOne struct {
	query builder.Query
}

func (r storiesOnRaidsToRaidUpdateOne) Exec(ctx context.Context) (StoriesOnRaidsModel, error) {
	var v updateOneStoriesOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return StoriesOnRaidsModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateOneStoriesOnRaids, err
}

func (r storiesOnRaidsToRaidFindOne) Delete() storiesOnRaidsToRaidDeleteOne {
	var v storiesOnRaidsToRaidDeleteOne
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "StoriesOnRaids"
	v.query.Outputs = storiesOnRaidsOutput
	return v
}

type storiesOnRaidsToRaidDeleteOne struct {
	query builder.Query
}

func (r storiesOnRaidsToRaidDeleteOne) Exec(ctx context.Context) (StoriesOnRaidsModel, error) {
	var v deleteOneStoriesOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return StoriesOnRaidsModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteOneStoriesOnRaids, err
}

type storiesOnRaidsToRaidFindMany struct {
	query builder.Query
}

func (r storiesOnRaidsToRaidFindMany) getQuery() builder.Query {
	return r.query
}

func (r storiesOnRaidsToRaidFindMany) with()                   {}
func (r storiesOnRaidsToRaidFindMany) storiesOnRaidsModel()    {}
func (r storiesOnRaidsToRaidFindMany) storiesOnRaidsRelation() {}

func (r storiesOnRaidsToRaidFindMany) With(params ...iRaidRelationWith) storiesOnRaidsToRaidFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r storiesOnRaidsToRaidFindMany) OrderBy(param iStoriesOnRaidsOrderByParams) storiesOnRaidsToRaidFindMany {
	direction, _ := param.field().Value.(runtime.Direction)
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "orderBy",
		Value: runtime.Direction(param.field().Name + "_" + string(direction)),
	})
	return r
}

func (r storiesOnRaidsToRaidFindMany) Skip(count int) storiesOnRaidsToRaidFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r storiesOnRaidsToRaidFindMany) Take(count int) storiesOnRaidsToRaidFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r storiesOnRaidsToRaidFindMany) Cursor(cursor iStoriesOnRaidsCursorParams) storiesOnRaidsToRaidFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r storiesOnRaidsToRaidFindMany) Exec(ctx context.Context) (
	[]StoriesOnRaidsModel,
	error,
) {
	var v findManyStoriesOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return []StoriesOnRaidsModel{}, fmt.Errorf(first.Message)
	}

	return v.Data.FindManyStoriesOnRaids, err
}

func (r storiesOnRaidsToRaidFindMany) Update(params ...iStoriesOnRaidsSetParams) storiesOnRaidsToRaidUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "StoriesOnRaids"
	r.query.Outputs = countOutput

	var v storiesOnRaidsToRaidUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type storiesOnRaidsToRaidUpdateMany struct {
	query builder.Query
}

func (r storiesOnRaidsToRaidUpdateMany) Exec(ctx context.Context) (int, error) {
	var v updateManyStoriesOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateManyStoriesOnRaids.Count, err
}

func (r storiesOnRaidsToRaidFindMany) Delete() storiesOnRaidsToRaidDeleteMany {
	var v storiesOnRaidsToRaidDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "StoriesOnRaids"
	v.query.Outputs = countOutput
	return v
}

type storiesOnRaidsToRaidDeleteMany struct {
	query builder.Query
}

func (r storiesOnRaidsToRaidDeleteMany) Exec(ctx context.Context) (int, error) {
	var v deleteManyStoriesOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteManyStoriesOnRaids.Count, err
}

type storiesOnRaidsToStoryFindOne struct {
	query builder.Query
}

func (r storiesOnRaidsToStoryFindOne) getQuery() builder.Query {
	return r.query
}

func (r storiesOnRaidsToStoryFindOne) with()                   {}
func (r storiesOnRaidsToStoryFindOne) storiesOnRaidsModel()    {}
func (r storiesOnRaidsToStoryFindOne) storiesOnRaidsRelation() {}

func (r storiesOnRaidsToStoryFindOne) With(params ...iStoryRelationWith) storiesOnRaidsToStoryFindOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r storiesOnRaidsToStoryFindOne) Exec(ctx context.Context) (
	StoriesOnRaidsModel,
	error,
) {
	var v findOneStoriesOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return StoriesOnRaidsModel{}, fmt.Errorf(first.Message)
	}

	if v.Data.FindOneStoriesOnRaids == nil {
		return StoriesOnRaidsModel{}, ErrNotFound
	}

	return *v.Data.FindOneStoriesOnRaids, err
}

func (r storiesOnRaidsToStoryFindOne) Update(params ...iStoriesOnRaidsSetParams) storiesOnRaidsToStoryUpdateOne {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "StoriesOnRaids"
	r.query.Outputs = storiesOnRaidsOutput

	var v storiesOnRaidsToStoryUpdateOne
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type storiesOnRaidsToStoryUpdateOne struct {
	query builder.Query
}

func (r storiesOnRaidsToStoryUpdateOne) Exec(ctx context.Context) (StoriesOnRaidsModel, error) {
	var v updateOneStoriesOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return StoriesOnRaidsModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateOneStoriesOnRaids, err
}

func (r storiesOnRaidsToStoryFindOne) Delete() storiesOnRaidsToStoryDeleteOne {
	var v storiesOnRaidsToStoryDeleteOne
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "StoriesOnRaids"
	v.query.Outputs = storiesOnRaidsOutput
	return v
}

type storiesOnRaidsToStoryDeleteOne struct {
	query builder.Query
}

func (r storiesOnRaidsToStoryDeleteOne) Exec(ctx context.Context) (StoriesOnRaidsModel, error) {
	var v deleteOneStoriesOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return StoriesOnRaidsModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteOneStoriesOnRaids, err
}

type storiesOnRaidsToStoryFindMany struct {
	query builder.Query
}

func (r storiesOnRaidsToStoryFindMany) getQuery() builder.Query {
	return r.query
}

func (r storiesOnRaidsToStoryFindMany) with()                   {}
func (r storiesOnRaidsToStoryFindMany) storiesOnRaidsModel()    {}
func (r storiesOnRaidsToStoryFindMany) storiesOnRaidsRelation() {}

func (r storiesOnRaidsToStoryFindMany) With(params ...iStoryRelationWith) storiesOnRaidsToStoryFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r storiesOnRaidsToStoryFindMany) OrderBy(param iStoriesOnRaidsOrderByParams) storiesOnRaidsToStoryFindMany {
	direction, _ := param.field().Value.(runtime.Direction)
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "orderBy",
		Value: runtime.Direction(param.field().Name + "_" + string(direction)),
	})
	return r
}

func (r storiesOnRaidsToStoryFindMany) Skip(count int) storiesOnRaidsToStoryFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r storiesOnRaidsToStoryFindMany) Take(count int) storiesOnRaidsToStoryFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r storiesOnRaidsToStoryFindMany) Cursor(cursor iStoriesOnRaidsCursorParams) storiesOnRaidsToStoryFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r storiesOnRaidsToStoryFindMany) Exec(ctx context.Context) (
	[]StoriesOnRaidsModel,
	error,
) {
	var v findManyStoriesOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return []StoriesOnRaidsModel{}, fmt.Errorf(first.Message)
	}

	return v.Data.FindManyStoriesOnRaids, err
}

func (r storiesOnRaidsToStoryFindMany) Update(params ...iStoriesOnRaidsSetParams) storiesOnRaidsToStoryUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "StoriesOnRaids"
	r.query.Outputs = countOutput

	var v storiesOnRaidsToStoryUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type storiesOnRaidsToStoryUpdateMany struct {
	query builder.Query
}

func (r storiesOnRaidsToStoryUpdateMany) Exec(ctx context.Context) (int, error) {
	var v updateManyStoriesOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateManyStoriesOnRaids.Count, err
}

func (r storiesOnRaidsToStoryFindMany) Delete() storiesOnRaidsToStoryDeleteMany {
	var v storiesOnRaidsToStoryDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "StoriesOnRaids"
	v.query.Outputs = countOutput
	return v
}

type storiesOnRaidsToStoryDeleteMany struct {
	query builder.Query
}

func (r storiesOnRaidsToStoryDeleteMany) Exec(ctx context.Context) (int, error) {
	var v deleteManyStoriesOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteManyStoriesOnRaids.Count, err
}

type storiesOnRaidsFindOne struct {
	query builder.Query
}

func (r storiesOnRaidsFindOne) getQuery() builder.Query {
	return r.query
}

func (r storiesOnRaidsFindOne) with()                   {}
func (r storiesOnRaidsFindOne) storiesOnRaidsModel()    {}
func (r storiesOnRaidsFindOne) storiesOnRaidsRelation() {}

func (r storiesOnRaidsActions) FindOne(

	params iStoriesOnRaidsEqualsParamsUnique,
) storiesOnRaidsFindOne {
	var v storiesOnRaidsFindOne
	v.query = builder.NewQuery()
	v.query.Client = r.client

	v.query.Operation = "query"
	v.query.Method = "findOne"
	v.query.Model = "StoriesOnRaids"
	v.query.Outputs = storiesOnRaidsOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: []builder.Field{params.field()},
	})

	return v
}

func (r storiesOnRaidsFindOne) With(params ...iStoriesOnRaidsRelationWith) storiesOnRaidsFindOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r storiesOnRaidsFindOne) Exec(ctx context.Context) (
	StoriesOnRaidsModel,
	error,
) {
	var v findOneStoriesOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return StoriesOnRaidsModel{}, fmt.Errorf(first.Message)
	}

	if v.Data.FindOneStoriesOnRaids == nil {
		return StoriesOnRaidsModel{}, ErrNotFound
	}

	return *v.Data.FindOneStoriesOnRaids, err
}

func (r storiesOnRaidsFindOne) Update(params ...iStoriesOnRaidsSetParams) storiesOnRaidsUpdateOne {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "StoriesOnRaids"
	r.query.Outputs = storiesOnRaidsOutput

	var v storiesOnRaidsUpdateOne
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type storiesOnRaidsUpdateOne struct {
	query builder.Query
}

func (r storiesOnRaidsUpdateOne) Exec(ctx context.Context) (StoriesOnRaidsModel, error) {
	var v updateOneStoriesOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return StoriesOnRaidsModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateOneStoriesOnRaids, err
}

func (r storiesOnRaidsFindOne) Delete() storiesOnRaidsDeleteOne {
	var v storiesOnRaidsDeleteOne
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "StoriesOnRaids"
	v.query.Outputs = storiesOnRaidsOutput
	return v
}

type storiesOnRaidsDeleteOne struct {
	query builder.Query
}

func (r storiesOnRaidsDeleteOne) Exec(ctx context.Context) (StoriesOnRaidsModel, error) {
	var v deleteOneStoriesOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return StoriesOnRaidsModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteOneStoriesOnRaids, err
}

type storiesOnRaidsFindMany struct {
	query builder.Query
}

func (r storiesOnRaidsFindMany) getQuery() builder.Query {
	return r.query
}

func (r storiesOnRaidsFindMany) with()                   {}
func (r storiesOnRaidsFindMany) storiesOnRaidsModel()    {}
func (r storiesOnRaidsFindMany) storiesOnRaidsRelation() {}

func (r storiesOnRaidsActions) FindMany(

	params ...iStoriesOnRaidsParams,
) storiesOnRaidsFindMany {
	var v storiesOnRaidsFindMany
	v.query = builder.NewQuery()
	v.query.Client = r.client

	v.query.Operation = "query"
	v.query.Method = "findMany"
	v.query.Model = "StoriesOnRaids"
	v.query.Outputs = storiesOnRaidsOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r storiesOnRaidsFindMany) With(params ...iStoriesOnRaidsRelationWith) storiesOnRaidsFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r storiesOnRaidsFindMany) OrderBy(param iStoriesOnRaidsOrderByParams) storiesOnRaidsFindMany {
	direction, _ := param.field().Value.(runtime.Direction)
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "orderBy",
		Value: runtime.Direction(param.field().Name + "_" + string(direction)),
	})
	return r
}

func (r storiesOnRaidsFindMany) Skip(count int) storiesOnRaidsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r storiesOnRaidsFindMany) Take(count int) storiesOnRaidsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r storiesOnRaidsFindMany) Cursor(cursor iStoriesOnRaidsCursorParams) storiesOnRaidsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r storiesOnRaidsFindMany) Exec(ctx context.Context) (
	[]StoriesOnRaidsModel,
	error,
) {
	var v findManyStoriesOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return []StoriesOnRaidsModel{}, fmt.Errorf(first.Message)
	}

	return v.Data.FindManyStoriesOnRaids, err
}

func (r storiesOnRaidsFindMany) Update(params ...iStoriesOnRaidsSetParams) storiesOnRaidsUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "StoriesOnRaids"
	r.query.Outputs = countOutput

	var v storiesOnRaidsUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type storiesOnRaidsUpdateMany struct {
	query builder.Query
}

func (r storiesOnRaidsUpdateMany) Exec(ctx context.Context) (int, error) {
	var v updateManyStoriesOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateManyStoriesOnRaids.Count, err
}

func (r storiesOnRaidsFindMany) Delete() storiesOnRaidsDeleteMany {
	var v storiesOnRaidsDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "StoriesOnRaids"
	v.query.Outputs = countOutput
	return v
}

type storiesOnRaidsDeleteMany struct {
	query builder.Query
}

func (r storiesOnRaidsDeleteMany) Exec(ctx context.Context) (int, error) {
	var v deleteManyStoriesOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteManyStoriesOnRaids.Count, err
}

type eventToStoryFindOne struct {
	query builder.Query
}

func (r eventToStoryFindOne) getQuery() builder.Query {
	return r.query
}

func (r eventToStoryFindOne) with()          {}
func (r eventToStoryFindOne) eventModel()    {}
func (r eventToStoryFindOne) eventRelation() {}

func (r eventToStoryFindOne) With(params ...iStoryRelationWith) eventToStoryFindOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r eventToStoryFindOne) Exec(ctx context.Context) (
	EventModel,
	error,
) {
	var v findOneEventResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return EventModel{}, fmt.Errorf(first.Message)
	}

	if v.Data.FindOneEvent == nil {
		return EventModel{}, ErrNotFound
	}

	return *v.Data.FindOneEvent, err
}

func (r eventToStoryFindOne) Update(params ...iEventSetParams) eventToStoryUpdateOne {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Event"
	r.query.Outputs = eventOutput

	var v eventToStoryUpdateOne
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type eventToStoryUpdateOne struct {
	query builder.Query
}

func (r eventToStoryUpdateOne) Exec(ctx context.Context) (EventModel, error) {
	var v updateOneEventResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return EventModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateOneEvent, err
}

func (r eventToStoryFindOne) Delete() eventToStoryDeleteOne {
	var v eventToStoryDeleteOne
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Event"
	v.query.Outputs = eventOutput
	return v
}

type eventToStoryDeleteOne struct {
	query builder.Query
}

func (r eventToStoryDeleteOne) Exec(ctx context.Context) (EventModel, error) {
	var v deleteOneEventResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return EventModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteOneEvent, err
}

type eventToStoryFindMany struct {
	query builder.Query
}

func (r eventToStoryFindMany) getQuery() builder.Query {
	return r.query
}

func (r eventToStoryFindMany) with()          {}
func (r eventToStoryFindMany) eventModel()    {}
func (r eventToStoryFindMany) eventRelation() {}

func (r eventToStoryFindMany) With(params ...iStoryRelationWith) eventToStoryFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r eventToStoryFindMany) OrderBy(param iEventOrderByParams) eventToStoryFindMany {
	direction, _ := param.field().Value.(runtime.Direction)
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "orderBy",
		Value: runtime.Direction(param.field().Name + "_" + string(direction)),
	})
	return r
}

func (r eventToStoryFindMany) Skip(count int) eventToStoryFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r eventToStoryFindMany) Take(count int) eventToStoryFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r eventToStoryFindMany) Cursor(cursor iEventCursorParams) eventToStoryFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r eventToStoryFindMany) Exec(ctx context.Context) (
	[]EventModel,
	error,
) {
	var v findManyEventResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return []EventModel{}, fmt.Errorf(first.Message)
	}

	return v.Data.FindManyEvent, err
}

func (r eventToStoryFindMany) Update(params ...iEventSetParams) eventToStoryUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Event"
	r.query.Outputs = countOutput

	var v eventToStoryUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type eventToStoryUpdateMany struct {
	query builder.Query
}

func (r eventToStoryUpdateMany) Exec(ctx context.Context) (int, error) {
	var v updateManyEventResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateManyEvent.Count, err
}

func (r eventToStoryFindMany) Delete() eventToStoryDeleteMany {
	var v eventToStoryDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Event"
	v.query.Outputs = countOutput
	return v
}

type eventToStoryDeleteMany struct {
	query builder.Query
}

func (r eventToStoryDeleteMany) Exec(ctx context.Context) (int, error) {
	var v deleteManyEventResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteManyEvent.Count, err
}

type eventToActionFindOne struct {
	query builder.Query
}

func (r eventToActionFindOne) getQuery() builder.Query {
	return r.query
}

func (r eventToActionFindOne) with()          {}
func (r eventToActionFindOne) eventModel()    {}
func (r eventToActionFindOne) eventRelation() {}

func (r eventToActionFindOne) With(params ...iActionRelationWith) eventToActionFindOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r eventToActionFindOne) Exec(ctx context.Context) (
	EventModel,
	error,
) {
	var v findOneEventResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return EventModel{}, fmt.Errorf(first.Message)
	}

	if v.Data.FindOneEvent == nil {
		return EventModel{}, ErrNotFound
	}

	return *v.Data.FindOneEvent, err
}

func (r eventToActionFindOne) Update(params ...iEventSetParams) eventToActionUpdateOne {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Event"
	r.query.Outputs = eventOutput

	var v eventToActionUpdateOne
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type eventToActionUpdateOne struct {
	query builder.Query
}

func (r eventToActionUpdateOne) Exec(ctx context.Context) (EventModel, error) {
	var v updateOneEventResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return EventModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateOneEvent, err
}

func (r eventToActionFindOne) Delete() eventToActionDeleteOne {
	var v eventToActionDeleteOne
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Event"
	v.query.Outputs = eventOutput
	return v
}

type eventToActionDeleteOne struct {
	query builder.Query
}

func (r eventToActionDeleteOne) Exec(ctx context.Context) (EventModel, error) {
	var v deleteOneEventResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return EventModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteOneEvent, err
}

type eventToActionFindMany struct {
	query builder.Query
}

func (r eventToActionFindMany) getQuery() builder.Query {
	return r.query
}

func (r eventToActionFindMany) with()          {}
func (r eventToActionFindMany) eventModel()    {}
func (r eventToActionFindMany) eventRelation() {}

func (r eventToActionFindMany) With(params ...iActionRelationWith) eventToActionFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r eventToActionFindMany) OrderBy(param iEventOrderByParams) eventToActionFindMany {
	direction, _ := param.field().Value.(runtime.Direction)
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "orderBy",
		Value: runtime.Direction(param.field().Name + "_" + string(direction)),
	})
	return r
}

func (r eventToActionFindMany) Skip(count int) eventToActionFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r eventToActionFindMany) Take(count int) eventToActionFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r eventToActionFindMany) Cursor(cursor iEventCursorParams) eventToActionFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r eventToActionFindMany) Exec(ctx context.Context) (
	[]EventModel,
	error,
) {
	var v findManyEventResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return []EventModel{}, fmt.Errorf(first.Message)
	}

	return v.Data.FindManyEvent, err
}

func (r eventToActionFindMany) Update(params ...iEventSetParams) eventToActionUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Event"
	r.query.Outputs = countOutput

	var v eventToActionUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type eventToActionUpdateMany struct {
	query builder.Query
}

func (r eventToActionUpdateMany) Exec(ctx context.Context) (int, error) {
	var v updateManyEventResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateManyEvent.Count, err
}

func (r eventToActionFindMany) Delete() eventToActionDeleteMany {
	var v eventToActionDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Event"
	v.query.Outputs = countOutput
	return v
}

type eventToActionDeleteMany struct {
	query builder.Query
}

func (r eventToActionDeleteMany) Exec(ctx context.Context) (int, error) {
	var v deleteManyEventResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteManyEvent.Count, err
}

type eventToMessagesOnEventsFindOne struct {
	query builder.Query
}

func (r eventToMessagesOnEventsFindOne) getQuery() builder.Query {
	return r.query
}

func (r eventToMessagesOnEventsFindOne) with()          {}
func (r eventToMessagesOnEventsFindOne) eventModel()    {}
func (r eventToMessagesOnEventsFindOne) eventRelation() {}

func (r eventToMessagesOnEventsFindOne) With(params ...iMessagesOnEventsRelationWith) eventToMessagesOnEventsFindOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r eventToMessagesOnEventsFindOne) Exec(ctx context.Context) (
	EventModel,
	error,
) {
	var v findOneEventResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return EventModel{}, fmt.Errorf(first.Message)
	}

	if v.Data.FindOneEvent == nil {
		return EventModel{}, ErrNotFound
	}

	return *v.Data.FindOneEvent, err
}

func (r eventToMessagesOnEventsFindOne) Update(params ...iEventSetParams) eventToMessagesOnEventsUpdateOne {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Event"
	r.query.Outputs = eventOutput

	var v eventToMessagesOnEventsUpdateOne
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type eventToMessagesOnEventsUpdateOne struct {
	query builder.Query
}

func (r eventToMessagesOnEventsUpdateOne) Exec(ctx context.Context) (EventModel, error) {
	var v updateOneEventResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return EventModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateOneEvent, err
}

func (r eventToMessagesOnEventsFindOne) Delete() eventToMessagesOnEventsDeleteOne {
	var v eventToMessagesOnEventsDeleteOne
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Event"
	v.query.Outputs = eventOutput
	return v
}

type eventToMessagesOnEventsDeleteOne struct {
	query builder.Query
}

func (r eventToMessagesOnEventsDeleteOne) Exec(ctx context.Context) (EventModel, error) {
	var v deleteOneEventResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return EventModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteOneEvent, err
}

type eventToMessagesOnEventsFindMany struct {
	query builder.Query
}

func (r eventToMessagesOnEventsFindMany) getQuery() builder.Query {
	return r.query
}

func (r eventToMessagesOnEventsFindMany) with()          {}
func (r eventToMessagesOnEventsFindMany) eventModel()    {}
func (r eventToMessagesOnEventsFindMany) eventRelation() {}

func (r eventToMessagesOnEventsFindMany) With(params ...iMessagesOnEventsRelationWith) eventToMessagesOnEventsFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r eventToMessagesOnEventsFindMany) OrderBy(param iEventOrderByParams) eventToMessagesOnEventsFindMany {
	direction, _ := param.field().Value.(runtime.Direction)
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "orderBy",
		Value: runtime.Direction(param.field().Name + "_" + string(direction)),
	})
	return r
}

func (r eventToMessagesOnEventsFindMany) Skip(count int) eventToMessagesOnEventsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r eventToMessagesOnEventsFindMany) Take(count int) eventToMessagesOnEventsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r eventToMessagesOnEventsFindMany) Cursor(cursor iEventCursorParams) eventToMessagesOnEventsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r eventToMessagesOnEventsFindMany) Exec(ctx context.Context) (
	[]EventModel,
	error,
) {
	var v findManyEventResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return []EventModel{}, fmt.Errorf(first.Message)
	}

	return v.Data.FindManyEvent, err
}

func (r eventToMessagesOnEventsFindMany) Update(params ...iEventSetParams) eventToMessagesOnEventsUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Event"
	r.query.Outputs = countOutput

	var v eventToMessagesOnEventsUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type eventToMessagesOnEventsUpdateMany struct {
	query builder.Query
}

func (r eventToMessagesOnEventsUpdateMany) Exec(ctx context.Context) (int, error) {
	var v updateManyEventResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateManyEvent.Count, err
}

func (r eventToMessagesOnEventsFindMany) Delete() eventToMessagesOnEventsDeleteMany {
	var v eventToMessagesOnEventsDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Event"
	v.query.Outputs = countOutput
	return v
}

type eventToMessagesOnEventsDeleteMany struct {
	query builder.Query
}

func (r eventToMessagesOnEventsDeleteMany) Exec(ctx context.Context) (int, error) {
	var v deleteManyEventResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteManyEvent.Count, err
}

type eventFindOne struct {
	query builder.Query
}

func (r eventFindOne) getQuery() builder.Query {
	return r.query
}

func (r eventFindOne) with()          {}
func (r eventFindOne) eventModel()    {}
func (r eventFindOne) eventRelation() {}

func (r eventActions) FindOne(

	params iEventEqualsParamsUnique,
) eventFindOne {
	var v eventFindOne
	v.query = builder.NewQuery()
	v.query.Client = r.client

	v.query.Operation = "query"
	v.query.Method = "findOne"
	v.query.Model = "Event"
	v.query.Outputs = eventOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: []builder.Field{params.field()},
	})

	return v
}

func (r eventFindOne) With(params ...iEventRelationWith) eventFindOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r eventFindOne) Exec(ctx context.Context) (
	EventModel,
	error,
) {
	var v findOneEventResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return EventModel{}, fmt.Errorf(first.Message)
	}

	if v.Data.FindOneEvent == nil {
		return EventModel{}, ErrNotFound
	}

	return *v.Data.FindOneEvent, err
}

func (r eventFindOne) Update(params ...iEventSetParams) eventUpdateOne {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Event"
	r.query.Outputs = eventOutput

	var v eventUpdateOne
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type eventUpdateOne struct {
	query builder.Query
}

func (r eventUpdateOne) Exec(ctx context.Context) (EventModel, error) {
	var v updateOneEventResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return EventModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateOneEvent, err
}

func (r eventFindOne) Delete() eventDeleteOne {
	var v eventDeleteOne
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Event"
	v.query.Outputs = eventOutput
	return v
}

type eventDeleteOne struct {
	query builder.Query
}

func (r eventDeleteOne) Exec(ctx context.Context) (EventModel, error) {
	var v deleteOneEventResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return EventModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteOneEvent, err
}

type eventFindMany struct {
	query builder.Query
}

func (r eventFindMany) getQuery() builder.Query {
	return r.query
}

func (r eventFindMany) with()          {}
func (r eventFindMany) eventModel()    {}
func (r eventFindMany) eventRelation() {}

func (r eventActions) FindMany(

	params ...iEventParams,
) eventFindMany {
	var v eventFindMany
	v.query = builder.NewQuery()
	v.query.Client = r.client

	v.query.Operation = "query"
	v.query.Method = "findMany"
	v.query.Model = "Event"
	v.query.Outputs = eventOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r eventFindMany) With(params ...iEventRelationWith) eventFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r eventFindMany) OrderBy(param iEventOrderByParams) eventFindMany {
	direction, _ := param.field().Value.(runtime.Direction)
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "orderBy",
		Value: runtime.Direction(param.field().Name + "_" + string(direction)),
	})
	return r
}

func (r eventFindMany) Skip(count int) eventFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r eventFindMany) Take(count int) eventFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r eventFindMany) Cursor(cursor iEventCursorParams) eventFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r eventFindMany) Exec(ctx context.Context) (
	[]EventModel,
	error,
) {
	var v findManyEventResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return []EventModel{}, fmt.Errorf(first.Message)
	}

	return v.Data.FindManyEvent, err
}

func (r eventFindMany) Update(params ...iEventSetParams) eventUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Event"
	r.query.Outputs = countOutput

	var v eventUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type eventUpdateMany struct {
	query builder.Query
}

func (r eventUpdateMany) Exec(ctx context.Context) (int, error) {
	var v updateManyEventResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateManyEvent.Count, err
}

func (r eventFindMany) Delete() eventDeleteMany {
	var v eventDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Event"
	v.query.Outputs = countOutput
	return v
}

type eventDeleteMany struct {
	query builder.Query
}

func (r eventDeleteMany) Exec(ctx context.Context) (int, error) {
	var v deleteManyEventResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteManyEvent.Count, err
}

type actionToEventFindOne struct {
	query builder.Query
}

func (r actionToEventFindOne) getQuery() builder.Query {
	return r.query
}

func (r actionToEventFindOne) with()           {}
func (r actionToEventFindOne) actionModel()    {}
func (r actionToEventFindOne) actionRelation() {}

func (r actionToEventFindOne) With(params ...iEventRelationWith) actionToEventFindOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r actionToEventFindOne) Exec(ctx context.Context) (
	ActionModel,
	error,
) {
	var v findOneActionResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return ActionModel{}, fmt.Errorf(first.Message)
	}

	if v.Data.FindOneAction == nil {
		return ActionModel{}, ErrNotFound
	}

	return *v.Data.FindOneAction, err
}

func (r actionToEventFindOne) Update(params ...iActionSetParams) actionToEventUpdateOne {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Action"
	r.query.Outputs = actionOutput

	var v actionToEventUpdateOne
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type actionToEventUpdateOne struct {
	query builder.Query
}

func (r actionToEventUpdateOne) Exec(ctx context.Context) (ActionModel, error) {
	var v updateOneActionResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return ActionModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateOneAction, err
}

func (r actionToEventFindOne) Delete() actionToEventDeleteOne {
	var v actionToEventDeleteOne
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Action"
	v.query.Outputs = actionOutput
	return v
}

type actionToEventDeleteOne struct {
	query builder.Query
}

func (r actionToEventDeleteOne) Exec(ctx context.Context) (ActionModel, error) {
	var v deleteOneActionResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return ActionModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteOneAction, err
}

type actionToEventFindMany struct {
	query builder.Query
}

func (r actionToEventFindMany) getQuery() builder.Query {
	return r.query
}

func (r actionToEventFindMany) with()           {}
func (r actionToEventFindMany) actionModel()    {}
func (r actionToEventFindMany) actionRelation() {}

func (r actionToEventFindMany) With(params ...iEventRelationWith) actionToEventFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r actionToEventFindMany) OrderBy(param iActionOrderByParams) actionToEventFindMany {
	direction, _ := param.field().Value.(runtime.Direction)
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "orderBy",
		Value: runtime.Direction(param.field().Name + "_" + string(direction)),
	})
	return r
}

func (r actionToEventFindMany) Skip(count int) actionToEventFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r actionToEventFindMany) Take(count int) actionToEventFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r actionToEventFindMany) Cursor(cursor iActionCursorParams) actionToEventFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r actionToEventFindMany) Exec(ctx context.Context) (
	[]ActionModel,
	error,
) {
	var v findManyActionResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return []ActionModel{}, fmt.Errorf(first.Message)
	}

	return v.Data.FindManyAction, err
}

func (r actionToEventFindMany) Update(params ...iActionSetParams) actionToEventUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Action"
	r.query.Outputs = countOutput

	var v actionToEventUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type actionToEventUpdateMany struct {
	query builder.Query
}

func (r actionToEventUpdateMany) Exec(ctx context.Context) (int, error) {
	var v updateManyActionResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateManyAction.Count, err
}

func (r actionToEventFindMany) Delete() actionToEventDeleteMany {
	var v actionToEventDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Action"
	v.query.Outputs = countOutput
	return v
}

type actionToEventDeleteMany struct {
	query builder.Query
}

func (r actionToEventDeleteMany) Exec(ctx context.Context) (int, error) {
	var v deleteManyActionResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteManyAction.Count, err
}

type actionToMessagesOnActionsFindOne struct {
	query builder.Query
}

func (r actionToMessagesOnActionsFindOne) getQuery() builder.Query {
	return r.query
}

func (r actionToMessagesOnActionsFindOne) with()           {}
func (r actionToMessagesOnActionsFindOne) actionModel()    {}
func (r actionToMessagesOnActionsFindOne) actionRelation() {}

func (r actionToMessagesOnActionsFindOne) With(params ...iMessagesOnActionsRelationWith) actionToMessagesOnActionsFindOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r actionToMessagesOnActionsFindOne) Exec(ctx context.Context) (
	ActionModel,
	error,
) {
	var v findOneActionResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return ActionModel{}, fmt.Errorf(first.Message)
	}

	if v.Data.FindOneAction == nil {
		return ActionModel{}, ErrNotFound
	}

	return *v.Data.FindOneAction, err
}

func (r actionToMessagesOnActionsFindOne) Update(params ...iActionSetParams) actionToMessagesOnActionsUpdateOne {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Action"
	r.query.Outputs = actionOutput

	var v actionToMessagesOnActionsUpdateOne
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type actionToMessagesOnActionsUpdateOne struct {
	query builder.Query
}

func (r actionToMessagesOnActionsUpdateOne) Exec(ctx context.Context) (ActionModel, error) {
	var v updateOneActionResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return ActionModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateOneAction, err
}

func (r actionToMessagesOnActionsFindOne) Delete() actionToMessagesOnActionsDeleteOne {
	var v actionToMessagesOnActionsDeleteOne
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Action"
	v.query.Outputs = actionOutput
	return v
}

type actionToMessagesOnActionsDeleteOne struct {
	query builder.Query
}

func (r actionToMessagesOnActionsDeleteOne) Exec(ctx context.Context) (ActionModel, error) {
	var v deleteOneActionResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return ActionModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteOneAction, err
}

type actionToMessagesOnActionsFindMany struct {
	query builder.Query
}

func (r actionToMessagesOnActionsFindMany) getQuery() builder.Query {
	return r.query
}

func (r actionToMessagesOnActionsFindMany) with()           {}
func (r actionToMessagesOnActionsFindMany) actionModel()    {}
func (r actionToMessagesOnActionsFindMany) actionRelation() {}

func (r actionToMessagesOnActionsFindMany) With(params ...iMessagesOnActionsRelationWith) actionToMessagesOnActionsFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r actionToMessagesOnActionsFindMany) OrderBy(param iActionOrderByParams) actionToMessagesOnActionsFindMany {
	direction, _ := param.field().Value.(runtime.Direction)
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "orderBy",
		Value: runtime.Direction(param.field().Name + "_" + string(direction)),
	})
	return r
}

func (r actionToMessagesOnActionsFindMany) Skip(count int) actionToMessagesOnActionsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r actionToMessagesOnActionsFindMany) Take(count int) actionToMessagesOnActionsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r actionToMessagesOnActionsFindMany) Cursor(cursor iActionCursorParams) actionToMessagesOnActionsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r actionToMessagesOnActionsFindMany) Exec(ctx context.Context) (
	[]ActionModel,
	error,
) {
	var v findManyActionResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return []ActionModel{}, fmt.Errorf(first.Message)
	}

	return v.Data.FindManyAction, err
}

func (r actionToMessagesOnActionsFindMany) Update(params ...iActionSetParams) actionToMessagesOnActionsUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Action"
	r.query.Outputs = countOutput

	var v actionToMessagesOnActionsUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type actionToMessagesOnActionsUpdateMany struct {
	query builder.Query
}

func (r actionToMessagesOnActionsUpdateMany) Exec(ctx context.Context) (int, error) {
	var v updateManyActionResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateManyAction.Count, err
}

func (r actionToMessagesOnActionsFindMany) Delete() actionToMessagesOnActionsDeleteMany {
	var v actionToMessagesOnActionsDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Action"
	v.query.Outputs = countOutput
	return v
}

type actionToMessagesOnActionsDeleteMany struct {
	query builder.Query
}

func (r actionToMessagesOnActionsDeleteMany) Exec(ctx context.Context) (int, error) {
	var v deleteManyActionResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteManyAction.Count, err
}

type actionFindOne struct {
	query builder.Query
}

func (r actionFindOne) getQuery() builder.Query {
	return r.query
}

func (r actionFindOne) with()           {}
func (r actionFindOne) actionModel()    {}
func (r actionFindOne) actionRelation() {}

func (r actionActions) FindOne(

	params iActionEqualsParamsUnique,
) actionFindOne {
	var v actionFindOne
	v.query = builder.NewQuery()
	v.query.Client = r.client

	v.query.Operation = "query"
	v.query.Method = "findOne"
	v.query.Model = "Action"
	v.query.Outputs = actionOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: []builder.Field{params.field()},
	})

	return v
}

func (r actionFindOne) With(params ...iActionRelationWith) actionFindOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r actionFindOne) Exec(ctx context.Context) (
	ActionModel,
	error,
) {
	var v findOneActionResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return ActionModel{}, fmt.Errorf(first.Message)
	}

	if v.Data.FindOneAction == nil {
		return ActionModel{}, ErrNotFound
	}

	return *v.Data.FindOneAction, err
}

func (r actionFindOne) Update(params ...iActionSetParams) actionUpdateOne {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Action"
	r.query.Outputs = actionOutput

	var v actionUpdateOne
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type actionUpdateOne struct {
	query builder.Query
}

func (r actionUpdateOne) Exec(ctx context.Context) (ActionModel, error) {
	var v updateOneActionResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return ActionModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateOneAction, err
}

func (r actionFindOne) Delete() actionDeleteOne {
	var v actionDeleteOne
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Action"
	v.query.Outputs = actionOutput
	return v
}

type actionDeleteOne struct {
	query builder.Query
}

func (r actionDeleteOne) Exec(ctx context.Context) (ActionModel, error) {
	var v deleteOneActionResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return ActionModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteOneAction, err
}

type actionFindMany struct {
	query builder.Query
}

func (r actionFindMany) getQuery() builder.Query {
	return r.query
}

func (r actionFindMany) with()           {}
func (r actionFindMany) actionModel()    {}
func (r actionFindMany) actionRelation() {}

func (r actionActions) FindMany(

	params ...iActionParams,
) actionFindMany {
	var v actionFindMany
	v.query = builder.NewQuery()
	v.query.Client = r.client

	v.query.Operation = "query"
	v.query.Method = "findMany"
	v.query.Model = "Action"
	v.query.Outputs = actionOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r actionFindMany) With(params ...iActionRelationWith) actionFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r actionFindMany) OrderBy(param iActionOrderByParams) actionFindMany {
	direction, _ := param.field().Value.(runtime.Direction)
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "orderBy",
		Value: runtime.Direction(param.field().Name + "_" + string(direction)),
	})
	return r
}

func (r actionFindMany) Skip(count int) actionFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r actionFindMany) Take(count int) actionFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r actionFindMany) Cursor(cursor iActionCursorParams) actionFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r actionFindMany) Exec(ctx context.Context) (
	[]ActionModel,
	error,
) {
	var v findManyActionResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return []ActionModel{}, fmt.Errorf(first.Message)
	}

	return v.Data.FindManyAction, err
}

func (r actionFindMany) Update(params ...iActionSetParams) actionUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Action"
	r.query.Outputs = countOutput

	var v actionUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type actionUpdateMany struct {
	query builder.Query
}

func (r actionUpdateMany) Exec(ctx context.Context) (int, error) {
	var v updateManyActionResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateManyAction.Count, err
}

func (r actionFindMany) Delete() actionDeleteMany {
	var v actionDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Action"
	v.query.Outputs = countOutput
	return v
}

type actionDeleteMany struct {
	query builder.Query
}

func (r actionDeleteMany) Exec(ctx context.Context) (int, error) {
	var v deleteManyActionResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteManyAction.Count, err
}

type messageToMessagesOnActionsFindOne struct {
	query builder.Query
}

func (r messageToMessagesOnActionsFindOne) getQuery() builder.Query {
	return r.query
}

func (r messageToMessagesOnActionsFindOne) with()            {}
func (r messageToMessagesOnActionsFindOne) messageModel()    {}
func (r messageToMessagesOnActionsFindOne) messageRelation() {}

func (r messageToMessagesOnActionsFindOne) With(params ...iMessagesOnActionsRelationWith) messageToMessagesOnActionsFindOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r messageToMessagesOnActionsFindOne) Exec(ctx context.Context) (
	MessageModel,
	error,
) {
	var v findOneMessageResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return MessageModel{}, fmt.Errorf(first.Message)
	}

	if v.Data.FindOneMessage == nil {
		return MessageModel{}, ErrNotFound
	}

	return *v.Data.FindOneMessage, err
}

func (r messageToMessagesOnActionsFindOne) Update(params ...iMessageSetParams) messageToMessagesOnActionsUpdateOne {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Message"
	r.query.Outputs = messageOutput

	var v messageToMessagesOnActionsUpdateOne
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type messageToMessagesOnActionsUpdateOne struct {
	query builder.Query
}

func (r messageToMessagesOnActionsUpdateOne) Exec(ctx context.Context) (MessageModel, error) {
	var v updateOneMessageResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return MessageModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateOneMessage, err
}

func (r messageToMessagesOnActionsFindOne) Delete() messageToMessagesOnActionsDeleteOne {
	var v messageToMessagesOnActionsDeleteOne
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Message"
	v.query.Outputs = messageOutput
	return v
}

type messageToMessagesOnActionsDeleteOne struct {
	query builder.Query
}

func (r messageToMessagesOnActionsDeleteOne) Exec(ctx context.Context) (MessageModel, error) {
	var v deleteOneMessageResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return MessageModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteOneMessage, err
}

type messageToMessagesOnActionsFindMany struct {
	query builder.Query
}

func (r messageToMessagesOnActionsFindMany) getQuery() builder.Query {
	return r.query
}

func (r messageToMessagesOnActionsFindMany) with()            {}
func (r messageToMessagesOnActionsFindMany) messageModel()    {}
func (r messageToMessagesOnActionsFindMany) messageRelation() {}

func (r messageToMessagesOnActionsFindMany) With(params ...iMessagesOnActionsRelationWith) messageToMessagesOnActionsFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r messageToMessagesOnActionsFindMany) OrderBy(param iMessageOrderByParams) messageToMessagesOnActionsFindMany {
	direction, _ := param.field().Value.(runtime.Direction)
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "orderBy",
		Value: runtime.Direction(param.field().Name + "_" + string(direction)),
	})
	return r
}

func (r messageToMessagesOnActionsFindMany) Skip(count int) messageToMessagesOnActionsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r messageToMessagesOnActionsFindMany) Take(count int) messageToMessagesOnActionsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r messageToMessagesOnActionsFindMany) Cursor(cursor iMessageCursorParams) messageToMessagesOnActionsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r messageToMessagesOnActionsFindMany) Exec(ctx context.Context) (
	[]MessageModel,
	error,
) {
	var v findManyMessageResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return []MessageModel{}, fmt.Errorf(first.Message)
	}

	return v.Data.FindManyMessage, err
}

func (r messageToMessagesOnActionsFindMany) Update(params ...iMessageSetParams) messageToMessagesOnActionsUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Message"
	r.query.Outputs = countOutput

	var v messageToMessagesOnActionsUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type messageToMessagesOnActionsUpdateMany struct {
	query builder.Query
}

func (r messageToMessagesOnActionsUpdateMany) Exec(ctx context.Context) (int, error) {
	var v updateManyMessageResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateManyMessage.Count, err
}

func (r messageToMessagesOnActionsFindMany) Delete() messageToMessagesOnActionsDeleteMany {
	var v messageToMessagesOnActionsDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Message"
	v.query.Outputs = countOutput
	return v
}

type messageToMessagesOnActionsDeleteMany struct {
	query builder.Query
}

func (r messageToMessagesOnActionsDeleteMany) Exec(ctx context.Context) (int, error) {
	var v deleteManyMessageResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteManyMessage.Count, err
}

type messageToMessagesOnEventsFindOne struct {
	query builder.Query
}

func (r messageToMessagesOnEventsFindOne) getQuery() builder.Query {
	return r.query
}

func (r messageToMessagesOnEventsFindOne) with()            {}
func (r messageToMessagesOnEventsFindOne) messageModel()    {}
func (r messageToMessagesOnEventsFindOne) messageRelation() {}

func (r messageToMessagesOnEventsFindOne) With(params ...iMessagesOnEventsRelationWith) messageToMessagesOnEventsFindOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r messageToMessagesOnEventsFindOne) Exec(ctx context.Context) (
	MessageModel,
	error,
) {
	var v findOneMessageResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return MessageModel{}, fmt.Errorf(first.Message)
	}

	if v.Data.FindOneMessage == nil {
		return MessageModel{}, ErrNotFound
	}

	return *v.Data.FindOneMessage, err
}

func (r messageToMessagesOnEventsFindOne) Update(params ...iMessageSetParams) messageToMessagesOnEventsUpdateOne {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Message"
	r.query.Outputs = messageOutput

	var v messageToMessagesOnEventsUpdateOne
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type messageToMessagesOnEventsUpdateOne struct {
	query builder.Query
}

func (r messageToMessagesOnEventsUpdateOne) Exec(ctx context.Context) (MessageModel, error) {
	var v updateOneMessageResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return MessageModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateOneMessage, err
}

func (r messageToMessagesOnEventsFindOne) Delete() messageToMessagesOnEventsDeleteOne {
	var v messageToMessagesOnEventsDeleteOne
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Message"
	v.query.Outputs = messageOutput
	return v
}

type messageToMessagesOnEventsDeleteOne struct {
	query builder.Query
}

func (r messageToMessagesOnEventsDeleteOne) Exec(ctx context.Context) (MessageModel, error) {
	var v deleteOneMessageResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return MessageModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteOneMessage, err
}

type messageToMessagesOnEventsFindMany struct {
	query builder.Query
}

func (r messageToMessagesOnEventsFindMany) getQuery() builder.Query {
	return r.query
}

func (r messageToMessagesOnEventsFindMany) with()            {}
func (r messageToMessagesOnEventsFindMany) messageModel()    {}
func (r messageToMessagesOnEventsFindMany) messageRelation() {}

func (r messageToMessagesOnEventsFindMany) With(params ...iMessagesOnEventsRelationWith) messageToMessagesOnEventsFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r messageToMessagesOnEventsFindMany) OrderBy(param iMessageOrderByParams) messageToMessagesOnEventsFindMany {
	direction, _ := param.field().Value.(runtime.Direction)
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "orderBy",
		Value: runtime.Direction(param.field().Name + "_" + string(direction)),
	})
	return r
}

func (r messageToMessagesOnEventsFindMany) Skip(count int) messageToMessagesOnEventsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r messageToMessagesOnEventsFindMany) Take(count int) messageToMessagesOnEventsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r messageToMessagesOnEventsFindMany) Cursor(cursor iMessageCursorParams) messageToMessagesOnEventsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r messageToMessagesOnEventsFindMany) Exec(ctx context.Context) (
	[]MessageModel,
	error,
) {
	var v findManyMessageResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return []MessageModel{}, fmt.Errorf(first.Message)
	}

	return v.Data.FindManyMessage, err
}

func (r messageToMessagesOnEventsFindMany) Update(params ...iMessageSetParams) messageToMessagesOnEventsUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Message"
	r.query.Outputs = countOutput

	var v messageToMessagesOnEventsUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type messageToMessagesOnEventsUpdateMany struct {
	query builder.Query
}

func (r messageToMessagesOnEventsUpdateMany) Exec(ctx context.Context) (int, error) {
	var v updateManyMessageResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateManyMessage.Count, err
}

func (r messageToMessagesOnEventsFindMany) Delete() messageToMessagesOnEventsDeleteMany {
	var v messageToMessagesOnEventsDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Message"
	v.query.Outputs = countOutput
	return v
}

type messageToMessagesOnEventsDeleteMany struct {
	query builder.Query
}

func (r messageToMessagesOnEventsDeleteMany) Exec(ctx context.Context) (int, error) {
	var v deleteManyMessageResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteManyMessage.Count, err
}

type messageFindOne struct {
	query builder.Query
}

func (r messageFindOne) getQuery() builder.Query {
	return r.query
}

func (r messageFindOne) with()            {}
func (r messageFindOne) messageModel()    {}
func (r messageFindOne) messageRelation() {}

func (r messageActions) FindOne(

	params iMessageEqualsParamsUnique,
) messageFindOne {
	var v messageFindOne
	v.query = builder.NewQuery()
	v.query.Client = r.client

	v.query.Operation = "query"
	v.query.Method = "findOne"
	v.query.Model = "Message"
	v.query.Outputs = messageOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: []builder.Field{params.field()},
	})

	return v
}

func (r messageFindOne) With(params ...iMessageRelationWith) messageFindOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r messageFindOne) Exec(ctx context.Context) (
	MessageModel,
	error,
) {
	var v findOneMessageResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return MessageModel{}, fmt.Errorf(first.Message)
	}

	if v.Data.FindOneMessage == nil {
		return MessageModel{}, ErrNotFound
	}

	return *v.Data.FindOneMessage, err
}

func (r messageFindOne) Update(params ...iMessageSetParams) messageUpdateOne {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Message"
	r.query.Outputs = messageOutput

	var v messageUpdateOne
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type messageUpdateOne struct {
	query builder.Query
}

func (r messageUpdateOne) Exec(ctx context.Context) (MessageModel, error) {
	var v updateOneMessageResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return MessageModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateOneMessage, err
}

func (r messageFindOne) Delete() messageDeleteOne {
	var v messageDeleteOne
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Message"
	v.query.Outputs = messageOutput
	return v
}

type messageDeleteOne struct {
	query builder.Query
}

func (r messageDeleteOne) Exec(ctx context.Context) (MessageModel, error) {
	var v deleteOneMessageResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return MessageModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteOneMessage, err
}

type messageFindMany struct {
	query builder.Query
}

func (r messageFindMany) getQuery() builder.Query {
	return r.query
}

func (r messageFindMany) with()            {}
func (r messageFindMany) messageModel()    {}
func (r messageFindMany) messageRelation() {}

func (r messageActions) FindMany(

	params ...iMessageParams,
) messageFindMany {
	var v messageFindMany
	v.query = builder.NewQuery()
	v.query.Client = r.client

	v.query.Operation = "query"
	v.query.Method = "findMany"
	v.query.Model = "Message"
	v.query.Outputs = messageOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r messageFindMany) With(params ...iMessageRelationWith) messageFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r messageFindMany) OrderBy(param iMessageOrderByParams) messageFindMany {
	direction, _ := param.field().Value.(runtime.Direction)
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "orderBy",
		Value: runtime.Direction(param.field().Name + "_" + string(direction)),
	})
	return r
}

func (r messageFindMany) Skip(count int) messageFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r messageFindMany) Take(count int) messageFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r messageFindMany) Cursor(cursor iMessageCursorParams) messageFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r messageFindMany) Exec(ctx context.Context) (
	[]MessageModel,
	error,
) {
	var v findManyMessageResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return []MessageModel{}, fmt.Errorf(first.Message)
	}

	return v.Data.FindManyMessage, err
}

func (r messageFindMany) Update(params ...iMessageSetParams) messageUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Message"
	r.query.Outputs = countOutput

	var v messageUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type messageUpdateMany struct {
	query builder.Query
}

func (r messageUpdateMany) Exec(ctx context.Context) (int, error) {
	var v updateManyMessageResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateManyMessage.Count, err
}

func (r messageFindMany) Delete() messageDeleteMany {
	var v messageDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Message"
	v.query.Outputs = countOutput
	return v
}

type messageDeleteMany struct {
	query builder.Query
}

func (r messageDeleteMany) Exec(ctx context.Context) (int, error) {
	var v deleteManyMessageResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteManyMessage.Count, err
}

type messagesOnActionsToMessageFindOne struct {
	query builder.Query
}

func (r messagesOnActionsToMessageFindOne) getQuery() builder.Query {
	return r.query
}

func (r messagesOnActionsToMessageFindOne) with()                      {}
func (r messagesOnActionsToMessageFindOne) messagesOnActionsModel()    {}
func (r messagesOnActionsToMessageFindOne) messagesOnActionsRelation() {}

func (r messagesOnActionsToMessageFindOne) With(params ...iMessageRelationWith) messagesOnActionsToMessageFindOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r messagesOnActionsToMessageFindOne) Exec(ctx context.Context) (
	MessagesOnActionsModel,
	error,
) {
	var v findOneMessagesOnActionsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return MessagesOnActionsModel{}, fmt.Errorf(first.Message)
	}

	if v.Data.FindOneMessagesOnActions == nil {
		return MessagesOnActionsModel{}, ErrNotFound
	}

	return *v.Data.FindOneMessagesOnActions, err
}

func (r messagesOnActionsToMessageFindOne) Update(params ...iMessagesOnActionsSetParams) messagesOnActionsToMessageUpdateOne {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "MessagesOnActions"
	r.query.Outputs = messagesOnActionsOutput

	var v messagesOnActionsToMessageUpdateOne
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type messagesOnActionsToMessageUpdateOne struct {
	query builder.Query
}

func (r messagesOnActionsToMessageUpdateOne) Exec(ctx context.Context) (MessagesOnActionsModel, error) {
	var v updateOneMessagesOnActionsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return MessagesOnActionsModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateOneMessagesOnActions, err
}

func (r messagesOnActionsToMessageFindOne) Delete() messagesOnActionsToMessageDeleteOne {
	var v messagesOnActionsToMessageDeleteOne
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "MessagesOnActions"
	v.query.Outputs = messagesOnActionsOutput
	return v
}

type messagesOnActionsToMessageDeleteOne struct {
	query builder.Query
}

func (r messagesOnActionsToMessageDeleteOne) Exec(ctx context.Context) (MessagesOnActionsModel, error) {
	var v deleteOneMessagesOnActionsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return MessagesOnActionsModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteOneMessagesOnActions, err
}

type messagesOnActionsToMessageFindMany struct {
	query builder.Query
}

func (r messagesOnActionsToMessageFindMany) getQuery() builder.Query {
	return r.query
}

func (r messagesOnActionsToMessageFindMany) with()                      {}
func (r messagesOnActionsToMessageFindMany) messagesOnActionsModel()    {}
func (r messagesOnActionsToMessageFindMany) messagesOnActionsRelation() {}

func (r messagesOnActionsToMessageFindMany) With(params ...iMessageRelationWith) messagesOnActionsToMessageFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r messagesOnActionsToMessageFindMany) OrderBy(param iMessagesOnActionsOrderByParams) messagesOnActionsToMessageFindMany {
	direction, _ := param.field().Value.(runtime.Direction)
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "orderBy",
		Value: runtime.Direction(param.field().Name + "_" + string(direction)),
	})
	return r
}

func (r messagesOnActionsToMessageFindMany) Skip(count int) messagesOnActionsToMessageFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r messagesOnActionsToMessageFindMany) Take(count int) messagesOnActionsToMessageFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r messagesOnActionsToMessageFindMany) Cursor(cursor iMessagesOnActionsCursorParams) messagesOnActionsToMessageFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r messagesOnActionsToMessageFindMany) Exec(ctx context.Context) (
	[]MessagesOnActionsModel,
	error,
) {
	var v findManyMessagesOnActionsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return []MessagesOnActionsModel{}, fmt.Errorf(first.Message)
	}

	return v.Data.FindManyMessagesOnActions, err
}

func (r messagesOnActionsToMessageFindMany) Update(params ...iMessagesOnActionsSetParams) messagesOnActionsToMessageUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "MessagesOnActions"
	r.query.Outputs = countOutput

	var v messagesOnActionsToMessageUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type messagesOnActionsToMessageUpdateMany struct {
	query builder.Query
}

func (r messagesOnActionsToMessageUpdateMany) Exec(ctx context.Context) (int, error) {
	var v updateManyMessagesOnActionsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateManyMessagesOnActions.Count, err
}

func (r messagesOnActionsToMessageFindMany) Delete() messagesOnActionsToMessageDeleteMany {
	var v messagesOnActionsToMessageDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "MessagesOnActions"
	v.query.Outputs = countOutput
	return v
}

type messagesOnActionsToMessageDeleteMany struct {
	query builder.Query
}

func (r messagesOnActionsToMessageDeleteMany) Exec(ctx context.Context) (int, error) {
	var v deleteManyMessagesOnActionsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteManyMessagesOnActions.Count, err
}

type messagesOnActionsToActionFindOne struct {
	query builder.Query
}

func (r messagesOnActionsToActionFindOne) getQuery() builder.Query {
	return r.query
}

func (r messagesOnActionsToActionFindOne) with()                      {}
func (r messagesOnActionsToActionFindOne) messagesOnActionsModel()    {}
func (r messagesOnActionsToActionFindOne) messagesOnActionsRelation() {}

func (r messagesOnActionsToActionFindOne) With(params ...iActionRelationWith) messagesOnActionsToActionFindOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r messagesOnActionsToActionFindOne) Exec(ctx context.Context) (
	MessagesOnActionsModel,
	error,
) {
	var v findOneMessagesOnActionsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return MessagesOnActionsModel{}, fmt.Errorf(first.Message)
	}

	if v.Data.FindOneMessagesOnActions == nil {
		return MessagesOnActionsModel{}, ErrNotFound
	}

	return *v.Data.FindOneMessagesOnActions, err
}

func (r messagesOnActionsToActionFindOne) Update(params ...iMessagesOnActionsSetParams) messagesOnActionsToActionUpdateOne {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "MessagesOnActions"
	r.query.Outputs = messagesOnActionsOutput

	var v messagesOnActionsToActionUpdateOne
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type messagesOnActionsToActionUpdateOne struct {
	query builder.Query
}

func (r messagesOnActionsToActionUpdateOne) Exec(ctx context.Context) (MessagesOnActionsModel, error) {
	var v updateOneMessagesOnActionsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return MessagesOnActionsModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateOneMessagesOnActions, err
}

func (r messagesOnActionsToActionFindOne) Delete() messagesOnActionsToActionDeleteOne {
	var v messagesOnActionsToActionDeleteOne
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "MessagesOnActions"
	v.query.Outputs = messagesOnActionsOutput
	return v
}

type messagesOnActionsToActionDeleteOne struct {
	query builder.Query
}

func (r messagesOnActionsToActionDeleteOne) Exec(ctx context.Context) (MessagesOnActionsModel, error) {
	var v deleteOneMessagesOnActionsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return MessagesOnActionsModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteOneMessagesOnActions, err
}

type messagesOnActionsToActionFindMany struct {
	query builder.Query
}

func (r messagesOnActionsToActionFindMany) getQuery() builder.Query {
	return r.query
}

func (r messagesOnActionsToActionFindMany) with()                      {}
func (r messagesOnActionsToActionFindMany) messagesOnActionsModel()    {}
func (r messagesOnActionsToActionFindMany) messagesOnActionsRelation() {}

func (r messagesOnActionsToActionFindMany) With(params ...iActionRelationWith) messagesOnActionsToActionFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r messagesOnActionsToActionFindMany) OrderBy(param iMessagesOnActionsOrderByParams) messagesOnActionsToActionFindMany {
	direction, _ := param.field().Value.(runtime.Direction)
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "orderBy",
		Value: runtime.Direction(param.field().Name + "_" + string(direction)),
	})
	return r
}

func (r messagesOnActionsToActionFindMany) Skip(count int) messagesOnActionsToActionFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r messagesOnActionsToActionFindMany) Take(count int) messagesOnActionsToActionFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r messagesOnActionsToActionFindMany) Cursor(cursor iMessagesOnActionsCursorParams) messagesOnActionsToActionFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r messagesOnActionsToActionFindMany) Exec(ctx context.Context) (
	[]MessagesOnActionsModel,
	error,
) {
	var v findManyMessagesOnActionsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return []MessagesOnActionsModel{}, fmt.Errorf(first.Message)
	}

	return v.Data.FindManyMessagesOnActions, err
}

func (r messagesOnActionsToActionFindMany) Update(params ...iMessagesOnActionsSetParams) messagesOnActionsToActionUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "MessagesOnActions"
	r.query.Outputs = countOutput

	var v messagesOnActionsToActionUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type messagesOnActionsToActionUpdateMany struct {
	query builder.Query
}

func (r messagesOnActionsToActionUpdateMany) Exec(ctx context.Context) (int, error) {
	var v updateManyMessagesOnActionsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateManyMessagesOnActions.Count, err
}

func (r messagesOnActionsToActionFindMany) Delete() messagesOnActionsToActionDeleteMany {
	var v messagesOnActionsToActionDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "MessagesOnActions"
	v.query.Outputs = countOutput
	return v
}

type messagesOnActionsToActionDeleteMany struct {
	query builder.Query
}

func (r messagesOnActionsToActionDeleteMany) Exec(ctx context.Context) (int, error) {
	var v deleteManyMessagesOnActionsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteManyMessagesOnActions.Count, err
}

type messagesOnActionsFindOne struct {
	query builder.Query
}

func (r messagesOnActionsFindOne) getQuery() builder.Query {
	return r.query
}

func (r messagesOnActionsFindOne) with()                      {}
func (r messagesOnActionsFindOne) messagesOnActionsModel()    {}
func (r messagesOnActionsFindOne) messagesOnActionsRelation() {}

func (r messagesOnActionsActions) FindOne(

	params iMessagesOnActionsEqualsParamsUnique,
) messagesOnActionsFindOne {
	var v messagesOnActionsFindOne
	v.query = builder.NewQuery()
	v.query.Client = r.client

	v.query.Operation = "query"
	v.query.Method = "findOne"
	v.query.Model = "MessagesOnActions"
	v.query.Outputs = messagesOnActionsOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: []builder.Field{params.field()},
	})

	return v
}

func (r messagesOnActionsFindOne) With(params ...iMessagesOnActionsRelationWith) messagesOnActionsFindOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r messagesOnActionsFindOne) Exec(ctx context.Context) (
	MessagesOnActionsModel,
	error,
) {
	var v findOneMessagesOnActionsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return MessagesOnActionsModel{}, fmt.Errorf(first.Message)
	}

	if v.Data.FindOneMessagesOnActions == nil {
		return MessagesOnActionsModel{}, ErrNotFound
	}

	return *v.Data.FindOneMessagesOnActions, err
}

func (r messagesOnActionsFindOne) Update(params ...iMessagesOnActionsSetParams) messagesOnActionsUpdateOne {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "MessagesOnActions"
	r.query.Outputs = messagesOnActionsOutput

	var v messagesOnActionsUpdateOne
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type messagesOnActionsUpdateOne struct {
	query builder.Query
}

func (r messagesOnActionsUpdateOne) Exec(ctx context.Context) (MessagesOnActionsModel, error) {
	var v updateOneMessagesOnActionsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return MessagesOnActionsModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateOneMessagesOnActions, err
}

func (r messagesOnActionsFindOne) Delete() messagesOnActionsDeleteOne {
	var v messagesOnActionsDeleteOne
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "MessagesOnActions"
	v.query.Outputs = messagesOnActionsOutput
	return v
}

type messagesOnActionsDeleteOne struct {
	query builder.Query
}

func (r messagesOnActionsDeleteOne) Exec(ctx context.Context) (MessagesOnActionsModel, error) {
	var v deleteOneMessagesOnActionsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return MessagesOnActionsModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteOneMessagesOnActions, err
}

type messagesOnActionsFindMany struct {
	query builder.Query
}

func (r messagesOnActionsFindMany) getQuery() builder.Query {
	return r.query
}

func (r messagesOnActionsFindMany) with()                      {}
func (r messagesOnActionsFindMany) messagesOnActionsModel()    {}
func (r messagesOnActionsFindMany) messagesOnActionsRelation() {}

func (r messagesOnActionsActions) FindMany(

	params ...iMessagesOnActionsParams,
) messagesOnActionsFindMany {
	var v messagesOnActionsFindMany
	v.query = builder.NewQuery()
	v.query.Client = r.client

	v.query.Operation = "query"
	v.query.Method = "findMany"
	v.query.Model = "MessagesOnActions"
	v.query.Outputs = messagesOnActionsOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r messagesOnActionsFindMany) With(params ...iMessagesOnActionsRelationWith) messagesOnActionsFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r messagesOnActionsFindMany) OrderBy(param iMessagesOnActionsOrderByParams) messagesOnActionsFindMany {
	direction, _ := param.field().Value.(runtime.Direction)
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "orderBy",
		Value: runtime.Direction(param.field().Name + "_" + string(direction)),
	})
	return r
}

func (r messagesOnActionsFindMany) Skip(count int) messagesOnActionsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r messagesOnActionsFindMany) Take(count int) messagesOnActionsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r messagesOnActionsFindMany) Cursor(cursor iMessagesOnActionsCursorParams) messagesOnActionsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r messagesOnActionsFindMany) Exec(ctx context.Context) (
	[]MessagesOnActionsModel,
	error,
) {
	var v findManyMessagesOnActionsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return []MessagesOnActionsModel{}, fmt.Errorf(first.Message)
	}

	return v.Data.FindManyMessagesOnActions, err
}

func (r messagesOnActionsFindMany) Update(params ...iMessagesOnActionsSetParams) messagesOnActionsUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "MessagesOnActions"
	r.query.Outputs = countOutput

	var v messagesOnActionsUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type messagesOnActionsUpdateMany struct {
	query builder.Query
}

func (r messagesOnActionsUpdateMany) Exec(ctx context.Context) (int, error) {
	var v updateManyMessagesOnActionsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateManyMessagesOnActions.Count, err
}

func (r messagesOnActionsFindMany) Delete() messagesOnActionsDeleteMany {
	var v messagesOnActionsDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "MessagesOnActions"
	v.query.Outputs = countOutput
	return v
}

type messagesOnActionsDeleteMany struct {
	query builder.Query
}

func (r messagesOnActionsDeleteMany) Exec(ctx context.Context) (int, error) {
	var v deleteManyMessagesOnActionsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteManyMessagesOnActions.Count, err
}

type messagesOnEventsToMessageFindOne struct {
	query builder.Query
}

func (r messagesOnEventsToMessageFindOne) getQuery() builder.Query {
	return r.query
}

func (r messagesOnEventsToMessageFindOne) with()                     {}
func (r messagesOnEventsToMessageFindOne) messagesOnEventsModel()    {}
func (r messagesOnEventsToMessageFindOne) messagesOnEventsRelation() {}

func (r messagesOnEventsToMessageFindOne) With(params ...iMessageRelationWith) messagesOnEventsToMessageFindOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r messagesOnEventsToMessageFindOne) Exec(ctx context.Context) (
	MessagesOnEventsModel,
	error,
) {
	var v findOneMessagesOnEventsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return MessagesOnEventsModel{}, fmt.Errorf(first.Message)
	}

	if v.Data.FindOneMessagesOnEvents == nil {
		return MessagesOnEventsModel{}, ErrNotFound
	}

	return *v.Data.FindOneMessagesOnEvents, err
}

func (r messagesOnEventsToMessageFindOne) Update(params ...iMessagesOnEventsSetParams) messagesOnEventsToMessageUpdateOne {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "MessagesOnEvents"
	r.query.Outputs = messagesOnEventsOutput

	var v messagesOnEventsToMessageUpdateOne
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type messagesOnEventsToMessageUpdateOne struct {
	query builder.Query
}

func (r messagesOnEventsToMessageUpdateOne) Exec(ctx context.Context) (MessagesOnEventsModel, error) {
	var v updateOneMessagesOnEventsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return MessagesOnEventsModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateOneMessagesOnEvents, err
}

func (r messagesOnEventsToMessageFindOne) Delete() messagesOnEventsToMessageDeleteOne {
	var v messagesOnEventsToMessageDeleteOne
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "MessagesOnEvents"
	v.query.Outputs = messagesOnEventsOutput
	return v
}

type messagesOnEventsToMessageDeleteOne struct {
	query builder.Query
}

func (r messagesOnEventsToMessageDeleteOne) Exec(ctx context.Context) (MessagesOnEventsModel, error) {
	var v deleteOneMessagesOnEventsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return MessagesOnEventsModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteOneMessagesOnEvents, err
}

type messagesOnEventsToMessageFindMany struct {
	query builder.Query
}

func (r messagesOnEventsToMessageFindMany) getQuery() builder.Query {
	return r.query
}

func (r messagesOnEventsToMessageFindMany) with()                     {}
func (r messagesOnEventsToMessageFindMany) messagesOnEventsModel()    {}
func (r messagesOnEventsToMessageFindMany) messagesOnEventsRelation() {}

func (r messagesOnEventsToMessageFindMany) With(params ...iMessageRelationWith) messagesOnEventsToMessageFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r messagesOnEventsToMessageFindMany) OrderBy(param iMessagesOnEventsOrderByParams) messagesOnEventsToMessageFindMany {
	direction, _ := param.field().Value.(runtime.Direction)
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "orderBy",
		Value: runtime.Direction(param.field().Name + "_" + string(direction)),
	})
	return r
}

func (r messagesOnEventsToMessageFindMany) Skip(count int) messagesOnEventsToMessageFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r messagesOnEventsToMessageFindMany) Take(count int) messagesOnEventsToMessageFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r messagesOnEventsToMessageFindMany) Cursor(cursor iMessagesOnEventsCursorParams) messagesOnEventsToMessageFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r messagesOnEventsToMessageFindMany) Exec(ctx context.Context) (
	[]MessagesOnEventsModel,
	error,
) {
	var v findManyMessagesOnEventsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return []MessagesOnEventsModel{}, fmt.Errorf(first.Message)
	}

	return v.Data.FindManyMessagesOnEvents, err
}

func (r messagesOnEventsToMessageFindMany) Update(params ...iMessagesOnEventsSetParams) messagesOnEventsToMessageUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "MessagesOnEvents"
	r.query.Outputs = countOutput

	var v messagesOnEventsToMessageUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type messagesOnEventsToMessageUpdateMany struct {
	query builder.Query
}

func (r messagesOnEventsToMessageUpdateMany) Exec(ctx context.Context) (int, error) {
	var v updateManyMessagesOnEventsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateManyMessagesOnEvents.Count, err
}

func (r messagesOnEventsToMessageFindMany) Delete() messagesOnEventsToMessageDeleteMany {
	var v messagesOnEventsToMessageDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "MessagesOnEvents"
	v.query.Outputs = countOutput
	return v
}

type messagesOnEventsToMessageDeleteMany struct {
	query builder.Query
}

func (r messagesOnEventsToMessageDeleteMany) Exec(ctx context.Context) (int, error) {
	var v deleteManyMessagesOnEventsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteManyMessagesOnEvents.Count, err
}

type messagesOnEventsToEventFindOne struct {
	query builder.Query
}

func (r messagesOnEventsToEventFindOne) getQuery() builder.Query {
	return r.query
}

func (r messagesOnEventsToEventFindOne) with()                     {}
func (r messagesOnEventsToEventFindOne) messagesOnEventsModel()    {}
func (r messagesOnEventsToEventFindOne) messagesOnEventsRelation() {}

func (r messagesOnEventsToEventFindOne) With(params ...iEventRelationWith) messagesOnEventsToEventFindOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r messagesOnEventsToEventFindOne) Exec(ctx context.Context) (
	MessagesOnEventsModel,
	error,
) {
	var v findOneMessagesOnEventsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return MessagesOnEventsModel{}, fmt.Errorf(first.Message)
	}

	if v.Data.FindOneMessagesOnEvents == nil {
		return MessagesOnEventsModel{}, ErrNotFound
	}

	return *v.Data.FindOneMessagesOnEvents, err
}

func (r messagesOnEventsToEventFindOne) Update(params ...iMessagesOnEventsSetParams) messagesOnEventsToEventUpdateOne {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "MessagesOnEvents"
	r.query.Outputs = messagesOnEventsOutput

	var v messagesOnEventsToEventUpdateOne
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type messagesOnEventsToEventUpdateOne struct {
	query builder.Query
}

func (r messagesOnEventsToEventUpdateOne) Exec(ctx context.Context) (MessagesOnEventsModel, error) {
	var v updateOneMessagesOnEventsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return MessagesOnEventsModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateOneMessagesOnEvents, err
}

func (r messagesOnEventsToEventFindOne) Delete() messagesOnEventsToEventDeleteOne {
	var v messagesOnEventsToEventDeleteOne
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "MessagesOnEvents"
	v.query.Outputs = messagesOnEventsOutput
	return v
}

type messagesOnEventsToEventDeleteOne struct {
	query builder.Query
}

func (r messagesOnEventsToEventDeleteOne) Exec(ctx context.Context) (MessagesOnEventsModel, error) {
	var v deleteOneMessagesOnEventsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return MessagesOnEventsModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteOneMessagesOnEvents, err
}

type messagesOnEventsToEventFindMany struct {
	query builder.Query
}

func (r messagesOnEventsToEventFindMany) getQuery() builder.Query {
	return r.query
}

func (r messagesOnEventsToEventFindMany) with()                     {}
func (r messagesOnEventsToEventFindMany) messagesOnEventsModel()    {}
func (r messagesOnEventsToEventFindMany) messagesOnEventsRelation() {}

func (r messagesOnEventsToEventFindMany) With(params ...iEventRelationWith) messagesOnEventsToEventFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r messagesOnEventsToEventFindMany) OrderBy(param iMessagesOnEventsOrderByParams) messagesOnEventsToEventFindMany {
	direction, _ := param.field().Value.(runtime.Direction)
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "orderBy",
		Value: runtime.Direction(param.field().Name + "_" + string(direction)),
	})
	return r
}

func (r messagesOnEventsToEventFindMany) Skip(count int) messagesOnEventsToEventFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r messagesOnEventsToEventFindMany) Take(count int) messagesOnEventsToEventFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r messagesOnEventsToEventFindMany) Cursor(cursor iMessagesOnEventsCursorParams) messagesOnEventsToEventFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r messagesOnEventsToEventFindMany) Exec(ctx context.Context) (
	[]MessagesOnEventsModel,
	error,
) {
	var v findManyMessagesOnEventsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return []MessagesOnEventsModel{}, fmt.Errorf(first.Message)
	}

	return v.Data.FindManyMessagesOnEvents, err
}

func (r messagesOnEventsToEventFindMany) Update(params ...iMessagesOnEventsSetParams) messagesOnEventsToEventUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "MessagesOnEvents"
	r.query.Outputs = countOutput

	var v messagesOnEventsToEventUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type messagesOnEventsToEventUpdateMany struct {
	query builder.Query
}

func (r messagesOnEventsToEventUpdateMany) Exec(ctx context.Context) (int, error) {
	var v updateManyMessagesOnEventsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateManyMessagesOnEvents.Count, err
}

func (r messagesOnEventsToEventFindMany) Delete() messagesOnEventsToEventDeleteMany {
	var v messagesOnEventsToEventDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "MessagesOnEvents"
	v.query.Outputs = countOutput
	return v
}

type messagesOnEventsToEventDeleteMany struct {
	query builder.Query
}

func (r messagesOnEventsToEventDeleteMany) Exec(ctx context.Context) (int, error) {
	var v deleteManyMessagesOnEventsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteManyMessagesOnEvents.Count, err
}

type messagesOnEventsFindOne struct {
	query builder.Query
}

func (r messagesOnEventsFindOne) getQuery() builder.Query {
	return r.query
}

func (r messagesOnEventsFindOne) with()                     {}
func (r messagesOnEventsFindOne) messagesOnEventsModel()    {}
func (r messagesOnEventsFindOne) messagesOnEventsRelation() {}

func (r messagesOnEventsActions) FindOne(

	params iMessagesOnEventsEqualsParamsUnique,
) messagesOnEventsFindOne {
	var v messagesOnEventsFindOne
	v.query = builder.NewQuery()
	v.query.Client = r.client

	v.query.Operation = "query"
	v.query.Method = "findOne"
	v.query.Model = "MessagesOnEvents"
	v.query.Outputs = messagesOnEventsOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: []builder.Field{params.field()},
	})

	return v
}

func (r messagesOnEventsFindOne) With(params ...iMessagesOnEventsRelationWith) messagesOnEventsFindOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r messagesOnEventsFindOne) Exec(ctx context.Context) (
	MessagesOnEventsModel,
	error,
) {
	var v findOneMessagesOnEventsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return MessagesOnEventsModel{}, fmt.Errorf(first.Message)
	}

	if v.Data.FindOneMessagesOnEvents == nil {
		return MessagesOnEventsModel{}, ErrNotFound
	}

	return *v.Data.FindOneMessagesOnEvents, err
}

func (r messagesOnEventsFindOne) Update(params ...iMessagesOnEventsSetParams) messagesOnEventsUpdateOne {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "MessagesOnEvents"
	r.query.Outputs = messagesOnEventsOutput

	var v messagesOnEventsUpdateOne
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type messagesOnEventsUpdateOne struct {
	query builder.Query
}

func (r messagesOnEventsUpdateOne) Exec(ctx context.Context) (MessagesOnEventsModel, error) {
	var v updateOneMessagesOnEventsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return MessagesOnEventsModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateOneMessagesOnEvents, err
}

func (r messagesOnEventsFindOne) Delete() messagesOnEventsDeleteOne {
	var v messagesOnEventsDeleteOne
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "MessagesOnEvents"
	v.query.Outputs = messagesOnEventsOutput
	return v
}

type messagesOnEventsDeleteOne struct {
	query builder.Query
}

func (r messagesOnEventsDeleteOne) Exec(ctx context.Context) (MessagesOnEventsModel, error) {
	var v deleteOneMessagesOnEventsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return MessagesOnEventsModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteOneMessagesOnEvents, err
}

type messagesOnEventsFindMany struct {
	query builder.Query
}

func (r messagesOnEventsFindMany) getQuery() builder.Query {
	return r.query
}

func (r messagesOnEventsFindMany) with()                     {}
func (r messagesOnEventsFindMany) messagesOnEventsModel()    {}
func (r messagesOnEventsFindMany) messagesOnEventsRelation() {}

func (r messagesOnEventsActions) FindMany(

	params ...iMessagesOnEventsParams,
) messagesOnEventsFindMany {
	var v messagesOnEventsFindMany
	v.query = builder.NewQuery()
	v.query.Client = r.client

	v.query.Operation = "query"
	v.query.Method = "findMany"
	v.query.Model = "MessagesOnEvents"
	v.query.Outputs = messagesOnEventsOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r messagesOnEventsFindMany) With(params ...iMessagesOnEventsRelationWith) messagesOnEventsFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r messagesOnEventsFindMany) OrderBy(param iMessagesOnEventsOrderByParams) messagesOnEventsFindMany {
	direction, _ := param.field().Value.(runtime.Direction)
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "orderBy",
		Value: runtime.Direction(param.field().Name + "_" + string(direction)),
	})
	return r
}

func (r messagesOnEventsFindMany) Skip(count int) messagesOnEventsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r messagesOnEventsFindMany) Take(count int) messagesOnEventsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r messagesOnEventsFindMany) Cursor(cursor iMessagesOnEventsCursorParams) messagesOnEventsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r messagesOnEventsFindMany) Exec(ctx context.Context) (
	[]MessagesOnEventsModel,
	error,
) {
	var v findManyMessagesOnEventsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return []MessagesOnEventsModel{}, fmt.Errorf(first.Message)
	}

	return v.Data.FindManyMessagesOnEvents, err
}

func (r messagesOnEventsFindMany) Update(params ...iMessagesOnEventsSetParams) messagesOnEventsUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "MessagesOnEvents"
	r.query.Outputs = countOutput

	var v messagesOnEventsUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type messagesOnEventsUpdateMany struct {
	query builder.Query
}

func (r messagesOnEventsUpdateMany) Exec(ctx context.Context) (int, error) {
	var v updateManyMessagesOnEventsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateManyMessagesOnEvents.Count, err
}

func (r messagesOnEventsFindMany) Delete() messagesOnEventsDeleteMany {
	var v messagesOnEventsDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "MessagesOnEvents"
	v.query.Outputs = countOutput
	return v
}

type messagesOnEventsDeleteMany struct {
	query builder.Query
}

func (r messagesOnEventsDeleteMany) Exec(ctx context.Context) (int, error) {
	var v deleteManyMessagesOnEventsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteManyMessagesOnEvents.Count, err
}

// --- template structs.gotpl ---

type findOneUserResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		FindOneUser *UserModel `json:"findOneUser"`
	} `json:"data"`
}

type findOneUserResult struct {
	Count int `json:"count"`
}

type findManyUserResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		FindManyUser []UserModel `json:"findManyUser"`
	} `json:"data"`
}

type findManyUserResult struct {
	Count int `json:"count"`
}

type createOneUserResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		CreateOneUser UserModel `json:"createOneUser"`
	} `json:"data"`
}

type createOneUserResult struct {
	Count int `json:"count"`
}

type createManyUserResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		CreateManyUser createManyUserResult `json:"createManyUser"`
	} `json:"data"`
}

type createManyUserResult struct {
	Count int `json:"count"`
}

type updateOneUserResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		UpdateOneUser UserModel `json:"updateOneUser"`
	} `json:"data"`
}

type updateOneUserResult struct {
	Count int `json:"count"`
}

type updateManyUserResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		UpdateManyUser updateManyUserResult `json:"updateManyUser"`
	} `json:"data"`
}

type updateManyUserResult struct {
	Count int `json:"count"`
}

type deleteOneUserResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		DeleteOneUser UserModel `json:"deleteOneUser"`
	} `json:"data"`
}

type deleteOneUserResult struct {
	Count int `json:"count"`
}

type deleteManyUserResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		DeleteManyUser deleteManyUserResult `json:"deleteManyUser"`
	} `json:"data"`
}

type deleteManyUserResult struct {
	Count int `json:"count"`
}

type findOneAvatarResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		FindOneAvatar *AvatarModel `json:"findOneAvatar"`
	} `json:"data"`
}

type findOneAvatarResult struct {
	Count int `json:"count"`
}

type findManyAvatarResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		FindManyAvatar []AvatarModel `json:"findManyAvatar"`
	} `json:"data"`
}

type findManyAvatarResult struct {
	Count int `json:"count"`
}

type createOneAvatarResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		CreateOneAvatar AvatarModel `json:"createOneAvatar"`
	} `json:"data"`
}

type createOneAvatarResult struct {
	Count int `json:"count"`
}

type createManyAvatarResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		CreateManyAvatar createManyAvatarResult `json:"createManyAvatar"`
	} `json:"data"`
}

type createManyAvatarResult struct {
	Count int `json:"count"`
}

type updateOneAvatarResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		UpdateOneAvatar AvatarModel `json:"updateOneAvatar"`
	} `json:"data"`
}

type updateOneAvatarResult struct {
	Count int `json:"count"`
}

type updateManyAvatarResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		UpdateManyAvatar updateManyAvatarResult `json:"updateManyAvatar"`
	} `json:"data"`
}

type updateManyAvatarResult struct {
	Count int `json:"count"`
}

type deleteOneAvatarResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		DeleteOneAvatar AvatarModel `json:"deleteOneAvatar"`
	} `json:"data"`
}

type deleteOneAvatarResult struct {
	Count int `json:"count"`
}

type deleteManyAvatarResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		DeleteManyAvatar deleteManyAvatarResult `json:"deleteManyAvatar"`
	} `json:"data"`
}

type deleteManyAvatarResult struct {
	Count int `json:"count"`
}

type findOneRaidResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		FindOneRaid *RaidModel `json:"findOneRaid"`
	} `json:"data"`
}

type findOneRaidResult struct {
	Count int `json:"count"`
}

type findManyRaidResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		FindManyRaid []RaidModel `json:"findManyRaid"`
	} `json:"data"`
}

type findManyRaidResult struct {
	Count int `json:"count"`
}

type createOneRaidResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		CreateOneRaid RaidModel `json:"createOneRaid"`
	} `json:"data"`
}

type createOneRaidResult struct {
	Count int `json:"count"`
}

type createManyRaidResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		CreateManyRaid createManyRaidResult `json:"createManyRaid"`
	} `json:"data"`
}

type createManyRaidResult struct {
	Count int `json:"count"`
}

type updateOneRaidResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		UpdateOneRaid RaidModel `json:"updateOneRaid"`
	} `json:"data"`
}

type updateOneRaidResult struct {
	Count int `json:"count"`
}

type updateManyRaidResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		UpdateManyRaid updateManyRaidResult `json:"updateManyRaid"`
	} `json:"data"`
}

type updateManyRaidResult struct {
	Count int `json:"count"`
}

type deleteOneRaidResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		DeleteOneRaid RaidModel `json:"deleteOneRaid"`
	} `json:"data"`
}

type deleteOneRaidResult struct {
	Count int `json:"count"`
}

type deleteManyRaidResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		DeleteManyRaid deleteManyRaidResult `json:"deleteManyRaid"`
	} `json:"data"`
}

type deleteManyRaidResult struct {
	Count int `json:"count"`
}

type findOneRaidBossResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		FindOneRaidBoss *RaidBossModel `json:"findOneRaidBoss"`
	} `json:"data"`
}

type findOneRaidBossResult struct {
	Count int `json:"count"`
}

type findManyRaidBossResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		FindManyRaidBoss []RaidBossModel `json:"findManyRaidBoss"`
	} `json:"data"`
}

type findManyRaidBossResult struct {
	Count int `json:"count"`
}

type createOneRaidBossResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		CreateOneRaidBoss RaidBossModel `json:"createOneRaidBoss"`
	} `json:"data"`
}

type createOneRaidBossResult struct {
	Count int `json:"count"`
}

type createManyRaidBossResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		CreateManyRaidBoss createManyRaidBossResult `json:"createManyRaidBoss"`
	} `json:"data"`
}

type createManyRaidBossResult struct {
	Count int `json:"count"`
}

type updateOneRaidBossResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		UpdateOneRaidBoss RaidBossModel `json:"updateOneRaidBoss"`
	} `json:"data"`
}

type updateOneRaidBossResult struct {
	Count int `json:"count"`
}

type updateManyRaidBossResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		UpdateManyRaidBoss updateManyRaidBossResult `json:"updateManyRaidBoss"`
	} `json:"data"`
}

type updateManyRaidBossResult struct {
	Count int `json:"count"`
}

type deleteOneRaidBossResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		DeleteOneRaidBoss RaidBossModel `json:"deleteOneRaidBoss"`
	} `json:"data"`
}

type deleteOneRaidBossResult struct {
	Count int `json:"count"`
}

type deleteManyRaidBossResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		DeleteManyRaidBoss deleteManyRaidBossResult `json:"deleteManyRaidBoss"`
	} `json:"data"`
}

type deleteManyRaidBossResult struct {
	Count int `json:"count"`
}

type findOneAvatarsOnRaidsResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		FindOneAvatarsOnRaids *AvatarsOnRaidsModel `json:"findOneAvatarsOnRaids"`
	} `json:"data"`
}

type findOneAvatarsOnRaidsResult struct {
	Count int `json:"count"`
}

type findManyAvatarsOnRaidsResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		FindManyAvatarsOnRaids []AvatarsOnRaidsModel `json:"findManyAvatarsOnRaids"`
	} `json:"data"`
}

type findManyAvatarsOnRaidsResult struct {
	Count int `json:"count"`
}

type createOneAvatarsOnRaidsResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		CreateOneAvatarsOnRaids AvatarsOnRaidsModel `json:"createOneAvatarsOnRaids"`
	} `json:"data"`
}

type createOneAvatarsOnRaidsResult struct {
	Count int `json:"count"`
}

type createManyAvatarsOnRaidsResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		CreateManyAvatarsOnRaids createManyAvatarsOnRaidsResult `json:"createManyAvatarsOnRaids"`
	} `json:"data"`
}

type createManyAvatarsOnRaidsResult struct {
	Count int `json:"count"`
}

type updateOneAvatarsOnRaidsResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		UpdateOneAvatarsOnRaids AvatarsOnRaidsModel `json:"updateOneAvatarsOnRaids"`
	} `json:"data"`
}

type updateOneAvatarsOnRaidsResult struct {
	Count int `json:"count"`
}

type updateManyAvatarsOnRaidsResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		UpdateManyAvatarsOnRaids updateManyAvatarsOnRaidsResult `json:"updateManyAvatarsOnRaids"`
	} `json:"data"`
}

type updateManyAvatarsOnRaidsResult struct {
	Count int `json:"count"`
}

type deleteOneAvatarsOnRaidsResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		DeleteOneAvatarsOnRaids AvatarsOnRaidsModel `json:"deleteOneAvatarsOnRaids"`
	} `json:"data"`
}

type deleteOneAvatarsOnRaidsResult struct {
	Count int `json:"count"`
}

type deleteManyAvatarsOnRaidsResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		DeleteManyAvatarsOnRaids deleteManyAvatarsOnRaidsResult `json:"deleteManyAvatarsOnRaids"`
	} `json:"data"`
}

type deleteManyAvatarsOnRaidsResult struct {
	Count int `json:"count"`
}

type findOneRaidBossesOnRaidsResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		FindOneRaidBossesOnRaids *RaidBossesOnRaidsModel `json:"findOneRaidBossesOnRaids"`
	} `json:"data"`
}

type findOneRaidBossesOnRaidsResult struct {
	Count int `json:"count"`
}

type findManyRaidBossesOnRaidsResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		FindManyRaidBossesOnRaids []RaidBossesOnRaidsModel `json:"findManyRaidBossesOnRaids"`
	} `json:"data"`
}

type findManyRaidBossesOnRaidsResult struct {
	Count int `json:"count"`
}

type createOneRaidBossesOnRaidsResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		CreateOneRaidBossesOnRaids RaidBossesOnRaidsModel `json:"createOneRaidBossesOnRaids"`
	} `json:"data"`
}

type createOneRaidBossesOnRaidsResult struct {
	Count int `json:"count"`
}

type createManyRaidBossesOnRaidsResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		CreateManyRaidBossesOnRaids createManyRaidBossesOnRaidsResult `json:"createManyRaidBossesOnRaids"`
	} `json:"data"`
}

type createManyRaidBossesOnRaidsResult struct {
	Count int `json:"count"`
}

type updateOneRaidBossesOnRaidsResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		UpdateOneRaidBossesOnRaids RaidBossesOnRaidsModel `json:"updateOneRaidBossesOnRaids"`
	} `json:"data"`
}

type updateOneRaidBossesOnRaidsResult struct {
	Count int `json:"count"`
}

type updateManyRaidBossesOnRaidsResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		UpdateManyRaidBossesOnRaids updateManyRaidBossesOnRaidsResult `json:"updateManyRaidBossesOnRaids"`
	} `json:"data"`
}

type updateManyRaidBossesOnRaidsResult struct {
	Count int `json:"count"`
}

type deleteOneRaidBossesOnRaidsResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		DeleteOneRaidBossesOnRaids RaidBossesOnRaidsModel `json:"deleteOneRaidBossesOnRaids"`
	} `json:"data"`
}

type deleteOneRaidBossesOnRaidsResult struct {
	Count int `json:"count"`
}

type deleteManyRaidBossesOnRaidsResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		DeleteManyRaidBossesOnRaids deleteManyRaidBossesOnRaidsResult `json:"deleteManyRaidBossesOnRaids"`
	} `json:"data"`
}

type deleteManyRaidBossesOnRaidsResult struct {
	Count int `json:"count"`
}

type findOneStoryResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		FindOneStory *StoryModel `json:"findOneStory"`
	} `json:"data"`
}

type findOneStoryResult struct {
	Count int `json:"count"`
}

type findManyStoryResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		FindManyStory []StoryModel `json:"findManyStory"`
	} `json:"data"`
}

type findManyStoryResult struct {
	Count int `json:"count"`
}

type createOneStoryResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		CreateOneStory StoryModel `json:"createOneStory"`
	} `json:"data"`
}

type createOneStoryResult struct {
	Count int `json:"count"`
}

type createManyStoryResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		CreateManyStory createManyStoryResult `json:"createManyStory"`
	} `json:"data"`
}

type createManyStoryResult struct {
	Count int `json:"count"`
}

type updateOneStoryResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		UpdateOneStory StoryModel `json:"updateOneStory"`
	} `json:"data"`
}

type updateOneStoryResult struct {
	Count int `json:"count"`
}

type updateManyStoryResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		UpdateManyStory updateManyStoryResult `json:"updateManyStory"`
	} `json:"data"`
}

type updateManyStoryResult struct {
	Count int `json:"count"`
}

type deleteOneStoryResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		DeleteOneStory StoryModel `json:"deleteOneStory"`
	} `json:"data"`
}

type deleteOneStoryResult struct {
	Count int `json:"count"`
}

type deleteManyStoryResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		DeleteManyStory deleteManyStoryResult `json:"deleteManyStory"`
	} `json:"data"`
}

type deleteManyStoryResult struct {
	Count int `json:"count"`
}

type findOneStoriesOnRaidsResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		FindOneStoriesOnRaids *StoriesOnRaidsModel `json:"findOneStoriesOnRaids"`
	} `json:"data"`
}

type findOneStoriesOnRaidsResult struct {
	Count int `json:"count"`
}

type findManyStoriesOnRaidsResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		FindManyStoriesOnRaids []StoriesOnRaidsModel `json:"findManyStoriesOnRaids"`
	} `json:"data"`
}

type findManyStoriesOnRaidsResult struct {
	Count int `json:"count"`
}

type createOneStoriesOnRaidsResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		CreateOneStoriesOnRaids StoriesOnRaidsModel `json:"createOneStoriesOnRaids"`
	} `json:"data"`
}

type createOneStoriesOnRaidsResult struct {
	Count int `json:"count"`
}

type createManyStoriesOnRaidsResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		CreateManyStoriesOnRaids createManyStoriesOnRaidsResult `json:"createManyStoriesOnRaids"`
	} `json:"data"`
}

type createManyStoriesOnRaidsResult struct {
	Count int `json:"count"`
}

type updateOneStoriesOnRaidsResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		UpdateOneStoriesOnRaids StoriesOnRaidsModel `json:"updateOneStoriesOnRaids"`
	} `json:"data"`
}

type updateOneStoriesOnRaidsResult struct {
	Count int `json:"count"`
}

type updateManyStoriesOnRaidsResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		UpdateManyStoriesOnRaids updateManyStoriesOnRaidsResult `json:"updateManyStoriesOnRaids"`
	} `json:"data"`
}

type updateManyStoriesOnRaidsResult struct {
	Count int `json:"count"`
}

type deleteOneStoriesOnRaidsResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		DeleteOneStoriesOnRaids StoriesOnRaidsModel `json:"deleteOneStoriesOnRaids"`
	} `json:"data"`
}

type deleteOneStoriesOnRaidsResult struct {
	Count int `json:"count"`
}

type deleteManyStoriesOnRaidsResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		DeleteManyStoriesOnRaids deleteManyStoriesOnRaidsResult `json:"deleteManyStoriesOnRaids"`
	} `json:"data"`
}

type deleteManyStoriesOnRaidsResult struct {
	Count int `json:"count"`
}

type findOneEventResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		FindOneEvent *EventModel `json:"findOneEvent"`
	} `json:"data"`
}

type findOneEventResult struct {
	Count int `json:"count"`
}

type findManyEventResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		FindManyEvent []EventModel `json:"findManyEvent"`
	} `json:"data"`
}

type findManyEventResult struct {
	Count int `json:"count"`
}

type createOneEventResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		CreateOneEvent EventModel `json:"createOneEvent"`
	} `json:"data"`
}

type createOneEventResult struct {
	Count int `json:"count"`
}

type createManyEventResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		CreateManyEvent createManyEventResult `json:"createManyEvent"`
	} `json:"data"`
}

type createManyEventResult struct {
	Count int `json:"count"`
}

type updateOneEventResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		UpdateOneEvent EventModel `json:"updateOneEvent"`
	} `json:"data"`
}

type updateOneEventResult struct {
	Count int `json:"count"`
}

type updateManyEventResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		UpdateManyEvent updateManyEventResult `json:"updateManyEvent"`
	} `json:"data"`
}

type updateManyEventResult struct {
	Count int `json:"count"`
}

type deleteOneEventResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		DeleteOneEvent EventModel `json:"deleteOneEvent"`
	} `json:"data"`
}

type deleteOneEventResult struct {
	Count int `json:"count"`
}

type deleteManyEventResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		DeleteManyEvent deleteManyEventResult `json:"deleteManyEvent"`
	} `json:"data"`
}

type deleteManyEventResult struct {
	Count int `json:"count"`
}

type findOneActionResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		FindOneAction *ActionModel `json:"findOneAction"`
	} `json:"data"`
}

type findOneActionResult struct {
	Count int `json:"count"`
}

type findManyActionResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		FindManyAction []ActionModel `json:"findManyAction"`
	} `json:"data"`
}

type findManyActionResult struct {
	Count int `json:"count"`
}

type createOneActionResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		CreateOneAction ActionModel `json:"createOneAction"`
	} `json:"data"`
}

type createOneActionResult struct {
	Count int `json:"count"`
}

type createManyActionResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		CreateManyAction createManyActionResult `json:"createManyAction"`
	} `json:"data"`
}

type createManyActionResult struct {
	Count int `json:"count"`
}

type updateOneActionResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		UpdateOneAction ActionModel `json:"updateOneAction"`
	} `json:"data"`
}

type updateOneActionResult struct {
	Count int `json:"count"`
}

type updateManyActionResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		UpdateManyAction updateManyActionResult `json:"updateManyAction"`
	} `json:"data"`
}

type updateManyActionResult struct {
	Count int `json:"count"`
}

type deleteOneActionResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		DeleteOneAction ActionModel `json:"deleteOneAction"`
	} `json:"data"`
}

type deleteOneActionResult struct {
	Count int `json:"count"`
}

type deleteManyActionResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		DeleteManyAction deleteManyActionResult `json:"deleteManyAction"`
	} `json:"data"`
}

type deleteManyActionResult struct {
	Count int `json:"count"`
}

type findOneMessageResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		FindOneMessage *MessageModel `json:"findOneMessage"`
	} `json:"data"`
}

type findOneMessageResult struct {
	Count int `json:"count"`
}

type findManyMessageResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		FindManyMessage []MessageModel `json:"findManyMessage"`
	} `json:"data"`
}

type findManyMessageResult struct {
	Count int `json:"count"`
}

type createOneMessageResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		CreateOneMessage MessageModel `json:"createOneMessage"`
	} `json:"data"`
}

type createOneMessageResult struct {
	Count int `json:"count"`
}

type createManyMessageResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		CreateManyMessage createManyMessageResult `json:"createManyMessage"`
	} `json:"data"`
}

type createManyMessageResult struct {
	Count int `json:"count"`
}

type updateOneMessageResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		UpdateOneMessage MessageModel `json:"updateOneMessage"`
	} `json:"data"`
}

type updateOneMessageResult struct {
	Count int `json:"count"`
}

type updateManyMessageResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		UpdateManyMessage updateManyMessageResult `json:"updateManyMessage"`
	} `json:"data"`
}

type updateManyMessageResult struct {
	Count int `json:"count"`
}

type deleteOneMessageResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		DeleteOneMessage MessageModel `json:"deleteOneMessage"`
	} `json:"data"`
}

type deleteOneMessageResult struct {
	Count int `json:"count"`
}

type deleteManyMessageResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		DeleteManyMessage deleteManyMessageResult `json:"deleteManyMessage"`
	} `json:"data"`
}

type deleteManyMessageResult struct {
	Count int `json:"count"`
}

type findOneMessagesOnActionsResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		FindOneMessagesOnActions *MessagesOnActionsModel `json:"findOneMessagesOnActions"`
	} `json:"data"`
}

type findOneMessagesOnActionsResult struct {
	Count int `json:"count"`
}

type findManyMessagesOnActionsResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		FindManyMessagesOnActions []MessagesOnActionsModel `json:"findManyMessagesOnActions"`
	} `json:"data"`
}

type findManyMessagesOnActionsResult struct {
	Count int `json:"count"`
}

type createOneMessagesOnActionsResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		CreateOneMessagesOnActions MessagesOnActionsModel `json:"createOneMessagesOnActions"`
	} `json:"data"`
}

type createOneMessagesOnActionsResult struct {
	Count int `json:"count"`
}

type createManyMessagesOnActionsResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		CreateManyMessagesOnActions createManyMessagesOnActionsResult `json:"createManyMessagesOnActions"`
	} `json:"data"`
}

type createManyMessagesOnActionsResult struct {
	Count int `json:"count"`
}

type updateOneMessagesOnActionsResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		UpdateOneMessagesOnActions MessagesOnActionsModel `json:"updateOneMessagesOnActions"`
	} `json:"data"`
}

type updateOneMessagesOnActionsResult struct {
	Count int `json:"count"`
}

type updateManyMessagesOnActionsResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		UpdateManyMessagesOnActions updateManyMessagesOnActionsResult `json:"updateManyMessagesOnActions"`
	} `json:"data"`
}

type updateManyMessagesOnActionsResult struct {
	Count int `json:"count"`
}

type deleteOneMessagesOnActionsResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		DeleteOneMessagesOnActions MessagesOnActionsModel `json:"deleteOneMessagesOnActions"`
	} `json:"data"`
}

type deleteOneMessagesOnActionsResult struct {
	Count int `json:"count"`
}

type deleteManyMessagesOnActionsResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		DeleteManyMessagesOnActions deleteManyMessagesOnActionsResult `json:"deleteManyMessagesOnActions"`
	} `json:"data"`
}

type deleteManyMessagesOnActionsResult struct {
	Count int `json:"count"`
}

type findOneMessagesOnEventsResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		FindOneMessagesOnEvents *MessagesOnEventsModel `json:"findOneMessagesOnEvents"`
	} `json:"data"`
}

type findOneMessagesOnEventsResult struct {
	Count int `json:"count"`
}

type findManyMessagesOnEventsResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		FindManyMessagesOnEvents []MessagesOnEventsModel `json:"findManyMessagesOnEvents"`
	} `json:"data"`
}

type findManyMessagesOnEventsResult struct {
	Count int `json:"count"`
}

type createOneMessagesOnEventsResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		CreateOneMessagesOnEvents MessagesOnEventsModel `json:"createOneMessagesOnEvents"`
	} `json:"data"`
}

type createOneMessagesOnEventsResult struct {
	Count int `json:"count"`
}

type createManyMessagesOnEventsResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		CreateManyMessagesOnEvents createManyMessagesOnEventsResult `json:"createManyMessagesOnEvents"`
	} `json:"data"`
}

type createManyMessagesOnEventsResult struct {
	Count int `json:"count"`
}

type updateOneMessagesOnEventsResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		UpdateOneMessagesOnEvents MessagesOnEventsModel `json:"updateOneMessagesOnEvents"`
	} `json:"data"`
}

type updateOneMessagesOnEventsResult struct {
	Count int `json:"count"`
}

type updateManyMessagesOnEventsResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		UpdateManyMessagesOnEvents updateManyMessagesOnEventsResult `json:"updateManyMessagesOnEvents"`
	} `json:"data"`
}

type updateManyMessagesOnEventsResult struct {
	Count int `json:"count"`
}

type deleteOneMessagesOnEventsResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		DeleteOneMessagesOnEvents MessagesOnEventsModel `json:"deleteOneMessagesOnEvents"`
	} `json:"data"`
}

type deleteOneMessagesOnEventsResult struct {
	Count int `json:"count"`
}

type deleteManyMessagesOnEventsResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		DeleteManyMessagesOnEvents deleteManyMessagesOnEventsResult `json:"deleteManyMessagesOnEvents"`
	} `json:"data"`
}

type deleteManyMessagesOnEventsResult struct {
	Count int `json:"count"`
}

// --- template client.gotpl ---
const schema = `datasource db {
    provider = "postgresql"
    url      = "postgresql://postgres:postgres@localhost:5432/crossing_dev"
}

generator db {
    provider = "go run github.com/prisma/prisma-client-go"
}

model User {
    id              Int       @default(autoincrement()) @id
    createdAt       DateTime  @default(now())
    deletedAt       DateTime?
    updatedAt       DateTime  @updatedAt
    discordUserId   String    @unique
    email           String?   @unique
    discordUsername String?   @unique
    firstName       String?
    lastName        String?
    avatar          Avatar?
}

model Avatar {
    id             Int              @default(autoincrement()) @id
    createdAt      DateTime         @default(now())
    deletedAt      DateTime?
    updatedAt      DateTime         @updatedAt
    User           User             @relation(fields: [userId], references: [id])
    userId         Int              @unique
    AvatarsOnRaids AvatarsOnRaids[]
}

model Raid {
    id                 Int                 @default(autoincrement()) @id
    createdAt          DateTime            @default(now())
    deletedAt          DateTime?
    updatedAt          DateTime            @updatedAt
    startTime          DateTime            @default(now())
    endTime            DateTime?
    completionProgress Float               @default(0)
    active             Boolean             @default(false)
    playerLimit        Int                 @default(10)
    playerCount        Int                 @default(0)
    AvatarsOnRaids     AvatarsOnRaids[]
    RaidBossesOnRaids  RaidBossesOnRaids[]
    StoriesOnRaids     StoriesOnRaids[]
}

model RaidBoss {
    id                Int                 @default(autoincrement()) @id
    createdAt         DateTime            @default(now())
    deletedAt         DateTime?
    updatedAt         DateTime            @updatedAt
    name              String              @unique
    image             String?
    RaidBossesOnRaids RaidBossesOnRaids[]
}

model AvatarsOnRaids {
    createdAt DateTime  @default(now())
    deletedAt DateTime?
    updatedAt DateTime  @updatedAt
    position  Int
    raid      Raid      @relation(fields: [raidId], references: [id])
    raidId    Int
    avatar    Avatar    @relation(fields: [avatarId], references: [id])
    avatarId  Int

    @@id([raidId, avatarId])
    @@unique([raidId, avatarId])
}

model RaidBossesOnRaids {
    createdAt  DateTime  @default(now())
    deletedAt  DateTime?
    updatedAt  DateTime  @updatedAt
    raid       Raid      @relation(fields: [raidId], references: [id])
    raidId     Int
    raidBoss   RaidBoss  @relation(fields: [raidBossId], references: [id])
    raidBossId Int

    @@id([raidId, raidBossId])
    @@unique([raidId, raidBossId])
}

// A Story is a series of events that can occur for a given raid
model Story {
    id             Int              @default(autoincrement()) @id
    createdAt      DateTime         @default(now())
    deletedAt      DateTime?
    updatedAt      DateTime         @updatedAt
    StoriesOnRaids StoriesOnRaids[]
    Event          Event[]
}

// A Raid may have multiple stories in succession
model StoriesOnRaids {
    createdAt DateTime  @default(now())
    deletedAt DateTime?
    updatedAt DateTime  @updatedAt
    raid      Raid      @relation(fields: [raidId], references: [id])
    raidId    Int
    story     Story     @relation(fields: [storyId], references: [id])
    storyId   Int

    @@id([raidId, storyId])
    @@unique([raidId, storyId])
}

// An Event represents a moment in a story in which Avatars can fulfill Actions
model Event {
    id               Int                @default(autoincrement()) @id
    createdAt        DateTime           @default(now())
    deletedAt        DateTime?
    updatedAt        DateTime           @updatedAt
    story            Story              @relation(fields: [storyId], references: [id])
    storyId          Int
    // The sequence dictates the order of events to occur in a story
    sequence         Int
    Action           Action[]
    MessagesOnEvents MessagesOnEvents[]

    @@unique([storyId, sequence])
}

// An Action prescribes a message and the raid member position required to fulfill the action.
// This allows for customized actions per raid member. Wowzah!
model Action {
    id                Int                 @default(autoincrement()) @id
    createdAt         DateTime            @default(now())
    deletedAt         DateTime?
    updatedAt         DateTime            @updatedAt
    position          Int
    event             Event               @relation(fields: [eventId], references: [id])
    eventId           Int
    MessagesOnActions MessagesOnActions[]

    @@unique([eventId, position])
}

// A Message holds message contents.
model Message {
    id                Int                 @default(autoincrement()) @id
    createdAt         DateTime            @default(now())
    deletedAt         DateTime?
    updatedAt         DateTime            @updatedAt
    content           String
    type              String
    MessagesOnActions MessagesOnActions[]
    MessagesOnEvents  MessagesOnEvents[]
}

// An Action may send messages to users.
model MessagesOnActions {
    createdAt DateTime  @default(now())
    deletedAt DateTime?
    updatedAt DateTime  @updatedAt
    message   Message   @relation(fields: [messageId], references: [id])
    messageId Int
    action    Action    @relation(fields: [actionId], references: [id])
    actionId  Int

    @@id([messageId, actionId])
    @@unique([messageId, actionId])
}

// An Event may send messages to users on completion.
model MessagesOnEvents {
    createdAt DateTime  @default(now())
    deletedAt DateTime?
    updatedAt DateTime  @updatedAt
    message   Message   @relation(fields: [messageId], references: [id])
    messageId Int
    event     Event     @relation(fields: [eventId], references: [id])
    eventId   Int

    @@id([messageId, eventId])
    @@unique([messageId, eventId])
}
`

// hasBinaryTargets is true when binaryTargets are provided on generation time
var hasBinaryTargets = false

// NewClient creates a new Prisma Client Go client.
// The client is not connected to the Prisma engine yet.
//
// Example:
//
//   client := db.NewClient()
//   err := client.Connect()
//   if err != nil {
//     handle(err)
//   }
//
//   defer func() {
//     err := client.Disconnect()
//     if err != nil {
//       panic(fmt.Errorf("could not disconnect: %w", err))
//     }
//   }()
func NewClient() *PrismaClient {
	c := &PrismaClient{}

	c.Engine = engine.NewEngine(schema, hasBinaryTargets)
	c.User = userActions{client: c}
	c.Avatar = avatarActions{client: c}
	c.Raid = raidActions{client: c}
	c.RaidBoss = raidBossActions{client: c}
	c.AvatarsOnRaids = avatarsOnRaidsActions{client: c}
	c.RaidBossesOnRaids = raidBossesOnRaidsActions{client: c}
	c.Story = storyActions{client: c}
	c.StoriesOnRaids = storiesOnRaidsActions{client: c}
	c.Event = eventActions{client: c}
	c.Action = actionActions{client: c}
	c.Message = messageActions{client: c}
	c.MessagesOnActions = messagesOnActionsActions{client: c}
	c.MessagesOnEvents = messagesOnEventsActions{client: c}

	c.Actions = &raw.Actions{Client: c}

	return c
}

// PrismaClient is the instance of the Prisma Client Go client.
type PrismaClient struct {
	// engine spawns and manages the binary
	*engine.Engine

	*raw.Actions

	// User provides access to CRUD methods.
	User userActions
	// Avatar provides access to CRUD methods.
	Avatar avatarActions
	// Raid provides access to CRUD methods.
	Raid raidActions
	// RaidBoss provides access to CRUD methods.
	RaidBoss raidBossActions
	// AvatarsOnRaids provides access to CRUD methods.
	AvatarsOnRaids avatarsOnRaidsActions
	// RaidBossesOnRaids provides access to CRUD methods.
	RaidBossesOnRaids raidBossesOnRaidsActions
	// Story provides access to CRUD methods.
	Story storyActions
	// StoriesOnRaids provides access to CRUD methods.
	StoriesOnRaids storiesOnRaidsActions
	// Event provides access to CRUD methods.
	Event eventActions
	// Action provides access to CRUD methods.
	Action actionActions
	// Message provides access to CRUD methods.
	Message messageActions
	// MessagesOnActions provides access to CRUD methods.
	MessagesOnActions messagesOnActionsActions
	// MessagesOnEvents provides access to CRUD methods.
	MessagesOnEvents messagesOnEventsActions
}

// Connects to the Prisma query engine. Required to call before accessing data.
// It is recommended to immediately defer calling Disconnect.
//
// Example:
//
//   err := client.Connect()
//   if err != nil {
//     handle(err)
//   }
//
//   defer func() {
//     err := client.Disconnect()
//     if err != nil {
//       panic(fmt.Errorf("could not disconnect: %w", err))
//     }
//   }()
func (c *PrismaClient) Connect() error {
	return c.Engine.Connect()
}

// Disconnects from the Prisma query engine.
// This is usually invoked on kill signals in long running applications (like webservers),
// or when no database access is needed anymore (like after executing a CLI command).
//
// Should be usually invoked directly after calling client.Connect(), for example as follows:
//
//   // after client.Connect()
//
//   defer func() {
//     err := client.Disconnect()
//     if err != nil {
//       panic(fmt.Errorf("could not disconnect: %w", err))
//     }
//   }()
func (c *PrismaClient) Disconnect() error {
	return c.Engine.Disconnect()
}

// --- template enums.gotpl ---

// --- template errors.gotpl ---
// ErrNotFound gets returned when a database record does not exist
var ErrNotFound = errors.New("ErrNotFound")

// --- template models.gotpl ---

// UserModel represents the `json:"User"` model and is a wrapper for accessing fields and methods
type UserModel struct {
	InternalUser
	RelationsUser
}

// InternalUser holds the actual data
type InternalUser struct {
	ID              int       `json:"id"`
	CreatedAt       DateTime  `json:"createdAt"`
	DeletedAt       *DateTime `json:"deletedAt"`
	UpdatedAt       DateTime  `json:"updatedAt"`
	DiscordUserID   string    `json:"discordUserId"`
	Email           *string   `json:"email"`
	DiscordUsername *string   `json:"discordUsername"`
	FirstName       *string   `json:"firstName"`
	LastName        *string   `json:"lastName"`
}

// RelationsUser holds the relation data separately
type RelationsUser struct {
	Avatar *AvatarModel `json:"avatar"`
}

func (r UserModel) DeletedAt() (value DateTime, ok bool) {
	if r.InternalUser.DeletedAt == nil {
		return value, false
	}
	return *r.InternalUser.DeletedAt, true
}

func (r UserModel) Email() (value string, ok bool) {
	if r.InternalUser.Email == nil {
		return value, false
	}
	return *r.InternalUser.Email, true
}

func (r UserModel) DiscordUsername() (value string, ok bool) {
	if r.InternalUser.DiscordUsername == nil {
		return value, false
	}
	return *r.InternalUser.DiscordUsername, true
}

func (r UserModel) FirstName() (value string, ok bool) {
	if r.InternalUser.FirstName == nil {
		return value, false
	}
	return *r.InternalUser.FirstName, true
}

func (r UserModel) LastName() (value string, ok bool) {
	if r.InternalUser.LastName == nil {
		return value, false
	}
	return *r.InternalUser.LastName, true
}

func (r UserModel) Avatar() (value AvatarModel, ok bool) {
	if r.RelationsUser.Avatar == nil {
		return value, false
	}
	return *r.RelationsUser.Avatar, true
}

// AvatarModel represents the `json:"Avatar"` model and is a wrapper for accessing fields and methods
type AvatarModel struct {
	InternalAvatar
	RelationsAvatar
}

// InternalAvatar holds the actual data
type InternalAvatar struct {
	ID        int       `json:"id"`
	CreatedAt DateTime  `json:"createdAt"`
	DeletedAt *DateTime `json:"deletedAt"`
	UpdatedAt DateTime  `json:"updatedAt"`
	UserID    int       `json:"userId"`
}

// RelationsAvatar holds the relation data separately
type RelationsAvatar struct {
	User           *UserModel            `json:"User"`
	AvatarsOnRaids []AvatarsOnRaidsModel `json:"AvatarsOnRaids"`
}

func (r AvatarModel) DeletedAt() (value DateTime, ok bool) {
	if r.InternalAvatar.DeletedAt == nil {
		return value, false
	}
	return *r.InternalAvatar.DeletedAt, true
}

func (r AvatarModel) User() (value UserModel) {
	if r.RelationsAvatar.User == nil {
		panic("attempted to access user but did not fetch it using the .With() syntax")
	}
	return *r.RelationsAvatar.User
}

func (r AvatarModel) AvatarsOnRaids() (value []AvatarsOnRaidsModel) {
	if r.RelationsAvatar.AvatarsOnRaids == nil {
		return value
	}
	return r.RelationsAvatar.AvatarsOnRaids
}

// RaidModel represents the `json:"Raid"` model and is a wrapper for accessing fields and methods
type RaidModel struct {
	InternalRaid
	RelationsRaid
}

// InternalRaid holds the actual data
type InternalRaid struct {
	ID                 int       `json:"id"`
	CreatedAt          DateTime  `json:"createdAt"`
	DeletedAt          *DateTime `json:"deletedAt"`
	UpdatedAt          DateTime  `json:"updatedAt"`
	StartTime          DateTime  `json:"startTime"`
	EndTime            *DateTime `json:"endTime"`
	CompletionProgress float64   `json:"completionProgress"`
	Active             bool      `json:"active"`
	PlayerLimit        int       `json:"playerLimit"`
	PlayerCount        int       `json:"playerCount"`
}

// RelationsRaid holds the relation data separately
type RelationsRaid struct {
	AvatarsOnRaids    []AvatarsOnRaidsModel    `json:"AvatarsOnRaids"`
	RaidBossesOnRaids []RaidBossesOnRaidsModel `json:"RaidBossesOnRaids"`
	StoriesOnRaids    []StoriesOnRaidsModel    `json:"StoriesOnRaids"`
}

func (r RaidModel) DeletedAt() (value DateTime, ok bool) {
	if r.InternalRaid.DeletedAt == nil {
		return value, false
	}
	return *r.InternalRaid.DeletedAt, true
}

func (r RaidModel) EndTime() (value DateTime, ok bool) {
	if r.InternalRaid.EndTime == nil {
		return value, false
	}
	return *r.InternalRaid.EndTime, true
}

func (r RaidModel) AvatarsOnRaids() (value []AvatarsOnRaidsModel) {
	if r.RelationsRaid.AvatarsOnRaids == nil {
		return value
	}
	return r.RelationsRaid.AvatarsOnRaids
}

func (r RaidModel) RaidBossesOnRaids() (value []RaidBossesOnRaidsModel) {
	if r.RelationsRaid.RaidBossesOnRaids == nil {
		return value
	}
	return r.RelationsRaid.RaidBossesOnRaids
}

func (r RaidModel) StoriesOnRaids() (value []StoriesOnRaidsModel) {
	if r.RelationsRaid.StoriesOnRaids == nil {
		return value
	}
	return r.RelationsRaid.StoriesOnRaids
}

// RaidBossModel represents the `json:"RaidBoss"` model and is a wrapper for accessing fields and methods
type RaidBossModel struct {
	InternalRaidBoss
	RelationsRaidBoss
}

// InternalRaidBoss holds the actual data
type InternalRaidBoss struct {
	ID        int       `json:"id"`
	CreatedAt DateTime  `json:"createdAt"`
	DeletedAt *DateTime `json:"deletedAt"`
	UpdatedAt DateTime  `json:"updatedAt"`
	Name      string    `json:"name"`
	Image     *string   `json:"image"`
}

// RelationsRaidBoss holds the relation data separately
type RelationsRaidBoss struct {
	RaidBossesOnRaids []RaidBossesOnRaidsModel `json:"RaidBossesOnRaids"`
}

func (r RaidBossModel) DeletedAt() (value DateTime, ok bool) {
	if r.InternalRaidBoss.DeletedAt == nil {
		return value, false
	}
	return *r.InternalRaidBoss.DeletedAt, true
}

func (r RaidBossModel) Image() (value string, ok bool) {
	if r.InternalRaidBoss.Image == nil {
		return value, false
	}
	return *r.InternalRaidBoss.Image, true
}

func (r RaidBossModel) RaidBossesOnRaids() (value []RaidBossesOnRaidsModel) {
	if r.RelationsRaidBoss.RaidBossesOnRaids == nil {
		return value
	}
	return r.RelationsRaidBoss.RaidBossesOnRaids
}

// AvatarsOnRaidsModel represents the `json:"AvatarsOnRaids"` model and is a wrapper for accessing fields and methods
type AvatarsOnRaidsModel struct {
	InternalAvatarsOnRaids
	RelationsAvatarsOnRaids
}

// InternalAvatarsOnRaids holds the actual data
type InternalAvatarsOnRaids struct {
	CreatedAt DateTime  `json:"createdAt"`
	DeletedAt *DateTime `json:"deletedAt"`
	UpdatedAt DateTime  `json:"updatedAt"`
	Position  int       `json:"position"`
	RaidID    int       `json:"raidId"`
	AvatarID  int       `json:"avatarId"`
}

// RelationsAvatarsOnRaids holds the relation data separately
type RelationsAvatarsOnRaids struct {
	Raid   *RaidModel   `json:"raid"`
	Avatar *AvatarModel `json:"avatar"`
}

func (r AvatarsOnRaidsModel) DeletedAt() (value DateTime, ok bool) {
	if r.InternalAvatarsOnRaids.DeletedAt == nil {
		return value, false
	}
	return *r.InternalAvatarsOnRaids.DeletedAt, true
}

func (r AvatarsOnRaidsModel) Raid() (value RaidModel) {
	if r.RelationsAvatarsOnRaids.Raid == nil {
		panic("attempted to access raid but did not fetch it using the .With() syntax")
	}
	return *r.RelationsAvatarsOnRaids.Raid
}

func (r AvatarsOnRaidsModel) Avatar() (value AvatarModel) {
	if r.RelationsAvatarsOnRaids.Avatar == nil {
		panic("attempted to access avatar but did not fetch it using the .With() syntax")
	}
	return *r.RelationsAvatarsOnRaids.Avatar
}

// RaidBossesOnRaidsModel represents the `json:"RaidBossesOnRaids"` model and is a wrapper for accessing fields and methods
type RaidBossesOnRaidsModel struct {
	InternalRaidBossesOnRaids
	RelationsRaidBossesOnRaids
}

// InternalRaidBossesOnRaids holds the actual data
type InternalRaidBossesOnRaids struct {
	CreatedAt  DateTime  `json:"createdAt"`
	DeletedAt  *DateTime `json:"deletedAt"`
	UpdatedAt  DateTime  `json:"updatedAt"`
	RaidID     int       `json:"raidId"`
	RaidBossID int       `json:"raidBossId"`
}

// RelationsRaidBossesOnRaids holds the relation data separately
type RelationsRaidBossesOnRaids struct {
	Raid     *RaidModel     `json:"raid"`
	RaidBoss *RaidBossModel `json:"raidBoss"`
}

func (r RaidBossesOnRaidsModel) DeletedAt() (value DateTime, ok bool) {
	if r.InternalRaidBossesOnRaids.DeletedAt == nil {
		return value, false
	}
	return *r.InternalRaidBossesOnRaids.DeletedAt, true
}

func (r RaidBossesOnRaidsModel) Raid() (value RaidModel) {
	if r.RelationsRaidBossesOnRaids.Raid == nil {
		panic("attempted to access raid but did not fetch it using the .With() syntax")
	}
	return *r.RelationsRaidBossesOnRaids.Raid
}

func (r RaidBossesOnRaidsModel) RaidBoss() (value RaidBossModel) {
	if r.RelationsRaidBossesOnRaids.RaidBoss == nil {
		panic("attempted to access raidBoss but did not fetch it using the .With() syntax")
	}
	return *r.RelationsRaidBossesOnRaids.RaidBoss
}

// StoryModel represents the `json:"Story"` model and is a wrapper for accessing fields and methods
type StoryModel struct {
	InternalStory
	RelationsStory
}

// InternalStory holds the actual data
type InternalStory struct {
	ID        int       `json:"id"`
	CreatedAt DateTime  `json:"createdAt"`
	DeletedAt *DateTime `json:"deletedAt"`
	UpdatedAt DateTime  `json:"updatedAt"`
}

// RelationsStory holds the relation data separately
type RelationsStory struct {
	StoriesOnRaids []StoriesOnRaidsModel `json:"StoriesOnRaids"`
	Event          []EventModel          `json:"Event"`
}

func (r StoryModel) DeletedAt() (value DateTime, ok bool) {
	if r.InternalStory.DeletedAt == nil {
		return value, false
	}
	return *r.InternalStory.DeletedAt, true
}

func (r StoryModel) StoriesOnRaids() (value []StoriesOnRaidsModel) {
	if r.RelationsStory.StoriesOnRaids == nil {
		return value
	}
	return r.RelationsStory.StoriesOnRaids
}

func (r StoryModel) Event() (value []EventModel) {
	if r.RelationsStory.Event == nil {
		return value
	}
	return r.RelationsStory.Event
}

// StoriesOnRaidsModel represents the `json:"StoriesOnRaids"` model and is a wrapper for accessing fields and methods
type StoriesOnRaidsModel struct {
	InternalStoriesOnRaids
	RelationsStoriesOnRaids
}

// InternalStoriesOnRaids holds the actual data
type InternalStoriesOnRaids struct {
	CreatedAt DateTime  `json:"createdAt"`
	DeletedAt *DateTime `json:"deletedAt"`
	UpdatedAt DateTime  `json:"updatedAt"`
	RaidID    int       `json:"raidId"`
	StoryID   int       `json:"storyId"`
}

// RelationsStoriesOnRaids holds the relation data separately
type RelationsStoriesOnRaids struct {
	Raid  *RaidModel  `json:"raid"`
	Story *StoryModel `json:"story"`
}

func (r StoriesOnRaidsModel) DeletedAt() (value DateTime, ok bool) {
	if r.InternalStoriesOnRaids.DeletedAt == nil {
		return value, false
	}
	return *r.InternalStoriesOnRaids.DeletedAt, true
}

func (r StoriesOnRaidsModel) Raid() (value RaidModel) {
	if r.RelationsStoriesOnRaids.Raid == nil {
		panic("attempted to access raid but did not fetch it using the .With() syntax")
	}
	return *r.RelationsStoriesOnRaids.Raid
}

func (r StoriesOnRaidsModel) Story() (value StoryModel) {
	if r.RelationsStoriesOnRaids.Story == nil {
		panic("attempted to access story but did not fetch it using the .With() syntax")
	}
	return *r.RelationsStoriesOnRaids.Story
}

// EventModel represents the `json:"Event"` model and is a wrapper for accessing fields and methods
type EventModel struct {
	InternalEvent
	RelationsEvent
}

// InternalEvent holds the actual data
type InternalEvent struct {
	ID        int       `json:"id"`
	CreatedAt DateTime  `json:"createdAt"`
	DeletedAt *DateTime `json:"deletedAt"`
	UpdatedAt DateTime  `json:"updatedAt"`
	StoryID   int       `json:"storyId"`
	Sequence  int       `json:"sequence"`
}

// RelationsEvent holds the relation data separately
type RelationsEvent struct {
	Story            *StoryModel             `json:"story"`
	Action           []ActionModel           `json:"Action"`
	MessagesOnEvents []MessagesOnEventsModel `json:"MessagesOnEvents"`
}

func (r EventModel) DeletedAt() (value DateTime, ok bool) {
	if r.InternalEvent.DeletedAt == nil {
		return value, false
	}
	return *r.InternalEvent.DeletedAt, true
}

func (r EventModel) Story() (value StoryModel) {
	if r.RelationsEvent.Story == nil {
		panic("attempted to access story but did not fetch it using the .With() syntax")
	}
	return *r.RelationsEvent.Story
}

func (r EventModel) Action() (value []ActionModel) {
	if r.RelationsEvent.Action == nil {
		return value
	}
	return r.RelationsEvent.Action
}

func (r EventModel) MessagesOnEvents() (value []MessagesOnEventsModel) {
	if r.RelationsEvent.MessagesOnEvents == nil {
		return value
	}
	return r.RelationsEvent.MessagesOnEvents
}

// ActionModel represents the `json:"Action"` model and is a wrapper for accessing fields and methods
type ActionModel struct {
	InternalAction
	RelationsAction
}

// InternalAction holds the actual data
type InternalAction struct {
	ID        int       `json:"id"`
	CreatedAt DateTime  `json:"createdAt"`
	DeletedAt *DateTime `json:"deletedAt"`
	UpdatedAt DateTime  `json:"updatedAt"`
	Position  int       `json:"position"`
	EventID   int       `json:"eventId"`
}

// RelationsAction holds the relation data separately
type RelationsAction struct {
	Event             *EventModel              `json:"event"`
	MessagesOnActions []MessagesOnActionsModel `json:"MessagesOnActions"`
}

func (r ActionModel) DeletedAt() (value DateTime, ok bool) {
	if r.InternalAction.DeletedAt == nil {
		return value, false
	}
	return *r.InternalAction.DeletedAt, true
}

func (r ActionModel) Event() (value EventModel) {
	if r.RelationsAction.Event == nil {
		panic("attempted to access event but did not fetch it using the .With() syntax")
	}
	return *r.RelationsAction.Event
}

func (r ActionModel) MessagesOnActions() (value []MessagesOnActionsModel) {
	if r.RelationsAction.MessagesOnActions == nil {
		return value
	}
	return r.RelationsAction.MessagesOnActions
}

// MessageModel represents the `json:"Message"` model and is a wrapper for accessing fields and methods
type MessageModel struct {
	InternalMessage
	RelationsMessage
}

// InternalMessage holds the actual data
type InternalMessage struct {
	ID        int       `json:"id"`
	CreatedAt DateTime  `json:"createdAt"`
	DeletedAt *DateTime `json:"deletedAt"`
	UpdatedAt DateTime  `json:"updatedAt"`
	Content   string    `json:"content"`
	Type      string    `json:"type"`
}

// RelationsMessage holds the relation data separately
type RelationsMessage struct {
	MessagesOnActions []MessagesOnActionsModel `json:"MessagesOnActions"`
	MessagesOnEvents  []MessagesOnEventsModel  `json:"MessagesOnEvents"`
}

func (r MessageModel) DeletedAt() (value DateTime, ok bool) {
	if r.InternalMessage.DeletedAt == nil {
		return value, false
	}
	return *r.InternalMessage.DeletedAt, true
}

func (r MessageModel) MessagesOnActions() (value []MessagesOnActionsModel) {
	if r.RelationsMessage.MessagesOnActions == nil {
		return value
	}
	return r.RelationsMessage.MessagesOnActions
}

func (r MessageModel) MessagesOnEvents() (value []MessagesOnEventsModel) {
	if r.RelationsMessage.MessagesOnEvents == nil {
		return value
	}
	return r.RelationsMessage.MessagesOnEvents
}

// MessagesOnActionsModel represents the `json:"MessagesOnActions"` model and is a wrapper for accessing fields and methods
type MessagesOnActionsModel struct {
	InternalMessagesOnActions
	RelationsMessagesOnActions
}

// InternalMessagesOnActions holds the actual data
type InternalMessagesOnActions struct {
	CreatedAt DateTime  `json:"createdAt"`
	DeletedAt *DateTime `json:"deletedAt"`
	UpdatedAt DateTime  `json:"updatedAt"`
	MessageID int       `json:"messageId"`
	ActionID  int       `json:"actionId"`
}

// RelationsMessagesOnActions holds the relation data separately
type RelationsMessagesOnActions struct {
	Message *MessageModel `json:"message"`
	Action  *ActionModel  `json:"action"`
}

func (r MessagesOnActionsModel) DeletedAt() (value DateTime, ok bool) {
	if r.InternalMessagesOnActions.DeletedAt == nil {
		return value, false
	}
	return *r.InternalMessagesOnActions.DeletedAt, true
}

func (r MessagesOnActionsModel) Message() (value MessageModel) {
	if r.RelationsMessagesOnActions.Message == nil {
		panic("attempted to access message but did not fetch it using the .With() syntax")
	}
	return *r.RelationsMessagesOnActions.Message
}

func (r MessagesOnActionsModel) Action() (value ActionModel) {
	if r.RelationsMessagesOnActions.Action == nil {
		panic("attempted to access action but did not fetch it using the .With() syntax")
	}
	return *r.RelationsMessagesOnActions.Action
}

// MessagesOnEventsModel represents the `json:"MessagesOnEvents"` model and is a wrapper for accessing fields and methods
type MessagesOnEventsModel struct {
	InternalMessagesOnEvents
	RelationsMessagesOnEvents
}

// InternalMessagesOnEvents holds the actual data
type InternalMessagesOnEvents struct {
	CreatedAt DateTime  `json:"createdAt"`
	DeletedAt *DateTime `json:"deletedAt"`
	UpdatedAt DateTime  `json:"updatedAt"`
	MessageID int       `json:"messageId"`
	EventID   int       `json:"eventId"`
}

// RelationsMessagesOnEvents holds the relation data separately
type RelationsMessagesOnEvents struct {
	Message *MessageModel `json:"message"`
	Event   *EventModel   `json:"event"`
}

func (r MessagesOnEventsModel) DeletedAt() (value DateTime, ok bool) {
	if r.InternalMessagesOnEvents.DeletedAt == nil {
		return value, false
	}
	return *r.InternalMessagesOnEvents.DeletedAt, true
}

func (r MessagesOnEventsModel) Message() (value MessageModel) {
	if r.RelationsMessagesOnEvents.Message == nil {
		panic("attempted to access message but did not fetch it using the .With() syntax")
	}
	return *r.RelationsMessagesOnEvents.Message
}

func (r MessagesOnEventsModel) Event() (value EventModel) {
	if r.RelationsMessagesOnEvents.Event == nil {
		panic("attempted to access event but did not fetch it using the .With() syntax")
	}
	return *r.RelationsMessagesOnEvents.Event
}

// --- template query.gotpl ---

// User acts as a namespaces to access query methods for the User model
var User = userQuery{}

// userQuery exposes query functions for the user model
type userQuery struct {
	// ID
	//
	// @required
	ID userQueryIDInt

	// CreatedAt
	//
	// @required
	CreatedAt userQueryCreatedAtDateTime

	// DeletedAt
	//
	// @optional
	DeletedAt userQueryDeletedAtDateTime

	// UpdatedAt
	//
	// @required
	UpdatedAt userQueryUpdatedAtDateTime

	// DiscordUserID
	//
	// @required
	// @unique
	DiscordUserID userQueryDiscordUserIDString

	// Email
	//
	// @optional
	// @unique
	Email userQueryEmailString

	// DiscordUsername
	//
	// @optional
	// @unique
	DiscordUsername userQueryDiscordUsernameString

	// FirstName
	//
	// @optional
	FirstName userQueryFirstNameString

	// LastName
	//
	// @optional
	LastName userQueryLastNameString

	Avatar userQueryAvatarRelations
}

func (userQuery) Not(params ...iUserParams) userParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userParams{
		data: builder.Field{
			Name:     "NOT",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (userQuery) Or(params ...iUserParams) userParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userParams{
		data: builder.Field{
			Name:     "OR",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

// searched for field raidId_avatarId
// type: RaidIdAvatarIdCompoundUniqueInput

// searched for field raidId_avatarId
// type: RaidIdAvatarIdCompoundUniqueInput

// searched for field raidId_raidBossId
// type: RaidIdRaidBossIdCompoundUniqueInput

// searched for field raidId_raidBossId
// type: RaidIdRaidBossIdCompoundUniqueInput

// searched for field raidId_storyId
// type: RaidIdStoryIdCompoundUniqueInput

// searched for field raidId_storyId
// type: RaidIdStoryIdCompoundUniqueInput

// searched for field id
// type: Int

// searched for field storyId_sequence
// type: StoryIdSequenceCompoundUniqueInput

// searched for field id
// type: Int

// searched for field eventId_position
// type: EventIdPositionCompoundUniqueInput

// searched for field messageId_actionId
// type: MessageIdActionIdCompoundUniqueInput

// searched for field messageId_actionId
// type: MessageIdActionIdCompoundUniqueInput

// searched for field messageId_eventId
// type: MessageIdEventIdCompoundUniqueInput

// searched for field messageId_eventId
// type: MessageIdEventIdCompoundUniqueInput

// base struct
type userQueryIDInt struct{}

// Set the required value of ID
func (r userQueryIDInt) Set(value int) userSetParams {

	return userSetParams{
		data: builder.Field{
			Name:  "id",
			Value: value,
		},
	}

}

func (r userQueryIDInt) Equals(value int) userWithPrismaIDEqualsParamsUnique {
	return userWithPrismaIDEqualsParamsUnique{
		data: builder.Field{
			Name:  "id",
			Value: value,
		},
	}
}

func (r userQueryIDInt) In(values []int) userParamsUnique {
	f := builder.Field{
		Name:   "id",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return userParamsUnique{
		data: f,
	}
}

func (r userQueryIDInt) Order(direction runtime.Direction) userParams {
	return userParams{
		data: builder.Field{
			Name:  "id",
			Value: direction,
		},
	}
}

func (r userQueryIDInt) Cursor(cursor string) userCursorParams {
	return userCursorParams{
		data: builder.Field{
			Name:  "id",
			Value: cursor,
		},
	}
}

func (r userQueryIDInt) LT(value int) userParamsUnique {
	return userParamsUnique{
		data: builder.Field{
			Action: "lt",
			Name:   "id",
			Value:  value,
		},
	}
}

func (r userQueryIDInt) GT(value int) userParamsUnique {
	return userParamsUnique{
		data: builder.Field{
			Action: "gt",
			Name:   "id",
			Value:  value,
		},
	}
}

func (r userQueryIDInt) LTE(value int) userParamsUnique {
	return userParamsUnique{
		data: builder.Field{
			Action: "lte",
			Name:   "id",
			Value:  value,
		},
	}
}

func (r userQueryIDInt) GTE(value int) userParamsUnique {
	return userParamsUnique{
		data: builder.Field{
			Action: "gte",
			Name:   "id",
			Value:  value,
		},
	}
}

// base struct
type userQueryCreatedAtDateTime struct{}

// Set the required value of CreatedAt
func (r userQueryCreatedAtDateTime) Set(value DateTime) userSetParams {

	return userSetParams{
		data: builder.Field{
			Name:  "createdAt",
			Value: value,
		},
	}

}

func (r userQueryCreatedAtDateTime) Equals(value DateTime) userWithPrismaCreatedAtEqualsParams {
	return userWithPrismaCreatedAtEqualsParams{
		data: builder.Field{
			Name:  "createdAt",
			Value: value,
		},
	}
}

func (r userQueryCreatedAtDateTime) In(values []DateTime) userParams {
	f := builder.Field{
		Name:   "createdAt",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return userParams{
		data: f,
	}
}

func (r userQueryCreatedAtDateTime) Order(direction runtime.Direction) userParams {
	return userParams{
		data: builder.Field{
			Name:  "createdAt",
			Value: direction,
		},
	}
}

func (r userQueryCreatedAtDateTime) Before(value DateTime) userParams {
	return userParams{
		data: builder.Field{
			Action: "lt",
			Name:   "createdAt",
			Value:  value,
		},
	}
}

func (r userQueryCreatedAtDateTime) After(value DateTime) userParams {
	return userParams{
		data: builder.Field{
			Action: "gt",
			Name:   "createdAt",
			Value:  value,
		},
	}
}

func (r userQueryCreatedAtDateTime) BeforeEquals(value DateTime) userParams {
	return userParams{
		data: builder.Field{
			Action: "lte",
			Name:   "createdAt",
			Value:  value,
		},
	}
}

func (r userQueryCreatedAtDateTime) AfterEquals(value DateTime) userParams {
	return userParams{
		data: builder.Field{
			Action: "gte",
			Name:   "createdAt",
			Value:  value,
		},
	}
}

// base struct
type userQueryDeletedAtDateTime struct{}

// Set the optional value of DeletedAt
func (r userQueryDeletedAtDateTime) Set(value DateTime) userSetParams {

	return userSetParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: value,
		},
	}

}

// Set the optional value of DeletedAt dynamically
func (r userQueryDeletedAtDateTime) SetOptional(value *DateTime) userSetParams {
	if value == nil {

		var v *DateTime
		return userSetParams{
			data: builder.Field{
				Name:  "deletedAt",
				Value: v,
			},
		}
	}

	return r.Set(*value)
}

func (r userQueryDeletedAtDateTime) Equals(value DateTime) userWithPrismaDeletedAtEqualsParams {
	return userWithPrismaDeletedAtEqualsParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: value,
		},
	}
}

func (r userQueryDeletedAtDateTime) In(values []DateTime) userParams {
	f := builder.Field{
		Name:   "deletedAt",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return userParams{
		data: f,
	}
}

func (r userQueryDeletedAtDateTime) EqualsOptional(value *DateTime) userParams {
	return userParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: value,
		},
	}
}

func (r userQueryDeletedAtDateTime) IsNull() userParams {
	var str *string = nil
	return userParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: str,
		},
	}
}

func (r userQueryDeletedAtDateTime) Order(direction runtime.Direction) userParams {
	return userParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: direction,
		},
	}
}

func (r userQueryDeletedAtDateTime) Before(value DateTime) userParams {
	return userParams{
		data: builder.Field{
			Action: "lt",
			Name:   "deletedAt",
			Value:  value,
		},
	}
}

func (r userQueryDeletedAtDateTime) After(value DateTime) userParams {
	return userParams{
		data: builder.Field{
			Action: "gt",
			Name:   "deletedAt",
			Value:  value,
		},
	}
}

func (r userQueryDeletedAtDateTime) BeforeEquals(value DateTime) userParams {
	return userParams{
		data: builder.Field{
			Action: "lte",
			Name:   "deletedAt",
			Value:  value,
		},
	}
}

func (r userQueryDeletedAtDateTime) AfterEquals(value DateTime) userParams {
	return userParams{
		data: builder.Field{
			Action: "gte",
			Name:   "deletedAt",
			Value:  value,
		},
	}
}

// base struct
type userQueryUpdatedAtDateTime struct{}

// Set the required value of UpdatedAt
func (r userQueryUpdatedAtDateTime) Set(value DateTime) userSetParams {

	return userSetParams{
		data: builder.Field{
			Name:  "updatedAt",
			Value: value,
		},
	}

}

func (r userQueryUpdatedAtDateTime) Equals(value DateTime) userWithPrismaUpdatedAtEqualsParams {
	return userWithPrismaUpdatedAtEqualsParams{
		data: builder.Field{
			Name:  "updatedAt",
			Value: value,
		},
	}
}

func (r userQueryUpdatedAtDateTime) In(values []DateTime) userParams {
	f := builder.Field{
		Name:   "updatedAt",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return userParams{
		data: f,
	}
}

func (r userQueryUpdatedAtDateTime) Order(direction runtime.Direction) userParams {
	return userParams{
		data: builder.Field{
			Name:  "updatedAt",
			Value: direction,
		},
	}
}

func (r userQueryUpdatedAtDateTime) Before(value DateTime) userParams {
	return userParams{
		data: builder.Field{
			Action: "lt",
			Name:   "updatedAt",
			Value:  value,
		},
	}
}

func (r userQueryUpdatedAtDateTime) After(value DateTime) userParams {
	return userParams{
		data: builder.Field{
			Action: "gt",
			Name:   "updatedAt",
			Value:  value,
		},
	}
}

func (r userQueryUpdatedAtDateTime) BeforeEquals(value DateTime) userParams {
	return userParams{
		data: builder.Field{
			Action: "lte",
			Name:   "updatedAt",
			Value:  value,
		},
	}
}

func (r userQueryUpdatedAtDateTime) AfterEquals(value DateTime) userParams {
	return userParams{
		data: builder.Field{
			Action: "gte",
			Name:   "updatedAt",
			Value:  value,
		},
	}
}

// base struct
type userQueryDiscordUserIDString struct{}

// Set the required value of DiscordUserID
func (r userQueryDiscordUserIDString) Set(value string) userWithPrismaDiscordUserIDSetParams {

	return userWithPrismaDiscordUserIDSetParams{
		data: builder.Field{
			Name:  "discordUserId",
			Value: value,
		},
	}

}

func (r userQueryDiscordUserIDString) Equals(value string) userWithPrismaDiscordUserIDEqualsParamsUnique {
	return userWithPrismaDiscordUserIDEqualsParamsUnique{
		data: builder.Field{
			Name:  "discordUserId",
			Value: value,
		},
	}
}

func (r userQueryDiscordUserIDString) In(values []string) userParamsUnique {
	f := builder.Field{
		Name:   "discordUserId",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return userParamsUnique{
		data: f,
	}
}

func (r userQueryDiscordUserIDString) Order(direction runtime.Direction) userParams {
	return userParams{
		data: builder.Field{
			Name:  "discordUserId",
			Value: direction,
		},
	}
}

func (r userQueryDiscordUserIDString) Cursor(cursor string) userCursorParams {
	return userCursorParams{
		data: builder.Field{
			Name:  "discordUserId",
			Value: cursor,
		},
	}
}

func (r userQueryDiscordUserIDString) Contains(value string) userParamsUnique {
	return userParamsUnique{
		data: builder.Field{
			Action: "contains",
			Name:   "discordUserId",
			Value:  value,
		},
	}
}

func (r userQueryDiscordUserIDString) HasPrefix(value string) userParamsUnique {
	return userParamsUnique{
		data: builder.Field{
			Action: "starts_with",
			Name:   "discordUserId",
			Value:  value,
		},
	}
}

func (r userQueryDiscordUserIDString) HasSuffix(value string) userParamsUnique {
	return userParamsUnique{
		data: builder.Field{
			Action: "ends_with",
			Name:   "discordUserId",
			Value:  value,
		},
	}
}

// base struct
type userQueryEmailString struct{}

// Set the optional value of Email
func (r userQueryEmailString) Set(value string) userSetParams {

	return userSetParams{
		data: builder.Field{
			Name:  "email",
			Value: value,
		},
	}

}

// Set the optional value of Email dynamically
func (r userQueryEmailString) SetOptional(value *string) userSetParams {
	if value == nil {

		var v *string
		return userSetParams{
			data: builder.Field{
				Name:  "email",
				Value: v,
			},
		}
	}

	return r.Set(*value)
}

func (r userQueryEmailString) Equals(value string) userWithPrismaEmailEqualsParamsUnique {
	return userWithPrismaEmailEqualsParamsUnique{
		data: builder.Field{
			Name:  "email",
			Value: value,
		},
	}
}

func (r userQueryEmailString) In(values []string) userParamsUnique {
	f := builder.Field{
		Name:   "email",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return userParamsUnique{
		data: f,
	}
}

func (r userQueryEmailString) EqualsOptional(value *string) userParamsUnique {
	return userParamsUnique{
		data: builder.Field{
			Name:  "email",
			Value: value,
		},
	}
}

func (r userQueryEmailString) IsNull() userParamsUnique {
	var str *string = nil
	return userParamsUnique{
		data: builder.Field{
			Name:  "email",
			Value: str,
		},
	}
}

func (r userQueryEmailString) Order(direction runtime.Direction) userParams {
	return userParams{
		data: builder.Field{
			Name:  "email",
			Value: direction,
		},
	}
}

func (r userQueryEmailString) Cursor(cursor string) userCursorParams {
	return userCursorParams{
		data: builder.Field{
			Name:  "email",
			Value: cursor,
		},
	}
}

func (r userQueryEmailString) Contains(value string) userParamsUnique {
	return userParamsUnique{
		data: builder.Field{
			Action: "contains",
			Name:   "email",
			Value:  value,
		},
	}
}

func (r userQueryEmailString) HasPrefix(value string) userParamsUnique {
	return userParamsUnique{
		data: builder.Field{
			Action: "starts_with",
			Name:   "email",
			Value:  value,
		},
	}
}

func (r userQueryEmailString) HasSuffix(value string) userParamsUnique {
	return userParamsUnique{
		data: builder.Field{
			Action: "ends_with",
			Name:   "email",
			Value:  value,
		},
	}
}

// base struct
type userQueryDiscordUsernameString struct{}

// Set the optional value of DiscordUsername
func (r userQueryDiscordUsernameString) Set(value string) userSetParams {

	return userSetParams{
		data: builder.Field{
			Name:  "discordUsername",
			Value: value,
		},
	}

}

// Set the optional value of DiscordUsername dynamically
func (r userQueryDiscordUsernameString) SetOptional(value *string) userSetParams {
	if value == nil {

		var v *string
		return userSetParams{
			data: builder.Field{
				Name:  "discordUsername",
				Value: v,
			},
		}
	}

	return r.Set(*value)
}

func (r userQueryDiscordUsernameString) Equals(value string) userWithPrismaDiscordUsernameEqualsParamsUnique {
	return userWithPrismaDiscordUsernameEqualsParamsUnique{
		data: builder.Field{
			Name:  "discordUsername",
			Value: value,
		},
	}
}

func (r userQueryDiscordUsernameString) In(values []string) userParamsUnique {
	f := builder.Field{
		Name:   "discordUsername",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return userParamsUnique{
		data: f,
	}
}

func (r userQueryDiscordUsernameString) EqualsOptional(value *string) userParamsUnique {
	return userParamsUnique{
		data: builder.Field{
			Name:  "discordUsername",
			Value: value,
		},
	}
}

func (r userQueryDiscordUsernameString) IsNull() userParamsUnique {
	var str *string = nil
	return userParamsUnique{
		data: builder.Field{
			Name:  "discordUsername",
			Value: str,
		},
	}
}

func (r userQueryDiscordUsernameString) Order(direction runtime.Direction) userParams {
	return userParams{
		data: builder.Field{
			Name:  "discordUsername",
			Value: direction,
		},
	}
}

func (r userQueryDiscordUsernameString) Cursor(cursor string) userCursorParams {
	return userCursorParams{
		data: builder.Field{
			Name:  "discordUsername",
			Value: cursor,
		},
	}
}

func (r userQueryDiscordUsernameString) Contains(value string) userParamsUnique {
	return userParamsUnique{
		data: builder.Field{
			Action: "contains",
			Name:   "discordUsername",
			Value:  value,
		},
	}
}

func (r userQueryDiscordUsernameString) HasPrefix(value string) userParamsUnique {
	return userParamsUnique{
		data: builder.Field{
			Action: "starts_with",
			Name:   "discordUsername",
			Value:  value,
		},
	}
}

func (r userQueryDiscordUsernameString) HasSuffix(value string) userParamsUnique {
	return userParamsUnique{
		data: builder.Field{
			Action: "ends_with",
			Name:   "discordUsername",
			Value:  value,
		},
	}
}

// base struct
type userQueryFirstNameString struct{}

// Set the optional value of FirstName
func (r userQueryFirstNameString) Set(value string) userSetParams {

	return userSetParams{
		data: builder.Field{
			Name:  "firstName",
			Value: value,
		},
	}

}

// Set the optional value of FirstName dynamically
func (r userQueryFirstNameString) SetOptional(value *string) userSetParams {
	if value == nil {

		var v *string
		return userSetParams{
			data: builder.Field{
				Name:  "firstName",
				Value: v,
			},
		}
	}

	return r.Set(*value)
}

func (r userQueryFirstNameString) Equals(value string) userWithPrismaFirstNameEqualsParams {
	return userWithPrismaFirstNameEqualsParams{
		data: builder.Field{
			Name:  "firstName",
			Value: value,
		},
	}
}

func (r userQueryFirstNameString) In(values []string) userParams {
	f := builder.Field{
		Name:   "firstName",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return userParams{
		data: f,
	}
}

func (r userQueryFirstNameString) EqualsOptional(value *string) userParams {
	return userParams{
		data: builder.Field{
			Name:  "firstName",
			Value: value,
		},
	}
}

func (r userQueryFirstNameString) IsNull() userParams {
	var str *string = nil
	return userParams{
		data: builder.Field{
			Name:  "firstName",
			Value: str,
		},
	}
}

func (r userQueryFirstNameString) Order(direction runtime.Direction) userParams {
	return userParams{
		data: builder.Field{
			Name:  "firstName",
			Value: direction,
		},
	}
}

func (r userQueryFirstNameString) Contains(value string) userParams {
	return userParams{
		data: builder.Field{
			Action: "contains",
			Name:   "firstName",
			Value:  value,
		},
	}
}

func (r userQueryFirstNameString) HasPrefix(value string) userParams {
	return userParams{
		data: builder.Field{
			Action: "starts_with",
			Name:   "firstName",
			Value:  value,
		},
	}
}

func (r userQueryFirstNameString) HasSuffix(value string) userParams {
	return userParams{
		data: builder.Field{
			Action: "ends_with",
			Name:   "firstName",
			Value:  value,
		},
	}
}

// base struct
type userQueryLastNameString struct{}

// Set the optional value of LastName
func (r userQueryLastNameString) Set(value string) userSetParams {

	return userSetParams{
		data: builder.Field{
			Name:  "lastName",
			Value: value,
		},
	}

}

// Set the optional value of LastName dynamically
func (r userQueryLastNameString) SetOptional(value *string) userSetParams {
	if value == nil {

		var v *string
		return userSetParams{
			data: builder.Field{
				Name:  "lastName",
				Value: v,
			},
		}
	}

	return r.Set(*value)
}

func (r userQueryLastNameString) Equals(value string) userWithPrismaLastNameEqualsParams {
	return userWithPrismaLastNameEqualsParams{
		data: builder.Field{
			Name:  "lastName",
			Value: value,
		},
	}
}

func (r userQueryLastNameString) In(values []string) userParams {
	f := builder.Field{
		Name:   "lastName",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return userParams{
		data: f,
	}
}

func (r userQueryLastNameString) EqualsOptional(value *string) userParams {
	return userParams{
		data: builder.Field{
			Name:  "lastName",
			Value: value,
		},
	}
}

func (r userQueryLastNameString) IsNull() userParams {
	var str *string = nil
	return userParams{
		data: builder.Field{
			Name:  "lastName",
			Value: str,
		},
	}
}

func (r userQueryLastNameString) Order(direction runtime.Direction) userParams {
	return userParams{
		data: builder.Field{
			Name:  "lastName",
			Value: direction,
		},
	}
}

func (r userQueryLastNameString) Contains(value string) userParams {
	return userParams{
		data: builder.Field{
			Action: "contains",
			Name:   "lastName",
			Value:  value,
		},
	}
}

func (r userQueryLastNameString) HasPrefix(value string) userParams {
	return userParams{
		data: builder.Field{
			Action: "starts_with",
			Name:   "lastName",
			Value:  value,
		},
	}
}

func (r userQueryLastNameString) HasSuffix(value string) userParams {
	return userParams{
		data: builder.Field{
			Action: "ends_with",
			Name:   "lastName",
			Value:  value,
		},
	}
}

// base struct
type userQueryAvatarAvatar struct{}

type userQueryAvatarRelations struct{}

// User -> Avatar
//
// @relation
// @optional
func (userQueryAvatarRelations) Where(
	params ...iAvatarParams,
) userParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userParams{
		data: builder.Field{
			Name:   "avatar",
			Action: "",
			Fields: fields,
		},
	}
}

func (userQueryAvatarRelations) Fetch() userToAvatarFindOne {
	var v userToAvatarFindOne

	v.query.Operation = "query"
	v.query.Method = "avatar"
	v.query.Outputs = avatarOutput

	return v
}

func (r userQueryAvatarRelations) Link(
	params ...iAvatarParams,
) userSetParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userSetParams{
		data: builder.Field{
			Name: "avatar",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: fields,
				},
			},
		},
	}
}

func (r userQueryAvatarRelations) Unlink() userSetParams {
	return userSetParams{
		data: builder.Field{
			Name: "avatar",
			Fields: []builder.Field{
				{
					Name:  "disconnect",
					Value: true,
				},
			},
		},
	}
}

// Avatar acts as a namespaces to access query methods for the Avatar model
var Avatar = avatarQuery{}

// avatarQuery exposes query functions for the avatar model
type avatarQuery struct {
	// ID
	//
	// @required
	ID avatarQueryIDInt

	// CreatedAt
	//
	// @required
	CreatedAt avatarQueryCreatedAtDateTime

	// DeletedAt
	//
	// @optional
	DeletedAt avatarQueryDeletedAtDateTime

	// UpdatedAt
	//
	// @required
	UpdatedAt avatarQueryUpdatedAtDateTime

	User avatarQueryUserRelations

	// UserID
	//
	// @required
	// @unique
	UserID avatarQueryUserIDInt

	AvatarsOnRaids avatarQueryAvatarsOnRaidsRelations
}

func (avatarQuery) Not(params ...iAvatarParams) avatarParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return avatarParams{
		data: builder.Field{
			Name:     "NOT",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (avatarQuery) Or(params ...iAvatarParams) avatarParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return avatarParams{
		data: builder.Field{
			Name:     "OR",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

// searched for field raidId_avatarId
// type: RaidIdAvatarIdCompoundUniqueInput

// searched for field raidId_avatarId
// type: RaidIdAvatarIdCompoundUniqueInput

// searched for field raidId_raidBossId
// type: RaidIdRaidBossIdCompoundUniqueInput

// searched for field raidId_raidBossId
// type: RaidIdRaidBossIdCompoundUniqueInput

// searched for field raidId_storyId
// type: RaidIdStoryIdCompoundUniqueInput

// searched for field raidId_storyId
// type: RaidIdStoryIdCompoundUniqueInput

// searched for field id
// type: Int

// searched for field storyId_sequence
// type: StoryIdSequenceCompoundUniqueInput

// searched for field id
// type: Int

// searched for field eventId_position
// type: EventIdPositionCompoundUniqueInput

// searched for field messageId_actionId
// type: MessageIdActionIdCompoundUniqueInput

// searched for field messageId_actionId
// type: MessageIdActionIdCompoundUniqueInput

// searched for field messageId_eventId
// type: MessageIdEventIdCompoundUniqueInput

// searched for field messageId_eventId
// type: MessageIdEventIdCompoundUniqueInput

// base struct
type avatarQueryIDInt struct{}

// Set the required value of ID
func (r avatarQueryIDInt) Set(value int) avatarSetParams {

	return avatarSetParams{
		data: builder.Field{
			Name:  "id",
			Value: value,
		},
	}

}

func (r avatarQueryIDInt) Equals(value int) avatarWithPrismaIDEqualsParamsUnique {
	return avatarWithPrismaIDEqualsParamsUnique{
		data: builder.Field{
			Name:  "id",
			Value: value,
		},
	}
}

func (r avatarQueryIDInt) In(values []int) avatarParamsUnique {
	f := builder.Field{
		Name:   "id",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return avatarParamsUnique{
		data: f,
	}
}

func (r avatarQueryIDInt) Order(direction runtime.Direction) avatarParams {
	return avatarParams{
		data: builder.Field{
			Name:  "id",
			Value: direction,
		},
	}
}

func (r avatarQueryIDInt) Cursor(cursor string) avatarCursorParams {
	return avatarCursorParams{
		data: builder.Field{
			Name:  "id",
			Value: cursor,
		},
	}
}

func (r avatarQueryIDInt) LT(value int) avatarParamsUnique {
	return avatarParamsUnique{
		data: builder.Field{
			Action: "lt",
			Name:   "id",
			Value:  value,
		},
	}
}

func (r avatarQueryIDInt) GT(value int) avatarParamsUnique {
	return avatarParamsUnique{
		data: builder.Field{
			Action: "gt",
			Name:   "id",
			Value:  value,
		},
	}
}

func (r avatarQueryIDInt) LTE(value int) avatarParamsUnique {
	return avatarParamsUnique{
		data: builder.Field{
			Action: "lte",
			Name:   "id",
			Value:  value,
		},
	}
}

func (r avatarQueryIDInt) GTE(value int) avatarParamsUnique {
	return avatarParamsUnique{
		data: builder.Field{
			Action: "gte",
			Name:   "id",
			Value:  value,
		},
	}
}

// base struct
type avatarQueryCreatedAtDateTime struct{}

// Set the required value of CreatedAt
func (r avatarQueryCreatedAtDateTime) Set(value DateTime) avatarSetParams {

	return avatarSetParams{
		data: builder.Field{
			Name:  "createdAt",
			Value: value,
		},
	}

}

func (r avatarQueryCreatedAtDateTime) Equals(value DateTime) avatarWithPrismaCreatedAtEqualsParams {
	return avatarWithPrismaCreatedAtEqualsParams{
		data: builder.Field{
			Name:  "createdAt",
			Value: value,
		},
	}
}

func (r avatarQueryCreatedAtDateTime) In(values []DateTime) avatarParams {
	f := builder.Field{
		Name:   "createdAt",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return avatarParams{
		data: f,
	}
}

func (r avatarQueryCreatedAtDateTime) Order(direction runtime.Direction) avatarParams {
	return avatarParams{
		data: builder.Field{
			Name:  "createdAt",
			Value: direction,
		},
	}
}

func (r avatarQueryCreatedAtDateTime) Before(value DateTime) avatarParams {
	return avatarParams{
		data: builder.Field{
			Action: "lt",
			Name:   "createdAt",
			Value:  value,
		},
	}
}

func (r avatarQueryCreatedAtDateTime) After(value DateTime) avatarParams {
	return avatarParams{
		data: builder.Field{
			Action: "gt",
			Name:   "createdAt",
			Value:  value,
		},
	}
}

func (r avatarQueryCreatedAtDateTime) BeforeEquals(value DateTime) avatarParams {
	return avatarParams{
		data: builder.Field{
			Action: "lte",
			Name:   "createdAt",
			Value:  value,
		},
	}
}

func (r avatarQueryCreatedAtDateTime) AfterEquals(value DateTime) avatarParams {
	return avatarParams{
		data: builder.Field{
			Action: "gte",
			Name:   "createdAt",
			Value:  value,
		},
	}
}

// base struct
type avatarQueryDeletedAtDateTime struct{}

// Set the optional value of DeletedAt
func (r avatarQueryDeletedAtDateTime) Set(value DateTime) avatarSetParams {

	return avatarSetParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: value,
		},
	}

}

// Set the optional value of DeletedAt dynamically
func (r avatarQueryDeletedAtDateTime) SetOptional(value *DateTime) avatarSetParams {
	if value == nil {

		var v *DateTime
		return avatarSetParams{
			data: builder.Field{
				Name:  "deletedAt",
				Value: v,
			},
		}
	}

	return r.Set(*value)
}

func (r avatarQueryDeletedAtDateTime) Equals(value DateTime) avatarWithPrismaDeletedAtEqualsParams {
	return avatarWithPrismaDeletedAtEqualsParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: value,
		},
	}
}

func (r avatarQueryDeletedAtDateTime) In(values []DateTime) avatarParams {
	f := builder.Field{
		Name:   "deletedAt",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return avatarParams{
		data: f,
	}
}

func (r avatarQueryDeletedAtDateTime) EqualsOptional(value *DateTime) avatarParams {
	return avatarParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: value,
		},
	}
}

func (r avatarQueryDeletedAtDateTime) IsNull() avatarParams {
	var str *string = nil
	return avatarParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: str,
		},
	}
}

func (r avatarQueryDeletedAtDateTime) Order(direction runtime.Direction) avatarParams {
	return avatarParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: direction,
		},
	}
}

func (r avatarQueryDeletedAtDateTime) Before(value DateTime) avatarParams {
	return avatarParams{
		data: builder.Field{
			Action: "lt",
			Name:   "deletedAt",
			Value:  value,
		},
	}
}

func (r avatarQueryDeletedAtDateTime) After(value DateTime) avatarParams {
	return avatarParams{
		data: builder.Field{
			Action: "gt",
			Name:   "deletedAt",
			Value:  value,
		},
	}
}

func (r avatarQueryDeletedAtDateTime) BeforeEquals(value DateTime) avatarParams {
	return avatarParams{
		data: builder.Field{
			Action: "lte",
			Name:   "deletedAt",
			Value:  value,
		},
	}
}

func (r avatarQueryDeletedAtDateTime) AfterEquals(value DateTime) avatarParams {
	return avatarParams{
		data: builder.Field{
			Action: "gte",
			Name:   "deletedAt",
			Value:  value,
		},
	}
}

// base struct
type avatarQueryUpdatedAtDateTime struct{}

// Set the required value of UpdatedAt
func (r avatarQueryUpdatedAtDateTime) Set(value DateTime) avatarSetParams {

	return avatarSetParams{
		data: builder.Field{
			Name:  "updatedAt",
			Value: value,
		},
	}

}

func (r avatarQueryUpdatedAtDateTime) Equals(value DateTime) avatarWithPrismaUpdatedAtEqualsParams {
	return avatarWithPrismaUpdatedAtEqualsParams{
		data: builder.Field{
			Name:  "updatedAt",
			Value: value,
		},
	}
}

func (r avatarQueryUpdatedAtDateTime) In(values []DateTime) avatarParams {
	f := builder.Field{
		Name:   "updatedAt",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return avatarParams{
		data: f,
	}
}

func (r avatarQueryUpdatedAtDateTime) Order(direction runtime.Direction) avatarParams {
	return avatarParams{
		data: builder.Field{
			Name:  "updatedAt",
			Value: direction,
		},
	}
}

func (r avatarQueryUpdatedAtDateTime) Before(value DateTime) avatarParams {
	return avatarParams{
		data: builder.Field{
			Action: "lt",
			Name:   "updatedAt",
			Value:  value,
		},
	}
}

func (r avatarQueryUpdatedAtDateTime) After(value DateTime) avatarParams {
	return avatarParams{
		data: builder.Field{
			Action: "gt",
			Name:   "updatedAt",
			Value:  value,
		},
	}
}

func (r avatarQueryUpdatedAtDateTime) BeforeEquals(value DateTime) avatarParams {
	return avatarParams{
		data: builder.Field{
			Action: "lte",
			Name:   "updatedAt",
			Value:  value,
		},
	}
}

func (r avatarQueryUpdatedAtDateTime) AfterEquals(value DateTime) avatarParams {
	return avatarParams{
		data: builder.Field{
			Action: "gte",
			Name:   "updatedAt",
			Value:  value,
		},
	}
}

// base struct
type avatarQueryUserUser struct{}

type avatarQueryUserRelations struct{}

// Avatar -> User
//
// @relation
// @required
func (avatarQueryUserRelations) Where(
	params ...iUserParams,
) avatarParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return avatarParams{
		data: builder.Field{
			Name:   "User",
			Action: "",
			Fields: fields,
		},
	}
}

func (avatarQueryUserRelations) Fetch() avatarToUserFindOne {
	var v avatarToUserFindOne

	v.query.Operation = "query"
	v.query.Method = "User"
	v.query.Outputs = userOutput

	return v
}

func (r avatarQueryUserRelations) Link(
	params ...iUserParams,
) avatarWithPrismaUserSetParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return avatarWithPrismaUserSetParams{
		data: builder.Field{
			Name: "User",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: fields,
				},
			},
		},
	}
}

// base struct
type avatarQueryUserIDInt struct{}

// Set the required value of UserID
func (r avatarQueryUserIDInt) Set(value int) avatarWithPrismaUserIDSetParams {

	return avatarWithPrismaUserIDSetParams{
		data: builder.Field{
			Name:  "userId",
			Value: value,
		},
	}

}

func (r avatarQueryUserIDInt) Equals(value int) avatarWithPrismaUserIDEqualsParamsUnique {
	return avatarWithPrismaUserIDEqualsParamsUnique{
		data: builder.Field{
			Name:  "userId",
			Value: value,
		},
	}
}

func (r avatarQueryUserIDInt) In(values []int) avatarParamsUnique {
	f := builder.Field{
		Name:   "userId",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return avatarParamsUnique{
		data: f,
	}
}

func (r avatarQueryUserIDInt) Order(direction runtime.Direction) avatarParams {
	return avatarParams{
		data: builder.Field{
			Name:  "userId",
			Value: direction,
		},
	}
}

func (r avatarQueryUserIDInt) Cursor(cursor string) avatarCursorParams {
	return avatarCursorParams{
		data: builder.Field{
			Name:  "userId",
			Value: cursor,
		},
	}
}

func (r avatarQueryUserIDInt) LT(value int) avatarParamsUnique {
	return avatarParamsUnique{
		data: builder.Field{
			Action: "lt",
			Name:   "userId",
			Value:  value,
		},
	}
}

func (r avatarQueryUserIDInt) GT(value int) avatarParamsUnique {
	return avatarParamsUnique{
		data: builder.Field{
			Action: "gt",
			Name:   "userId",
			Value:  value,
		},
	}
}

func (r avatarQueryUserIDInt) LTE(value int) avatarParamsUnique {
	return avatarParamsUnique{
		data: builder.Field{
			Action: "lte",
			Name:   "userId",
			Value:  value,
		},
	}
}

func (r avatarQueryUserIDInt) GTE(value int) avatarParamsUnique {
	return avatarParamsUnique{
		data: builder.Field{
			Action: "gte",
			Name:   "userId",
			Value:  value,
		},
	}
}

// base struct
type avatarQueryAvatarsOnRaidsAvatarsOnRaids struct{}

type avatarQueryAvatarsOnRaidsRelations struct{}

// Avatar -> AvatarsOnRaids
//
// @relation
// @optional
func (avatarQueryAvatarsOnRaidsRelations) Some(
	params ...iAvatarsOnRaidsParams,
) avatarParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return avatarParams{
		data: builder.Field{
			Name:   "AvatarsOnRaids",
			Action: "some",
			Fields: fields,
		},
	}
}

// Avatar -> AvatarsOnRaids
//
// @relation
// @optional
func (avatarQueryAvatarsOnRaidsRelations) Every(
	params ...iAvatarsOnRaidsParams,
) avatarParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return avatarParams{
		data: builder.Field{
			Name:   "AvatarsOnRaids",
			Action: "every",
			Fields: fields,
		},
	}
}

func (avatarQueryAvatarsOnRaidsRelations) Fetch(

	params ...iAvatarsOnRaidsParams,

) avatarToAvatarsOnRaidsFindMany {
	var v avatarToAvatarsOnRaidsFindMany

	v.query.Operation = "query"
	v.query.Method = "AvatarsOnRaids"
	v.query.Outputs = avatarsOnRaidsOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r avatarQueryAvatarsOnRaidsRelations) Link(
	params ...iAvatarsOnRaidsParams,
) avatarSetParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return avatarSetParams{
		data: builder.Field{
			Name: "AvatarsOnRaids",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: fields,
				},
			},
		},
	}
}

func (r avatarQueryAvatarsOnRaidsRelations) Unlink() avatarSetParams {
	return avatarSetParams{
		data: builder.Field{
			Name: "AvatarsOnRaids",
			Fields: []builder.Field{
				{
					Name:  "disconnect",
					Value: true,
				},
			},
		},
	}
}

// Raid acts as a namespaces to access query methods for the Raid model
var Raid = raidQuery{}

// raidQuery exposes query functions for the raid model
type raidQuery struct {
	// ID
	//
	// @required
	ID raidQueryIDInt

	// CreatedAt
	//
	// @required
	CreatedAt raidQueryCreatedAtDateTime

	// DeletedAt
	//
	// @optional
	DeletedAt raidQueryDeletedAtDateTime

	// UpdatedAt
	//
	// @required
	UpdatedAt raidQueryUpdatedAtDateTime

	// StartTime
	//
	// @required
	StartTime raidQueryStartTimeDateTime

	// EndTime
	//
	// @optional
	EndTime raidQueryEndTimeDateTime

	// CompletionProgress
	//
	// @required
	CompletionProgress raidQueryCompletionProgressFloat

	// Active
	//
	// @required
	Active raidQueryActiveBoolean

	// PlayerLimit
	//
	// @required
	PlayerLimit raidQueryPlayerLimitInt

	// PlayerCount
	//
	// @required
	PlayerCount raidQueryPlayerCountInt

	AvatarsOnRaids raidQueryAvatarsOnRaidsRelations

	RaidBossesOnRaids raidQueryRaidBossesOnRaidsRelations

	StoriesOnRaids raidQueryStoriesOnRaidsRelations
}

func (raidQuery) Not(params ...iRaidParams) raidParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return raidParams{
		data: builder.Field{
			Name:     "NOT",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (raidQuery) Or(params ...iRaidParams) raidParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return raidParams{
		data: builder.Field{
			Name:     "OR",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

// searched for field raidId_avatarId
// type: RaidIdAvatarIdCompoundUniqueInput

// searched for field raidId_avatarId
// type: RaidIdAvatarIdCompoundUniqueInput

// searched for field raidId_raidBossId
// type: RaidIdRaidBossIdCompoundUniqueInput

// searched for field raidId_raidBossId
// type: RaidIdRaidBossIdCompoundUniqueInput

// searched for field raidId_storyId
// type: RaidIdStoryIdCompoundUniqueInput

// searched for field raidId_storyId
// type: RaidIdStoryIdCompoundUniqueInput

// searched for field id
// type: Int

// searched for field storyId_sequence
// type: StoryIdSequenceCompoundUniqueInput

// searched for field id
// type: Int

// searched for field eventId_position
// type: EventIdPositionCompoundUniqueInput

// searched for field messageId_actionId
// type: MessageIdActionIdCompoundUniqueInput

// searched for field messageId_actionId
// type: MessageIdActionIdCompoundUniqueInput

// searched for field messageId_eventId
// type: MessageIdEventIdCompoundUniqueInput

// searched for field messageId_eventId
// type: MessageIdEventIdCompoundUniqueInput

// base struct
type raidQueryIDInt struct{}

// Set the required value of ID
func (r raidQueryIDInt) Set(value int) raidSetParams {

	return raidSetParams{
		data: builder.Field{
			Name:  "id",
			Value: value,
		},
	}

}

func (r raidQueryIDInt) Equals(value int) raidWithPrismaIDEqualsParamsUnique {
	return raidWithPrismaIDEqualsParamsUnique{
		data: builder.Field{
			Name:  "id",
			Value: value,
		},
	}
}

func (r raidQueryIDInt) In(values []int) raidParamsUnique {
	f := builder.Field{
		Name:   "id",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return raidParamsUnique{
		data: f,
	}
}

func (r raidQueryIDInt) Order(direction runtime.Direction) raidParams {
	return raidParams{
		data: builder.Field{
			Name:  "id",
			Value: direction,
		},
	}
}

func (r raidQueryIDInt) Cursor(cursor string) raidCursorParams {
	return raidCursorParams{
		data: builder.Field{
			Name:  "id",
			Value: cursor,
		},
	}
}

func (r raidQueryIDInt) LT(value int) raidParamsUnique {
	return raidParamsUnique{
		data: builder.Field{
			Action: "lt",
			Name:   "id",
			Value:  value,
		},
	}
}

func (r raidQueryIDInt) GT(value int) raidParamsUnique {
	return raidParamsUnique{
		data: builder.Field{
			Action: "gt",
			Name:   "id",
			Value:  value,
		},
	}
}

func (r raidQueryIDInt) LTE(value int) raidParamsUnique {
	return raidParamsUnique{
		data: builder.Field{
			Action: "lte",
			Name:   "id",
			Value:  value,
		},
	}
}

func (r raidQueryIDInt) GTE(value int) raidParamsUnique {
	return raidParamsUnique{
		data: builder.Field{
			Action: "gte",
			Name:   "id",
			Value:  value,
		},
	}
}

// base struct
type raidQueryCreatedAtDateTime struct{}

// Set the required value of CreatedAt
func (r raidQueryCreatedAtDateTime) Set(value DateTime) raidSetParams {

	return raidSetParams{
		data: builder.Field{
			Name:  "createdAt",
			Value: value,
		},
	}

}

func (r raidQueryCreatedAtDateTime) Equals(value DateTime) raidWithPrismaCreatedAtEqualsParams {
	return raidWithPrismaCreatedAtEqualsParams{
		data: builder.Field{
			Name:  "createdAt",
			Value: value,
		},
	}
}

func (r raidQueryCreatedAtDateTime) In(values []DateTime) raidParams {
	f := builder.Field{
		Name:   "createdAt",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return raidParams{
		data: f,
	}
}

func (r raidQueryCreatedAtDateTime) Order(direction runtime.Direction) raidParams {
	return raidParams{
		data: builder.Field{
			Name:  "createdAt",
			Value: direction,
		},
	}
}

func (r raidQueryCreatedAtDateTime) Before(value DateTime) raidParams {
	return raidParams{
		data: builder.Field{
			Action: "lt",
			Name:   "createdAt",
			Value:  value,
		},
	}
}

func (r raidQueryCreatedAtDateTime) After(value DateTime) raidParams {
	return raidParams{
		data: builder.Field{
			Action: "gt",
			Name:   "createdAt",
			Value:  value,
		},
	}
}

func (r raidQueryCreatedAtDateTime) BeforeEquals(value DateTime) raidParams {
	return raidParams{
		data: builder.Field{
			Action: "lte",
			Name:   "createdAt",
			Value:  value,
		},
	}
}

func (r raidQueryCreatedAtDateTime) AfterEquals(value DateTime) raidParams {
	return raidParams{
		data: builder.Field{
			Action: "gte",
			Name:   "createdAt",
			Value:  value,
		},
	}
}

// base struct
type raidQueryDeletedAtDateTime struct{}

// Set the optional value of DeletedAt
func (r raidQueryDeletedAtDateTime) Set(value DateTime) raidSetParams {

	return raidSetParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: value,
		},
	}

}

// Set the optional value of DeletedAt dynamically
func (r raidQueryDeletedAtDateTime) SetOptional(value *DateTime) raidSetParams {
	if value == nil {

		var v *DateTime
		return raidSetParams{
			data: builder.Field{
				Name:  "deletedAt",
				Value: v,
			},
		}
	}

	return r.Set(*value)
}

func (r raidQueryDeletedAtDateTime) Equals(value DateTime) raidWithPrismaDeletedAtEqualsParams {
	return raidWithPrismaDeletedAtEqualsParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: value,
		},
	}
}

func (r raidQueryDeletedAtDateTime) In(values []DateTime) raidParams {
	f := builder.Field{
		Name:   "deletedAt",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return raidParams{
		data: f,
	}
}

func (r raidQueryDeletedAtDateTime) EqualsOptional(value *DateTime) raidParams {
	return raidParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: value,
		},
	}
}

func (r raidQueryDeletedAtDateTime) IsNull() raidParams {
	var str *string = nil
	return raidParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: str,
		},
	}
}

func (r raidQueryDeletedAtDateTime) Order(direction runtime.Direction) raidParams {
	return raidParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: direction,
		},
	}
}

func (r raidQueryDeletedAtDateTime) Before(value DateTime) raidParams {
	return raidParams{
		data: builder.Field{
			Action: "lt",
			Name:   "deletedAt",
			Value:  value,
		},
	}
}

func (r raidQueryDeletedAtDateTime) After(value DateTime) raidParams {
	return raidParams{
		data: builder.Field{
			Action: "gt",
			Name:   "deletedAt",
			Value:  value,
		},
	}
}

func (r raidQueryDeletedAtDateTime) BeforeEquals(value DateTime) raidParams {
	return raidParams{
		data: builder.Field{
			Action: "lte",
			Name:   "deletedAt",
			Value:  value,
		},
	}
}

func (r raidQueryDeletedAtDateTime) AfterEquals(value DateTime) raidParams {
	return raidParams{
		data: builder.Field{
			Action: "gte",
			Name:   "deletedAt",
			Value:  value,
		},
	}
}

// base struct
type raidQueryUpdatedAtDateTime struct{}

// Set the required value of UpdatedAt
func (r raidQueryUpdatedAtDateTime) Set(value DateTime) raidSetParams {

	return raidSetParams{
		data: builder.Field{
			Name:  "updatedAt",
			Value: value,
		},
	}

}

func (r raidQueryUpdatedAtDateTime) Equals(value DateTime) raidWithPrismaUpdatedAtEqualsParams {
	return raidWithPrismaUpdatedAtEqualsParams{
		data: builder.Field{
			Name:  "updatedAt",
			Value: value,
		},
	}
}

func (r raidQueryUpdatedAtDateTime) In(values []DateTime) raidParams {
	f := builder.Field{
		Name:   "updatedAt",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return raidParams{
		data: f,
	}
}

func (r raidQueryUpdatedAtDateTime) Order(direction runtime.Direction) raidParams {
	return raidParams{
		data: builder.Field{
			Name:  "updatedAt",
			Value: direction,
		},
	}
}

func (r raidQueryUpdatedAtDateTime) Before(value DateTime) raidParams {
	return raidParams{
		data: builder.Field{
			Action: "lt",
			Name:   "updatedAt",
			Value:  value,
		},
	}
}

func (r raidQueryUpdatedAtDateTime) After(value DateTime) raidParams {
	return raidParams{
		data: builder.Field{
			Action: "gt",
			Name:   "updatedAt",
			Value:  value,
		},
	}
}

func (r raidQueryUpdatedAtDateTime) BeforeEquals(value DateTime) raidParams {
	return raidParams{
		data: builder.Field{
			Action: "lte",
			Name:   "updatedAt",
			Value:  value,
		},
	}
}

func (r raidQueryUpdatedAtDateTime) AfterEquals(value DateTime) raidParams {
	return raidParams{
		data: builder.Field{
			Action: "gte",
			Name:   "updatedAt",
			Value:  value,
		},
	}
}

// base struct
type raidQueryStartTimeDateTime struct{}

// Set the required value of StartTime
func (r raidQueryStartTimeDateTime) Set(value DateTime) raidSetParams {

	return raidSetParams{
		data: builder.Field{
			Name:  "startTime",
			Value: value,
		},
	}

}

func (r raidQueryStartTimeDateTime) Equals(value DateTime) raidWithPrismaStartTimeEqualsParams {
	return raidWithPrismaStartTimeEqualsParams{
		data: builder.Field{
			Name:  "startTime",
			Value: value,
		},
	}
}

func (r raidQueryStartTimeDateTime) In(values []DateTime) raidParams {
	f := builder.Field{
		Name:   "startTime",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return raidParams{
		data: f,
	}
}

func (r raidQueryStartTimeDateTime) Order(direction runtime.Direction) raidParams {
	return raidParams{
		data: builder.Field{
			Name:  "startTime",
			Value: direction,
		},
	}
}

func (r raidQueryStartTimeDateTime) Before(value DateTime) raidParams {
	return raidParams{
		data: builder.Field{
			Action: "lt",
			Name:   "startTime",
			Value:  value,
		},
	}
}

func (r raidQueryStartTimeDateTime) After(value DateTime) raidParams {
	return raidParams{
		data: builder.Field{
			Action: "gt",
			Name:   "startTime",
			Value:  value,
		},
	}
}

func (r raidQueryStartTimeDateTime) BeforeEquals(value DateTime) raidParams {
	return raidParams{
		data: builder.Field{
			Action: "lte",
			Name:   "startTime",
			Value:  value,
		},
	}
}

func (r raidQueryStartTimeDateTime) AfterEquals(value DateTime) raidParams {
	return raidParams{
		data: builder.Field{
			Action: "gte",
			Name:   "startTime",
			Value:  value,
		},
	}
}

// base struct
type raidQueryEndTimeDateTime struct{}

// Set the optional value of EndTime
func (r raidQueryEndTimeDateTime) Set(value DateTime) raidSetParams {

	return raidSetParams{
		data: builder.Field{
			Name:  "endTime",
			Value: value,
		},
	}

}

// Set the optional value of EndTime dynamically
func (r raidQueryEndTimeDateTime) SetOptional(value *DateTime) raidSetParams {
	if value == nil {

		var v *DateTime
		return raidSetParams{
			data: builder.Field{
				Name:  "endTime",
				Value: v,
			},
		}
	}

	return r.Set(*value)
}

func (r raidQueryEndTimeDateTime) Equals(value DateTime) raidWithPrismaEndTimeEqualsParams {
	return raidWithPrismaEndTimeEqualsParams{
		data: builder.Field{
			Name:  "endTime",
			Value: value,
		},
	}
}

func (r raidQueryEndTimeDateTime) In(values []DateTime) raidParams {
	f := builder.Field{
		Name:   "endTime",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return raidParams{
		data: f,
	}
}

func (r raidQueryEndTimeDateTime) EqualsOptional(value *DateTime) raidParams {
	return raidParams{
		data: builder.Field{
			Name:  "endTime",
			Value: value,
		},
	}
}

func (r raidQueryEndTimeDateTime) IsNull() raidParams {
	var str *string = nil
	return raidParams{
		data: builder.Field{
			Name:  "endTime",
			Value: str,
		},
	}
}

func (r raidQueryEndTimeDateTime) Order(direction runtime.Direction) raidParams {
	return raidParams{
		data: builder.Field{
			Name:  "endTime",
			Value: direction,
		},
	}
}

func (r raidQueryEndTimeDateTime) Before(value DateTime) raidParams {
	return raidParams{
		data: builder.Field{
			Action: "lt",
			Name:   "endTime",
			Value:  value,
		},
	}
}

func (r raidQueryEndTimeDateTime) After(value DateTime) raidParams {
	return raidParams{
		data: builder.Field{
			Action: "gt",
			Name:   "endTime",
			Value:  value,
		},
	}
}

func (r raidQueryEndTimeDateTime) BeforeEquals(value DateTime) raidParams {
	return raidParams{
		data: builder.Field{
			Action: "lte",
			Name:   "endTime",
			Value:  value,
		},
	}
}

func (r raidQueryEndTimeDateTime) AfterEquals(value DateTime) raidParams {
	return raidParams{
		data: builder.Field{
			Action: "gte",
			Name:   "endTime",
			Value:  value,
		},
	}
}

// base struct
type raidQueryCompletionProgressFloat struct{}

// Set the required value of CompletionProgress
func (r raidQueryCompletionProgressFloat) Set(value float64) raidSetParams {

	return raidSetParams{
		data: builder.Field{
			Name:  "completionProgress",
			Value: value,
		},
	}

}

func (r raidQueryCompletionProgressFloat) Equals(value float64) raidWithPrismaCompletionProgressEqualsParams {
	return raidWithPrismaCompletionProgressEqualsParams{
		data: builder.Field{
			Name:  "completionProgress",
			Value: value,
		},
	}
}

func (r raidQueryCompletionProgressFloat) In(values []float64) raidParams {
	f := builder.Field{
		Name:   "completionProgress",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return raidParams{
		data: f,
	}
}

func (r raidQueryCompletionProgressFloat) Order(direction runtime.Direction) raidParams {
	return raidParams{
		data: builder.Field{
			Name:  "completionProgress",
			Value: direction,
		},
	}
}

func (r raidQueryCompletionProgressFloat) LT(value float64) raidParams {
	return raidParams{
		data: builder.Field{
			Action: "lt",
			Name:   "completionProgress",
			Value:  value,
		},
	}
}

func (r raidQueryCompletionProgressFloat) GT(value float64) raidParams {
	return raidParams{
		data: builder.Field{
			Action: "gt",
			Name:   "completionProgress",
			Value:  value,
		},
	}
}

func (r raidQueryCompletionProgressFloat) LTE(value float64) raidParams {
	return raidParams{
		data: builder.Field{
			Action: "lte",
			Name:   "completionProgress",
			Value:  value,
		},
	}
}

func (r raidQueryCompletionProgressFloat) GTE(value float64) raidParams {
	return raidParams{
		data: builder.Field{
			Action: "gte",
			Name:   "completionProgress",
			Value:  value,
		},
	}
}

// base struct
type raidQueryActiveBoolean struct{}

// Set the required value of Active
func (r raidQueryActiveBoolean) Set(value bool) raidSetParams {

	return raidSetParams{
		data: builder.Field{
			Name:  "active",
			Value: value,
		},
	}

}

func (r raidQueryActiveBoolean) Equals(value bool) raidWithPrismaActiveEqualsParams {
	return raidWithPrismaActiveEqualsParams{
		data: builder.Field{
			Name:  "active",
			Value: value,
		},
	}
}

func (r raidQueryActiveBoolean) In(values []bool) raidParams {
	f := builder.Field{
		Name:   "active",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return raidParams{
		data: f,
	}
}

func (r raidQueryActiveBoolean) Order(direction runtime.Direction) raidParams {
	return raidParams{
		data: builder.Field{
			Name:  "active",
			Value: direction,
		},
	}
}

// base struct
type raidQueryPlayerLimitInt struct{}

// Set the required value of PlayerLimit
func (r raidQueryPlayerLimitInt) Set(value int) raidSetParams {

	return raidSetParams{
		data: builder.Field{
			Name:  "playerLimit",
			Value: value,
		},
	}

}

func (r raidQueryPlayerLimitInt) Equals(value int) raidWithPrismaPlayerLimitEqualsParams {
	return raidWithPrismaPlayerLimitEqualsParams{
		data: builder.Field{
			Name:  "playerLimit",
			Value: value,
		},
	}
}

func (r raidQueryPlayerLimitInt) In(values []int) raidParams {
	f := builder.Field{
		Name:   "playerLimit",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return raidParams{
		data: f,
	}
}

func (r raidQueryPlayerLimitInt) Order(direction runtime.Direction) raidParams {
	return raidParams{
		data: builder.Field{
			Name:  "playerLimit",
			Value: direction,
		},
	}
}

func (r raidQueryPlayerLimitInt) LT(value int) raidParams {
	return raidParams{
		data: builder.Field{
			Action: "lt",
			Name:   "playerLimit",
			Value:  value,
		},
	}
}

func (r raidQueryPlayerLimitInt) GT(value int) raidParams {
	return raidParams{
		data: builder.Field{
			Action: "gt",
			Name:   "playerLimit",
			Value:  value,
		},
	}
}

func (r raidQueryPlayerLimitInt) LTE(value int) raidParams {
	return raidParams{
		data: builder.Field{
			Action: "lte",
			Name:   "playerLimit",
			Value:  value,
		},
	}
}

func (r raidQueryPlayerLimitInt) GTE(value int) raidParams {
	return raidParams{
		data: builder.Field{
			Action: "gte",
			Name:   "playerLimit",
			Value:  value,
		},
	}
}

// base struct
type raidQueryPlayerCountInt struct{}

// Set the required value of PlayerCount
func (r raidQueryPlayerCountInt) Set(value int) raidSetParams {

	return raidSetParams{
		data: builder.Field{
			Name:  "playerCount",
			Value: value,
		},
	}

}

func (r raidQueryPlayerCountInt) Equals(value int) raidWithPrismaPlayerCountEqualsParams {
	return raidWithPrismaPlayerCountEqualsParams{
		data: builder.Field{
			Name:  "playerCount",
			Value: value,
		},
	}
}

func (r raidQueryPlayerCountInt) In(values []int) raidParams {
	f := builder.Field{
		Name:   "playerCount",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return raidParams{
		data: f,
	}
}

func (r raidQueryPlayerCountInt) Order(direction runtime.Direction) raidParams {
	return raidParams{
		data: builder.Field{
			Name:  "playerCount",
			Value: direction,
		},
	}
}

func (r raidQueryPlayerCountInt) LT(value int) raidParams {
	return raidParams{
		data: builder.Field{
			Action: "lt",
			Name:   "playerCount",
			Value:  value,
		},
	}
}

func (r raidQueryPlayerCountInt) GT(value int) raidParams {
	return raidParams{
		data: builder.Field{
			Action: "gt",
			Name:   "playerCount",
			Value:  value,
		},
	}
}

func (r raidQueryPlayerCountInt) LTE(value int) raidParams {
	return raidParams{
		data: builder.Field{
			Action: "lte",
			Name:   "playerCount",
			Value:  value,
		},
	}
}

func (r raidQueryPlayerCountInt) GTE(value int) raidParams {
	return raidParams{
		data: builder.Field{
			Action: "gte",
			Name:   "playerCount",
			Value:  value,
		},
	}
}

// base struct
type raidQueryAvatarsOnRaidsAvatarsOnRaids struct{}

type raidQueryAvatarsOnRaidsRelations struct{}

// Raid -> AvatarsOnRaids
//
// @relation
// @optional
func (raidQueryAvatarsOnRaidsRelations) Some(
	params ...iAvatarsOnRaidsParams,
) raidParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return raidParams{
		data: builder.Field{
			Name:   "AvatarsOnRaids",
			Action: "some",
			Fields: fields,
		},
	}
}

// Raid -> AvatarsOnRaids
//
// @relation
// @optional
func (raidQueryAvatarsOnRaidsRelations) Every(
	params ...iAvatarsOnRaidsParams,
) raidParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return raidParams{
		data: builder.Field{
			Name:   "AvatarsOnRaids",
			Action: "every",
			Fields: fields,
		},
	}
}

func (raidQueryAvatarsOnRaidsRelations) Fetch(

	params ...iAvatarsOnRaidsParams,

) raidToAvatarsOnRaidsFindMany {
	var v raidToAvatarsOnRaidsFindMany

	v.query.Operation = "query"
	v.query.Method = "AvatarsOnRaids"
	v.query.Outputs = avatarsOnRaidsOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r raidQueryAvatarsOnRaidsRelations) Link(
	params ...iAvatarsOnRaidsParams,
) raidSetParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return raidSetParams{
		data: builder.Field{
			Name: "AvatarsOnRaids",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: fields,
				},
			},
		},
	}
}

func (r raidQueryAvatarsOnRaidsRelations) Unlink() raidSetParams {
	return raidSetParams{
		data: builder.Field{
			Name: "AvatarsOnRaids",
			Fields: []builder.Field{
				{
					Name:  "disconnect",
					Value: true,
				},
			},
		},
	}
}

// base struct
type raidQueryRaidBossesOnRaidsRaidBossesOnRaids struct{}

type raidQueryRaidBossesOnRaidsRelations struct{}

// Raid -> RaidBossesOnRaids
//
// @relation
// @optional
func (raidQueryRaidBossesOnRaidsRelations) Some(
	params ...iRaidBossesOnRaidsParams,
) raidParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return raidParams{
		data: builder.Field{
			Name:   "RaidBossesOnRaids",
			Action: "some",
			Fields: fields,
		},
	}
}

// Raid -> RaidBossesOnRaids
//
// @relation
// @optional
func (raidQueryRaidBossesOnRaidsRelations) Every(
	params ...iRaidBossesOnRaidsParams,
) raidParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return raidParams{
		data: builder.Field{
			Name:   "RaidBossesOnRaids",
			Action: "every",
			Fields: fields,
		},
	}
}

func (raidQueryRaidBossesOnRaidsRelations) Fetch(

	params ...iRaidBossesOnRaidsParams,

) raidToRaidBossesOnRaidsFindMany {
	var v raidToRaidBossesOnRaidsFindMany

	v.query.Operation = "query"
	v.query.Method = "RaidBossesOnRaids"
	v.query.Outputs = raidBossesOnRaidsOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r raidQueryRaidBossesOnRaidsRelations) Link(
	params ...iRaidBossesOnRaidsParams,
) raidSetParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return raidSetParams{
		data: builder.Field{
			Name: "RaidBossesOnRaids",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: fields,
				},
			},
		},
	}
}

func (r raidQueryRaidBossesOnRaidsRelations) Unlink() raidSetParams {
	return raidSetParams{
		data: builder.Field{
			Name: "RaidBossesOnRaids",
			Fields: []builder.Field{
				{
					Name:  "disconnect",
					Value: true,
				},
			},
		},
	}
}

// base struct
type raidQueryStoriesOnRaidsStoriesOnRaids struct{}

type raidQueryStoriesOnRaidsRelations struct{}

// Raid -> StoriesOnRaids
//
// @relation
// @optional
func (raidQueryStoriesOnRaidsRelations) Some(
	params ...iStoriesOnRaidsParams,
) raidParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return raidParams{
		data: builder.Field{
			Name:   "StoriesOnRaids",
			Action: "some",
			Fields: fields,
		},
	}
}

// Raid -> StoriesOnRaids
//
// @relation
// @optional
func (raidQueryStoriesOnRaidsRelations) Every(
	params ...iStoriesOnRaidsParams,
) raidParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return raidParams{
		data: builder.Field{
			Name:   "StoriesOnRaids",
			Action: "every",
			Fields: fields,
		},
	}
}

func (raidQueryStoriesOnRaidsRelations) Fetch(

	params ...iStoriesOnRaidsParams,

) raidToStoriesOnRaidsFindMany {
	var v raidToStoriesOnRaidsFindMany

	v.query.Operation = "query"
	v.query.Method = "StoriesOnRaids"
	v.query.Outputs = storiesOnRaidsOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r raidQueryStoriesOnRaidsRelations) Link(
	params ...iStoriesOnRaidsParams,
) raidSetParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return raidSetParams{
		data: builder.Field{
			Name: "StoriesOnRaids",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: fields,
				},
			},
		},
	}
}

func (r raidQueryStoriesOnRaidsRelations) Unlink() raidSetParams {
	return raidSetParams{
		data: builder.Field{
			Name: "StoriesOnRaids",
			Fields: []builder.Field{
				{
					Name:  "disconnect",
					Value: true,
				},
			},
		},
	}
}

// RaidBoss acts as a namespaces to access query methods for the RaidBoss model
var RaidBoss = raidBossQuery{}

// raidBossQuery exposes query functions for the raidBoss model
type raidBossQuery struct {
	// ID
	//
	// @required
	ID raidBossQueryIDInt

	// CreatedAt
	//
	// @required
	CreatedAt raidBossQueryCreatedAtDateTime

	// DeletedAt
	//
	// @optional
	DeletedAt raidBossQueryDeletedAtDateTime

	// UpdatedAt
	//
	// @required
	UpdatedAt raidBossQueryUpdatedAtDateTime

	// Name
	//
	// @required
	// @unique
	Name raidBossQueryNameString

	// Image
	//
	// @optional
	Image raidBossQueryImageString

	RaidBossesOnRaids raidBossQueryRaidBossesOnRaidsRelations
}

func (raidBossQuery) Not(params ...iRaidBossParams) raidBossParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return raidBossParams{
		data: builder.Field{
			Name:     "NOT",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (raidBossQuery) Or(params ...iRaidBossParams) raidBossParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return raidBossParams{
		data: builder.Field{
			Name:     "OR",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

// searched for field raidId_avatarId
// type: RaidIdAvatarIdCompoundUniqueInput

// searched for field raidId_avatarId
// type: RaidIdAvatarIdCompoundUniqueInput

// searched for field raidId_raidBossId
// type: RaidIdRaidBossIdCompoundUniqueInput

// searched for field raidId_raidBossId
// type: RaidIdRaidBossIdCompoundUniqueInput

// searched for field raidId_storyId
// type: RaidIdStoryIdCompoundUniqueInput

// searched for field raidId_storyId
// type: RaidIdStoryIdCompoundUniqueInput

// searched for field id
// type: Int

// searched for field storyId_sequence
// type: StoryIdSequenceCompoundUniqueInput

// searched for field id
// type: Int

// searched for field eventId_position
// type: EventIdPositionCompoundUniqueInput

// searched for field messageId_actionId
// type: MessageIdActionIdCompoundUniqueInput

// searched for field messageId_actionId
// type: MessageIdActionIdCompoundUniqueInput

// searched for field messageId_eventId
// type: MessageIdEventIdCompoundUniqueInput

// searched for field messageId_eventId
// type: MessageIdEventIdCompoundUniqueInput

// base struct
type raidBossQueryIDInt struct{}

// Set the required value of ID
func (r raidBossQueryIDInt) Set(value int) raidBossSetParams {

	return raidBossSetParams{
		data: builder.Field{
			Name:  "id",
			Value: value,
		},
	}

}

func (r raidBossQueryIDInt) Equals(value int) raidBossWithPrismaIDEqualsParamsUnique {
	return raidBossWithPrismaIDEqualsParamsUnique{
		data: builder.Field{
			Name:  "id",
			Value: value,
		},
	}
}

func (r raidBossQueryIDInt) In(values []int) raidBossParamsUnique {
	f := builder.Field{
		Name:   "id",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return raidBossParamsUnique{
		data: f,
	}
}

func (r raidBossQueryIDInt) Order(direction runtime.Direction) raidBossParams {
	return raidBossParams{
		data: builder.Field{
			Name:  "id",
			Value: direction,
		},
	}
}

func (r raidBossQueryIDInt) Cursor(cursor string) raidBossCursorParams {
	return raidBossCursorParams{
		data: builder.Field{
			Name:  "id",
			Value: cursor,
		},
	}
}

func (r raidBossQueryIDInt) LT(value int) raidBossParamsUnique {
	return raidBossParamsUnique{
		data: builder.Field{
			Action: "lt",
			Name:   "id",
			Value:  value,
		},
	}
}

func (r raidBossQueryIDInt) GT(value int) raidBossParamsUnique {
	return raidBossParamsUnique{
		data: builder.Field{
			Action: "gt",
			Name:   "id",
			Value:  value,
		},
	}
}

func (r raidBossQueryIDInt) LTE(value int) raidBossParamsUnique {
	return raidBossParamsUnique{
		data: builder.Field{
			Action: "lte",
			Name:   "id",
			Value:  value,
		},
	}
}

func (r raidBossQueryIDInt) GTE(value int) raidBossParamsUnique {
	return raidBossParamsUnique{
		data: builder.Field{
			Action: "gte",
			Name:   "id",
			Value:  value,
		},
	}
}

// base struct
type raidBossQueryCreatedAtDateTime struct{}

// Set the required value of CreatedAt
func (r raidBossQueryCreatedAtDateTime) Set(value DateTime) raidBossSetParams {

	return raidBossSetParams{
		data: builder.Field{
			Name:  "createdAt",
			Value: value,
		},
	}

}

func (r raidBossQueryCreatedAtDateTime) Equals(value DateTime) raidBossWithPrismaCreatedAtEqualsParams {
	return raidBossWithPrismaCreatedAtEqualsParams{
		data: builder.Field{
			Name:  "createdAt",
			Value: value,
		},
	}
}

func (r raidBossQueryCreatedAtDateTime) In(values []DateTime) raidBossParams {
	f := builder.Field{
		Name:   "createdAt",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return raidBossParams{
		data: f,
	}
}

func (r raidBossQueryCreatedAtDateTime) Order(direction runtime.Direction) raidBossParams {
	return raidBossParams{
		data: builder.Field{
			Name:  "createdAt",
			Value: direction,
		},
	}
}

func (r raidBossQueryCreatedAtDateTime) Before(value DateTime) raidBossParams {
	return raidBossParams{
		data: builder.Field{
			Action: "lt",
			Name:   "createdAt",
			Value:  value,
		},
	}
}

func (r raidBossQueryCreatedAtDateTime) After(value DateTime) raidBossParams {
	return raidBossParams{
		data: builder.Field{
			Action: "gt",
			Name:   "createdAt",
			Value:  value,
		},
	}
}

func (r raidBossQueryCreatedAtDateTime) BeforeEquals(value DateTime) raidBossParams {
	return raidBossParams{
		data: builder.Field{
			Action: "lte",
			Name:   "createdAt",
			Value:  value,
		},
	}
}

func (r raidBossQueryCreatedAtDateTime) AfterEquals(value DateTime) raidBossParams {
	return raidBossParams{
		data: builder.Field{
			Action: "gte",
			Name:   "createdAt",
			Value:  value,
		},
	}
}

// base struct
type raidBossQueryDeletedAtDateTime struct{}

// Set the optional value of DeletedAt
func (r raidBossQueryDeletedAtDateTime) Set(value DateTime) raidBossSetParams {

	return raidBossSetParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: value,
		},
	}

}

// Set the optional value of DeletedAt dynamically
func (r raidBossQueryDeletedAtDateTime) SetOptional(value *DateTime) raidBossSetParams {
	if value == nil {

		var v *DateTime
		return raidBossSetParams{
			data: builder.Field{
				Name:  "deletedAt",
				Value: v,
			},
		}
	}

	return r.Set(*value)
}

func (r raidBossQueryDeletedAtDateTime) Equals(value DateTime) raidBossWithPrismaDeletedAtEqualsParams {
	return raidBossWithPrismaDeletedAtEqualsParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: value,
		},
	}
}

func (r raidBossQueryDeletedAtDateTime) In(values []DateTime) raidBossParams {
	f := builder.Field{
		Name:   "deletedAt",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return raidBossParams{
		data: f,
	}
}

func (r raidBossQueryDeletedAtDateTime) EqualsOptional(value *DateTime) raidBossParams {
	return raidBossParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: value,
		},
	}
}

func (r raidBossQueryDeletedAtDateTime) IsNull() raidBossParams {
	var str *string = nil
	return raidBossParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: str,
		},
	}
}

func (r raidBossQueryDeletedAtDateTime) Order(direction runtime.Direction) raidBossParams {
	return raidBossParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: direction,
		},
	}
}

func (r raidBossQueryDeletedAtDateTime) Before(value DateTime) raidBossParams {
	return raidBossParams{
		data: builder.Field{
			Action: "lt",
			Name:   "deletedAt",
			Value:  value,
		},
	}
}

func (r raidBossQueryDeletedAtDateTime) After(value DateTime) raidBossParams {
	return raidBossParams{
		data: builder.Field{
			Action: "gt",
			Name:   "deletedAt",
			Value:  value,
		},
	}
}

func (r raidBossQueryDeletedAtDateTime) BeforeEquals(value DateTime) raidBossParams {
	return raidBossParams{
		data: builder.Field{
			Action: "lte",
			Name:   "deletedAt",
			Value:  value,
		},
	}
}

func (r raidBossQueryDeletedAtDateTime) AfterEquals(value DateTime) raidBossParams {
	return raidBossParams{
		data: builder.Field{
			Action: "gte",
			Name:   "deletedAt",
			Value:  value,
		},
	}
}

// base struct
type raidBossQueryUpdatedAtDateTime struct{}

// Set the required value of UpdatedAt
func (r raidBossQueryUpdatedAtDateTime) Set(value DateTime) raidBossSetParams {

	return raidBossSetParams{
		data: builder.Field{
			Name:  "updatedAt",
			Value: value,
		},
	}

}

func (r raidBossQueryUpdatedAtDateTime) Equals(value DateTime) raidBossWithPrismaUpdatedAtEqualsParams {
	return raidBossWithPrismaUpdatedAtEqualsParams{
		data: builder.Field{
			Name:  "updatedAt",
			Value: value,
		},
	}
}

func (r raidBossQueryUpdatedAtDateTime) In(values []DateTime) raidBossParams {
	f := builder.Field{
		Name:   "updatedAt",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return raidBossParams{
		data: f,
	}
}

func (r raidBossQueryUpdatedAtDateTime) Order(direction runtime.Direction) raidBossParams {
	return raidBossParams{
		data: builder.Field{
			Name:  "updatedAt",
			Value: direction,
		},
	}
}

func (r raidBossQueryUpdatedAtDateTime) Before(value DateTime) raidBossParams {
	return raidBossParams{
		data: builder.Field{
			Action: "lt",
			Name:   "updatedAt",
			Value:  value,
		},
	}
}

func (r raidBossQueryUpdatedAtDateTime) After(value DateTime) raidBossParams {
	return raidBossParams{
		data: builder.Field{
			Action: "gt",
			Name:   "updatedAt",
			Value:  value,
		},
	}
}

func (r raidBossQueryUpdatedAtDateTime) BeforeEquals(value DateTime) raidBossParams {
	return raidBossParams{
		data: builder.Field{
			Action: "lte",
			Name:   "updatedAt",
			Value:  value,
		},
	}
}

func (r raidBossQueryUpdatedAtDateTime) AfterEquals(value DateTime) raidBossParams {
	return raidBossParams{
		data: builder.Field{
			Action: "gte",
			Name:   "updatedAt",
			Value:  value,
		},
	}
}

// base struct
type raidBossQueryNameString struct{}

// Set the required value of Name
func (r raidBossQueryNameString) Set(value string) raidBossWithPrismaNameSetParams {

	return raidBossWithPrismaNameSetParams{
		data: builder.Field{
			Name:  "name",
			Value: value,
		},
	}

}

func (r raidBossQueryNameString) Equals(value string) raidBossWithPrismaNameEqualsParamsUnique {
	return raidBossWithPrismaNameEqualsParamsUnique{
		data: builder.Field{
			Name:  "name",
			Value: value,
		},
	}
}

func (r raidBossQueryNameString) In(values []string) raidBossParamsUnique {
	f := builder.Field{
		Name:   "name",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return raidBossParamsUnique{
		data: f,
	}
}

func (r raidBossQueryNameString) Order(direction runtime.Direction) raidBossParams {
	return raidBossParams{
		data: builder.Field{
			Name:  "name",
			Value: direction,
		},
	}
}

func (r raidBossQueryNameString) Cursor(cursor string) raidBossCursorParams {
	return raidBossCursorParams{
		data: builder.Field{
			Name:  "name",
			Value: cursor,
		},
	}
}

func (r raidBossQueryNameString) Contains(value string) raidBossParamsUnique {
	return raidBossParamsUnique{
		data: builder.Field{
			Action: "contains",
			Name:   "name",
			Value:  value,
		},
	}
}

func (r raidBossQueryNameString) HasPrefix(value string) raidBossParamsUnique {
	return raidBossParamsUnique{
		data: builder.Field{
			Action: "starts_with",
			Name:   "name",
			Value:  value,
		},
	}
}

func (r raidBossQueryNameString) HasSuffix(value string) raidBossParamsUnique {
	return raidBossParamsUnique{
		data: builder.Field{
			Action: "ends_with",
			Name:   "name",
			Value:  value,
		},
	}
}

// base struct
type raidBossQueryImageString struct{}

// Set the optional value of Image
func (r raidBossQueryImageString) Set(value string) raidBossSetParams {

	return raidBossSetParams{
		data: builder.Field{
			Name:  "image",
			Value: value,
		},
	}

}

// Set the optional value of Image dynamically
func (r raidBossQueryImageString) SetOptional(value *string) raidBossSetParams {
	if value == nil {

		var v *string
		return raidBossSetParams{
			data: builder.Field{
				Name:  "image",
				Value: v,
			},
		}
	}

	return r.Set(*value)
}

func (r raidBossQueryImageString) Equals(value string) raidBossWithPrismaImageEqualsParams {
	return raidBossWithPrismaImageEqualsParams{
		data: builder.Field{
			Name:  "image",
			Value: value,
		},
	}
}

func (r raidBossQueryImageString) In(values []string) raidBossParams {
	f := builder.Field{
		Name:   "image",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return raidBossParams{
		data: f,
	}
}

func (r raidBossQueryImageString) EqualsOptional(value *string) raidBossParams {
	return raidBossParams{
		data: builder.Field{
			Name:  "image",
			Value: value,
		},
	}
}

func (r raidBossQueryImageString) IsNull() raidBossParams {
	var str *string = nil
	return raidBossParams{
		data: builder.Field{
			Name:  "image",
			Value: str,
		},
	}
}

func (r raidBossQueryImageString) Order(direction runtime.Direction) raidBossParams {
	return raidBossParams{
		data: builder.Field{
			Name:  "image",
			Value: direction,
		},
	}
}

func (r raidBossQueryImageString) Contains(value string) raidBossParams {
	return raidBossParams{
		data: builder.Field{
			Action: "contains",
			Name:   "image",
			Value:  value,
		},
	}
}

func (r raidBossQueryImageString) HasPrefix(value string) raidBossParams {
	return raidBossParams{
		data: builder.Field{
			Action: "starts_with",
			Name:   "image",
			Value:  value,
		},
	}
}

func (r raidBossQueryImageString) HasSuffix(value string) raidBossParams {
	return raidBossParams{
		data: builder.Field{
			Action: "ends_with",
			Name:   "image",
			Value:  value,
		},
	}
}

// base struct
type raidBossQueryRaidBossesOnRaidsRaidBossesOnRaids struct{}

type raidBossQueryRaidBossesOnRaidsRelations struct{}

// RaidBoss -> RaidBossesOnRaids
//
// @relation
// @optional
func (raidBossQueryRaidBossesOnRaidsRelations) Some(
	params ...iRaidBossesOnRaidsParams,
) raidBossParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return raidBossParams{
		data: builder.Field{
			Name:   "RaidBossesOnRaids",
			Action: "some",
			Fields: fields,
		},
	}
}

// RaidBoss -> RaidBossesOnRaids
//
// @relation
// @optional
func (raidBossQueryRaidBossesOnRaidsRelations) Every(
	params ...iRaidBossesOnRaidsParams,
) raidBossParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return raidBossParams{
		data: builder.Field{
			Name:   "RaidBossesOnRaids",
			Action: "every",
			Fields: fields,
		},
	}
}

func (raidBossQueryRaidBossesOnRaidsRelations) Fetch(

	params ...iRaidBossesOnRaidsParams,

) raidBossToRaidBossesOnRaidsFindMany {
	var v raidBossToRaidBossesOnRaidsFindMany

	v.query.Operation = "query"
	v.query.Method = "RaidBossesOnRaids"
	v.query.Outputs = raidBossesOnRaidsOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r raidBossQueryRaidBossesOnRaidsRelations) Link(
	params ...iRaidBossesOnRaidsParams,
) raidBossSetParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return raidBossSetParams{
		data: builder.Field{
			Name: "RaidBossesOnRaids",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: fields,
				},
			},
		},
	}
}

func (r raidBossQueryRaidBossesOnRaidsRelations) Unlink() raidBossSetParams {
	return raidBossSetParams{
		data: builder.Field{
			Name: "RaidBossesOnRaids",
			Fields: []builder.Field{
				{
					Name:  "disconnect",
					Value: true,
				},
			},
		},
	}
}

// AvatarsOnRaids acts as a namespaces to access query methods for the AvatarsOnRaids model
var AvatarsOnRaids = avatarsOnRaidsQuery{}

// avatarsOnRaidsQuery exposes query functions for the avatarsOnRaids model
type avatarsOnRaidsQuery struct {
	// CreatedAt
	//
	// @required
	CreatedAt avatarsOnRaidsQueryCreatedAtDateTime

	// DeletedAt
	//
	// @optional
	DeletedAt avatarsOnRaidsQueryDeletedAtDateTime

	// UpdatedAt
	//
	// @required
	UpdatedAt avatarsOnRaidsQueryUpdatedAtDateTime

	// Position
	//
	// @required
	Position avatarsOnRaidsQueryPositionInt

	Raid avatarsOnRaidsQueryRaidRelations

	// RaidID
	//
	// @required
	RaidID avatarsOnRaidsQueryRaidIDInt

	Avatar avatarsOnRaidsQueryAvatarRelations

	// AvatarID
	//
	// @required
	AvatarID avatarsOnRaidsQueryAvatarIDInt
}

func (avatarsOnRaidsQuery) Not(params ...iAvatarsOnRaidsParams) avatarsOnRaidsParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return avatarsOnRaidsParams{
		data: builder.Field{
			Name:     "NOT",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (avatarsOnRaidsQuery) Or(params ...iAvatarsOnRaidsParams) avatarsOnRaidsParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return avatarsOnRaidsParams{
		data: builder.Field{
			Name:     "OR",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

// searched for field raidId_avatarId
// type: RaidIdAvatarIdCompoundUniqueInput

func (avatarsOnRaidsQuery) RaidIDAvatarID(
	_raidID iAvatarsOnRaidsWithPrismaRaidIDEqualsParams,

	_avatarID iAvatarsOnRaidsWithPrismaAvatarIDEqualsParams,
) iAvatarsOnRaidsEqualsParamsUnique {
	var fields []builder.Field

	fields = append(fields, _raidID.field())
	fields = append(fields, _avatarID.field())

	return avatarsOnRaidsEqualsParamsUnique{
		data: builder.Field{
			Name:   "raidId_avatarId",
			Fields: fields,
		},
	}
}

// searched for field raidId_avatarId
// type: RaidIdAvatarIdCompoundUniqueInput

func (avatarsOnRaidsQuery) RaidIDAvatarID(
	_raidID iAvatarsOnRaidsWithPrismaRaidIDEqualsParams,

	_avatarID iAvatarsOnRaidsWithPrismaAvatarIDEqualsParams,
) iAvatarsOnRaidsEqualsParamsUnique {
	var fields []builder.Field

	fields = append(fields, _raidID.field())
	fields = append(fields, _avatarID.field())

	return avatarsOnRaidsEqualsParamsUnique{
		data: builder.Field{
			Name:   "raidId_avatarId",
			Fields: fields,
		},
	}
}

// searched for field raidId_raidBossId
// type: RaidIdRaidBossIdCompoundUniqueInput

// searched for field raidId_raidBossId
// type: RaidIdRaidBossIdCompoundUniqueInput

// searched for field raidId_storyId
// type: RaidIdStoryIdCompoundUniqueInput

// searched for field raidId_storyId
// type: RaidIdStoryIdCompoundUniqueInput

// searched for field id
// type: Int

// searched for field storyId_sequence
// type: StoryIdSequenceCompoundUniqueInput

// searched for field id
// type: Int

// searched for field eventId_position
// type: EventIdPositionCompoundUniqueInput

// searched for field messageId_actionId
// type: MessageIdActionIdCompoundUniqueInput

// searched for field messageId_actionId
// type: MessageIdActionIdCompoundUniqueInput

// searched for field messageId_eventId
// type: MessageIdEventIdCompoundUniqueInput

// searched for field messageId_eventId
// type: MessageIdEventIdCompoundUniqueInput

// base struct
type avatarsOnRaidsQueryCreatedAtDateTime struct{}

// Set the required value of CreatedAt
func (r avatarsOnRaidsQueryCreatedAtDateTime) Set(value DateTime) avatarsOnRaidsSetParams {

	return avatarsOnRaidsSetParams{
		data: builder.Field{
			Name:  "createdAt",
			Value: value,
		},
	}

}

func (r avatarsOnRaidsQueryCreatedAtDateTime) Equals(value DateTime) avatarsOnRaidsWithPrismaCreatedAtEqualsParams {
	return avatarsOnRaidsWithPrismaCreatedAtEqualsParams{
		data: builder.Field{
			Name:  "createdAt",
			Value: value,
		},
	}
}

func (r avatarsOnRaidsQueryCreatedAtDateTime) In(values []DateTime) avatarsOnRaidsParams {
	f := builder.Field{
		Name:   "createdAt",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return avatarsOnRaidsParams{
		data: f,
	}
}

func (r avatarsOnRaidsQueryCreatedAtDateTime) Order(direction runtime.Direction) avatarsOnRaidsParams {
	return avatarsOnRaidsParams{
		data: builder.Field{
			Name:  "createdAt",
			Value: direction,
		},
	}
}

func (r avatarsOnRaidsQueryCreatedAtDateTime) Before(value DateTime) avatarsOnRaidsParams {
	return avatarsOnRaidsParams{
		data: builder.Field{
			Action: "lt",
			Name:   "createdAt",
			Value:  value,
		},
	}
}

func (r avatarsOnRaidsQueryCreatedAtDateTime) After(value DateTime) avatarsOnRaidsParams {
	return avatarsOnRaidsParams{
		data: builder.Field{
			Action: "gt",
			Name:   "createdAt",
			Value:  value,
		},
	}
}

func (r avatarsOnRaidsQueryCreatedAtDateTime) BeforeEquals(value DateTime) avatarsOnRaidsParams {
	return avatarsOnRaidsParams{
		data: builder.Field{
			Action: "lte",
			Name:   "createdAt",
			Value:  value,
		},
	}
}

func (r avatarsOnRaidsQueryCreatedAtDateTime) AfterEquals(value DateTime) avatarsOnRaidsParams {
	return avatarsOnRaidsParams{
		data: builder.Field{
			Action: "gte",
			Name:   "createdAt",
			Value:  value,
		},
	}
}

// base struct
type avatarsOnRaidsQueryDeletedAtDateTime struct{}

// Set the optional value of DeletedAt
func (r avatarsOnRaidsQueryDeletedAtDateTime) Set(value DateTime) avatarsOnRaidsSetParams {

	return avatarsOnRaidsSetParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: value,
		},
	}

}

// Set the optional value of DeletedAt dynamically
func (r avatarsOnRaidsQueryDeletedAtDateTime) SetOptional(value *DateTime) avatarsOnRaidsSetParams {
	if value == nil {

		var v *DateTime
		return avatarsOnRaidsSetParams{
			data: builder.Field{
				Name:  "deletedAt",
				Value: v,
			},
		}
	}

	return r.Set(*value)
}

func (r avatarsOnRaidsQueryDeletedAtDateTime) Equals(value DateTime) avatarsOnRaidsWithPrismaDeletedAtEqualsParams {
	return avatarsOnRaidsWithPrismaDeletedAtEqualsParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: value,
		},
	}
}

func (r avatarsOnRaidsQueryDeletedAtDateTime) In(values []DateTime) avatarsOnRaidsParams {
	f := builder.Field{
		Name:   "deletedAt",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return avatarsOnRaidsParams{
		data: f,
	}
}

func (r avatarsOnRaidsQueryDeletedAtDateTime) EqualsOptional(value *DateTime) avatarsOnRaidsParams {
	return avatarsOnRaidsParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: value,
		},
	}
}

func (r avatarsOnRaidsQueryDeletedAtDateTime) IsNull() avatarsOnRaidsParams {
	var str *string = nil
	return avatarsOnRaidsParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: str,
		},
	}
}

func (r avatarsOnRaidsQueryDeletedAtDateTime) Order(direction runtime.Direction) avatarsOnRaidsParams {
	return avatarsOnRaidsParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: direction,
		},
	}
}

func (r avatarsOnRaidsQueryDeletedAtDateTime) Before(value DateTime) avatarsOnRaidsParams {
	return avatarsOnRaidsParams{
		data: builder.Field{
			Action: "lt",
			Name:   "deletedAt",
			Value:  value,
		},
	}
}

func (r avatarsOnRaidsQueryDeletedAtDateTime) After(value DateTime) avatarsOnRaidsParams {
	return avatarsOnRaidsParams{
		data: builder.Field{
			Action: "gt",
			Name:   "deletedAt",
			Value:  value,
		},
	}
}

func (r avatarsOnRaidsQueryDeletedAtDateTime) BeforeEquals(value DateTime) avatarsOnRaidsParams {
	return avatarsOnRaidsParams{
		data: builder.Field{
			Action: "lte",
			Name:   "deletedAt",
			Value:  value,
		},
	}
}

func (r avatarsOnRaidsQueryDeletedAtDateTime) AfterEquals(value DateTime) avatarsOnRaidsParams {
	return avatarsOnRaidsParams{
		data: builder.Field{
			Action: "gte",
			Name:   "deletedAt",
			Value:  value,
		},
	}
}

// base struct
type avatarsOnRaidsQueryUpdatedAtDateTime struct{}

// Set the required value of UpdatedAt
func (r avatarsOnRaidsQueryUpdatedAtDateTime) Set(value DateTime) avatarsOnRaidsSetParams {

	return avatarsOnRaidsSetParams{
		data: builder.Field{
			Name:  "updatedAt",
			Value: value,
		},
	}

}

func (r avatarsOnRaidsQueryUpdatedAtDateTime) Equals(value DateTime) avatarsOnRaidsWithPrismaUpdatedAtEqualsParams {
	return avatarsOnRaidsWithPrismaUpdatedAtEqualsParams{
		data: builder.Field{
			Name:  "updatedAt",
			Value: value,
		},
	}
}

func (r avatarsOnRaidsQueryUpdatedAtDateTime) In(values []DateTime) avatarsOnRaidsParams {
	f := builder.Field{
		Name:   "updatedAt",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return avatarsOnRaidsParams{
		data: f,
	}
}

func (r avatarsOnRaidsQueryUpdatedAtDateTime) Order(direction runtime.Direction) avatarsOnRaidsParams {
	return avatarsOnRaidsParams{
		data: builder.Field{
			Name:  "updatedAt",
			Value: direction,
		},
	}
}

func (r avatarsOnRaidsQueryUpdatedAtDateTime) Before(value DateTime) avatarsOnRaidsParams {
	return avatarsOnRaidsParams{
		data: builder.Field{
			Action: "lt",
			Name:   "updatedAt",
			Value:  value,
		},
	}
}

func (r avatarsOnRaidsQueryUpdatedAtDateTime) After(value DateTime) avatarsOnRaidsParams {
	return avatarsOnRaidsParams{
		data: builder.Field{
			Action: "gt",
			Name:   "updatedAt",
			Value:  value,
		},
	}
}

func (r avatarsOnRaidsQueryUpdatedAtDateTime) BeforeEquals(value DateTime) avatarsOnRaidsParams {
	return avatarsOnRaidsParams{
		data: builder.Field{
			Action: "lte",
			Name:   "updatedAt",
			Value:  value,
		},
	}
}

func (r avatarsOnRaidsQueryUpdatedAtDateTime) AfterEquals(value DateTime) avatarsOnRaidsParams {
	return avatarsOnRaidsParams{
		data: builder.Field{
			Action: "gte",
			Name:   "updatedAt",
			Value:  value,
		},
	}
}

// base struct
type avatarsOnRaidsQueryPositionInt struct{}

// Set the required value of Position
func (r avatarsOnRaidsQueryPositionInt) Set(value int) avatarsOnRaidsWithPrismaPositionSetParams {

	return avatarsOnRaidsWithPrismaPositionSetParams{
		data: builder.Field{
			Name:  "position",
			Value: value,
		},
	}

}

func (r avatarsOnRaidsQueryPositionInt) Equals(value int) avatarsOnRaidsWithPrismaPositionEqualsParams {
	return avatarsOnRaidsWithPrismaPositionEqualsParams{
		data: builder.Field{
			Name:  "position",
			Value: value,
		},
	}
}

func (r avatarsOnRaidsQueryPositionInt) In(values []int) avatarsOnRaidsParams {
	f := builder.Field{
		Name:   "position",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return avatarsOnRaidsParams{
		data: f,
	}
}

func (r avatarsOnRaidsQueryPositionInt) Order(direction runtime.Direction) avatarsOnRaidsParams {
	return avatarsOnRaidsParams{
		data: builder.Field{
			Name:  "position",
			Value: direction,
		},
	}
}

func (r avatarsOnRaidsQueryPositionInt) LT(value int) avatarsOnRaidsParams {
	return avatarsOnRaidsParams{
		data: builder.Field{
			Action: "lt",
			Name:   "position",
			Value:  value,
		},
	}
}

func (r avatarsOnRaidsQueryPositionInt) GT(value int) avatarsOnRaidsParams {
	return avatarsOnRaidsParams{
		data: builder.Field{
			Action: "gt",
			Name:   "position",
			Value:  value,
		},
	}
}

func (r avatarsOnRaidsQueryPositionInt) LTE(value int) avatarsOnRaidsParams {
	return avatarsOnRaidsParams{
		data: builder.Field{
			Action: "lte",
			Name:   "position",
			Value:  value,
		},
	}
}

func (r avatarsOnRaidsQueryPositionInt) GTE(value int) avatarsOnRaidsParams {
	return avatarsOnRaidsParams{
		data: builder.Field{
			Action: "gte",
			Name:   "position",
			Value:  value,
		},
	}
}

// base struct
type avatarsOnRaidsQueryRaidRaid struct{}

type avatarsOnRaidsQueryRaidRelations struct{}

// AvatarsOnRaids -> Raid
//
// @relation
// @required
func (avatarsOnRaidsQueryRaidRelations) Where(
	params ...iRaidParams,
) avatarsOnRaidsParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return avatarsOnRaidsParams{
		data: builder.Field{
			Name:   "raid",
			Action: "",
			Fields: fields,
		},
	}
}

func (avatarsOnRaidsQueryRaidRelations) Fetch() avatarsOnRaidsToRaidFindOne {
	var v avatarsOnRaidsToRaidFindOne

	v.query.Operation = "query"
	v.query.Method = "raid"
	v.query.Outputs = raidOutput

	return v
}

func (r avatarsOnRaidsQueryRaidRelations) Link(
	params ...iRaidParams,
) avatarsOnRaidsWithPrismaRaidSetParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return avatarsOnRaidsWithPrismaRaidSetParams{
		data: builder.Field{
			Name: "raid",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: fields,
				},
			},
		},
	}
}

// base struct
type avatarsOnRaidsQueryRaidIDInt struct{}

// Set the required value of RaidID
func (r avatarsOnRaidsQueryRaidIDInt) Set(value int) avatarsOnRaidsWithPrismaRaidIDSetParams {

	return avatarsOnRaidsWithPrismaRaidIDSetParams{
		data: builder.Field{
			Name:  "raidId",
			Value: value,
		},
	}

}

func (r avatarsOnRaidsQueryRaidIDInt) Equals(value int) avatarsOnRaidsWithPrismaRaidIDEqualsParams {
	return avatarsOnRaidsWithPrismaRaidIDEqualsParams{
		data: builder.Field{
			Name:  "raidId",
			Value: value,
		},
	}
}

func (r avatarsOnRaidsQueryRaidIDInt) In(values []int) avatarsOnRaidsParams {
	f := builder.Field{
		Name:   "raidId",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return avatarsOnRaidsParams{
		data: f,
	}
}

func (r avatarsOnRaidsQueryRaidIDInt) Order(direction runtime.Direction) avatarsOnRaidsParams {
	return avatarsOnRaidsParams{
		data: builder.Field{
			Name:  "raidId",
			Value: direction,
		},
	}
}

func (r avatarsOnRaidsQueryRaidIDInt) LT(value int) avatarsOnRaidsParams {
	return avatarsOnRaidsParams{
		data: builder.Field{
			Action: "lt",
			Name:   "raidId",
			Value:  value,
		},
	}
}

func (r avatarsOnRaidsQueryRaidIDInt) GT(value int) avatarsOnRaidsParams {
	return avatarsOnRaidsParams{
		data: builder.Field{
			Action: "gt",
			Name:   "raidId",
			Value:  value,
		},
	}
}

func (r avatarsOnRaidsQueryRaidIDInt) LTE(value int) avatarsOnRaidsParams {
	return avatarsOnRaidsParams{
		data: builder.Field{
			Action: "lte",
			Name:   "raidId",
			Value:  value,
		},
	}
}

func (r avatarsOnRaidsQueryRaidIDInt) GTE(value int) avatarsOnRaidsParams {
	return avatarsOnRaidsParams{
		data: builder.Field{
			Action: "gte",
			Name:   "raidId",
			Value:  value,
		},
	}
}

// base struct
type avatarsOnRaidsQueryAvatarAvatar struct{}

type avatarsOnRaidsQueryAvatarRelations struct{}

// AvatarsOnRaids -> Avatar
//
// @relation
// @required
func (avatarsOnRaidsQueryAvatarRelations) Where(
	params ...iAvatarParams,
) avatarsOnRaidsParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return avatarsOnRaidsParams{
		data: builder.Field{
			Name:   "avatar",
			Action: "",
			Fields: fields,
		},
	}
}

func (avatarsOnRaidsQueryAvatarRelations) Fetch() avatarsOnRaidsToAvatarFindOne {
	var v avatarsOnRaidsToAvatarFindOne

	v.query.Operation = "query"
	v.query.Method = "avatar"
	v.query.Outputs = avatarOutput

	return v
}

func (r avatarsOnRaidsQueryAvatarRelations) Link(
	params ...iAvatarParams,
) avatarsOnRaidsWithPrismaAvatarSetParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return avatarsOnRaidsWithPrismaAvatarSetParams{
		data: builder.Field{
			Name: "avatar",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: fields,
				},
			},
		},
	}
}

// base struct
type avatarsOnRaidsQueryAvatarIDInt struct{}

// Set the required value of AvatarID
func (r avatarsOnRaidsQueryAvatarIDInt) Set(value int) avatarsOnRaidsWithPrismaAvatarIDSetParams {

	return avatarsOnRaidsWithPrismaAvatarIDSetParams{
		data: builder.Field{
			Name:  "avatarId",
			Value: value,
		},
	}

}

func (r avatarsOnRaidsQueryAvatarIDInt) Equals(value int) avatarsOnRaidsWithPrismaAvatarIDEqualsParams {
	return avatarsOnRaidsWithPrismaAvatarIDEqualsParams{
		data: builder.Field{
			Name:  "avatarId",
			Value: value,
		},
	}
}

func (r avatarsOnRaidsQueryAvatarIDInt) In(values []int) avatarsOnRaidsParams {
	f := builder.Field{
		Name:   "avatarId",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return avatarsOnRaidsParams{
		data: f,
	}
}

func (r avatarsOnRaidsQueryAvatarIDInt) Order(direction runtime.Direction) avatarsOnRaidsParams {
	return avatarsOnRaidsParams{
		data: builder.Field{
			Name:  "avatarId",
			Value: direction,
		},
	}
}

func (r avatarsOnRaidsQueryAvatarIDInt) LT(value int) avatarsOnRaidsParams {
	return avatarsOnRaidsParams{
		data: builder.Field{
			Action: "lt",
			Name:   "avatarId",
			Value:  value,
		},
	}
}

func (r avatarsOnRaidsQueryAvatarIDInt) GT(value int) avatarsOnRaidsParams {
	return avatarsOnRaidsParams{
		data: builder.Field{
			Action: "gt",
			Name:   "avatarId",
			Value:  value,
		},
	}
}

func (r avatarsOnRaidsQueryAvatarIDInt) LTE(value int) avatarsOnRaidsParams {
	return avatarsOnRaidsParams{
		data: builder.Field{
			Action: "lte",
			Name:   "avatarId",
			Value:  value,
		},
	}
}

func (r avatarsOnRaidsQueryAvatarIDInt) GTE(value int) avatarsOnRaidsParams {
	return avatarsOnRaidsParams{
		data: builder.Field{
			Action: "gte",
			Name:   "avatarId",
			Value:  value,
		},
	}
}

// RaidBossesOnRaids acts as a namespaces to access query methods for the RaidBossesOnRaids model
var RaidBossesOnRaids = raidBossesOnRaidsQuery{}

// raidBossesOnRaidsQuery exposes query functions for the raidBossesOnRaids model
type raidBossesOnRaidsQuery struct {
	// CreatedAt
	//
	// @required
	CreatedAt raidBossesOnRaidsQueryCreatedAtDateTime

	// DeletedAt
	//
	// @optional
	DeletedAt raidBossesOnRaidsQueryDeletedAtDateTime

	// UpdatedAt
	//
	// @required
	UpdatedAt raidBossesOnRaidsQueryUpdatedAtDateTime

	Raid raidBossesOnRaidsQueryRaidRelations

	// RaidID
	//
	// @required
	RaidID raidBossesOnRaidsQueryRaidIDInt

	RaidBoss raidBossesOnRaidsQueryRaidBossRelations

	// RaidBossID
	//
	// @required
	RaidBossID raidBossesOnRaidsQueryRaidBossIDInt
}

func (raidBossesOnRaidsQuery) Not(params ...iRaidBossesOnRaidsParams) raidBossesOnRaidsParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return raidBossesOnRaidsParams{
		data: builder.Field{
			Name:     "NOT",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (raidBossesOnRaidsQuery) Or(params ...iRaidBossesOnRaidsParams) raidBossesOnRaidsParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return raidBossesOnRaidsParams{
		data: builder.Field{
			Name:     "OR",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

// searched for field raidId_avatarId
// type: RaidIdAvatarIdCompoundUniqueInput

// searched for field raidId_avatarId
// type: RaidIdAvatarIdCompoundUniqueInput

// searched for field raidId_raidBossId
// type: RaidIdRaidBossIdCompoundUniqueInput

func (raidBossesOnRaidsQuery) RaidIDRaidBossID(
	_raidID iRaidBossesOnRaidsWithPrismaRaidIDEqualsParams,

	_raidBossID iRaidBossesOnRaidsWithPrismaRaidBossIDEqualsParams,
) iRaidBossesOnRaidsEqualsParamsUnique {
	var fields []builder.Field

	fields = append(fields, _raidID.field())
	fields = append(fields, _raidBossID.field())

	return raidBossesOnRaidsEqualsParamsUnique{
		data: builder.Field{
			Name:   "raidId_raidBossId",
			Fields: fields,
		},
	}
}

// searched for field raidId_raidBossId
// type: RaidIdRaidBossIdCompoundUniqueInput

func (raidBossesOnRaidsQuery) RaidIDRaidBossID(
	_raidID iRaidBossesOnRaidsWithPrismaRaidIDEqualsParams,

	_raidBossID iRaidBossesOnRaidsWithPrismaRaidBossIDEqualsParams,
) iRaidBossesOnRaidsEqualsParamsUnique {
	var fields []builder.Field

	fields = append(fields, _raidID.field())
	fields = append(fields, _raidBossID.field())

	return raidBossesOnRaidsEqualsParamsUnique{
		data: builder.Field{
			Name:   "raidId_raidBossId",
			Fields: fields,
		},
	}
}

// searched for field raidId_storyId
// type: RaidIdStoryIdCompoundUniqueInput

// searched for field raidId_storyId
// type: RaidIdStoryIdCompoundUniqueInput

// searched for field id
// type: Int

// searched for field storyId_sequence
// type: StoryIdSequenceCompoundUniqueInput

// searched for field id
// type: Int

// searched for field eventId_position
// type: EventIdPositionCompoundUniqueInput

// searched for field messageId_actionId
// type: MessageIdActionIdCompoundUniqueInput

// searched for field messageId_actionId
// type: MessageIdActionIdCompoundUniqueInput

// searched for field messageId_eventId
// type: MessageIdEventIdCompoundUniqueInput

// searched for field messageId_eventId
// type: MessageIdEventIdCompoundUniqueInput

// base struct
type raidBossesOnRaidsQueryCreatedAtDateTime struct{}

// Set the required value of CreatedAt
func (r raidBossesOnRaidsQueryCreatedAtDateTime) Set(value DateTime) raidBossesOnRaidsSetParams {

	return raidBossesOnRaidsSetParams{
		data: builder.Field{
			Name:  "createdAt",
			Value: value,
		},
	}

}

func (r raidBossesOnRaidsQueryCreatedAtDateTime) Equals(value DateTime) raidBossesOnRaidsWithPrismaCreatedAtEqualsParams {
	return raidBossesOnRaidsWithPrismaCreatedAtEqualsParams{
		data: builder.Field{
			Name:  "createdAt",
			Value: value,
		},
	}
}

func (r raidBossesOnRaidsQueryCreatedAtDateTime) In(values []DateTime) raidBossesOnRaidsParams {
	f := builder.Field{
		Name:   "createdAt",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return raidBossesOnRaidsParams{
		data: f,
	}
}

func (r raidBossesOnRaidsQueryCreatedAtDateTime) Order(direction runtime.Direction) raidBossesOnRaidsParams {
	return raidBossesOnRaidsParams{
		data: builder.Field{
			Name:  "createdAt",
			Value: direction,
		},
	}
}

func (r raidBossesOnRaidsQueryCreatedAtDateTime) Before(value DateTime) raidBossesOnRaidsParams {
	return raidBossesOnRaidsParams{
		data: builder.Field{
			Action: "lt",
			Name:   "createdAt",
			Value:  value,
		},
	}
}

func (r raidBossesOnRaidsQueryCreatedAtDateTime) After(value DateTime) raidBossesOnRaidsParams {
	return raidBossesOnRaidsParams{
		data: builder.Field{
			Action: "gt",
			Name:   "createdAt",
			Value:  value,
		},
	}
}

func (r raidBossesOnRaidsQueryCreatedAtDateTime) BeforeEquals(value DateTime) raidBossesOnRaidsParams {
	return raidBossesOnRaidsParams{
		data: builder.Field{
			Action: "lte",
			Name:   "createdAt",
			Value:  value,
		},
	}
}

func (r raidBossesOnRaidsQueryCreatedAtDateTime) AfterEquals(value DateTime) raidBossesOnRaidsParams {
	return raidBossesOnRaidsParams{
		data: builder.Field{
			Action: "gte",
			Name:   "createdAt",
			Value:  value,
		},
	}
}

// base struct
type raidBossesOnRaidsQueryDeletedAtDateTime struct{}

// Set the optional value of DeletedAt
func (r raidBossesOnRaidsQueryDeletedAtDateTime) Set(value DateTime) raidBossesOnRaidsSetParams {

	return raidBossesOnRaidsSetParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: value,
		},
	}

}

// Set the optional value of DeletedAt dynamically
func (r raidBossesOnRaidsQueryDeletedAtDateTime) SetOptional(value *DateTime) raidBossesOnRaidsSetParams {
	if value == nil {

		var v *DateTime
		return raidBossesOnRaidsSetParams{
			data: builder.Field{
				Name:  "deletedAt",
				Value: v,
			},
		}
	}

	return r.Set(*value)
}

func (r raidBossesOnRaidsQueryDeletedAtDateTime) Equals(value DateTime) raidBossesOnRaidsWithPrismaDeletedAtEqualsParams {
	return raidBossesOnRaidsWithPrismaDeletedAtEqualsParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: value,
		},
	}
}

func (r raidBossesOnRaidsQueryDeletedAtDateTime) In(values []DateTime) raidBossesOnRaidsParams {
	f := builder.Field{
		Name:   "deletedAt",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return raidBossesOnRaidsParams{
		data: f,
	}
}

func (r raidBossesOnRaidsQueryDeletedAtDateTime) EqualsOptional(value *DateTime) raidBossesOnRaidsParams {
	return raidBossesOnRaidsParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: value,
		},
	}
}

func (r raidBossesOnRaidsQueryDeletedAtDateTime) IsNull() raidBossesOnRaidsParams {
	var str *string = nil
	return raidBossesOnRaidsParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: str,
		},
	}
}

func (r raidBossesOnRaidsQueryDeletedAtDateTime) Order(direction runtime.Direction) raidBossesOnRaidsParams {
	return raidBossesOnRaidsParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: direction,
		},
	}
}

func (r raidBossesOnRaidsQueryDeletedAtDateTime) Before(value DateTime) raidBossesOnRaidsParams {
	return raidBossesOnRaidsParams{
		data: builder.Field{
			Action: "lt",
			Name:   "deletedAt",
			Value:  value,
		},
	}
}

func (r raidBossesOnRaidsQueryDeletedAtDateTime) After(value DateTime) raidBossesOnRaidsParams {
	return raidBossesOnRaidsParams{
		data: builder.Field{
			Action: "gt",
			Name:   "deletedAt",
			Value:  value,
		},
	}
}

func (r raidBossesOnRaidsQueryDeletedAtDateTime) BeforeEquals(value DateTime) raidBossesOnRaidsParams {
	return raidBossesOnRaidsParams{
		data: builder.Field{
			Action: "lte",
			Name:   "deletedAt",
			Value:  value,
		},
	}
}

func (r raidBossesOnRaidsQueryDeletedAtDateTime) AfterEquals(value DateTime) raidBossesOnRaidsParams {
	return raidBossesOnRaidsParams{
		data: builder.Field{
			Action: "gte",
			Name:   "deletedAt",
			Value:  value,
		},
	}
}

// base struct
type raidBossesOnRaidsQueryUpdatedAtDateTime struct{}

// Set the required value of UpdatedAt
func (r raidBossesOnRaidsQueryUpdatedAtDateTime) Set(value DateTime) raidBossesOnRaidsSetParams {

	return raidBossesOnRaidsSetParams{
		data: builder.Field{
			Name:  "updatedAt",
			Value: value,
		},
	}

}

func (r raidBossesOnRaidsQueryUpdatedAtDateTime) Equals(value DateTime) raidBossesOnRaidsWithPrismaUpdatedAtEqualsParams {
	return raidBossesOnRaidsWithPrismaUpdatedAtEqualsParams{
		data: builder.Field{
			Name:  "updatedAt",
			Value: value,
		},
	}
}

func (r raidBossesOnRaidsQueryUpdatedAtDateTime) In(values []DateTime) raidBossesOnRaidsParams {
	f := builder.Field{
		Name:   "updatedAt",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return raidBossesOnRaidsParams{
		data: f,
	}
}

func (r raidBossesOnRaidsQueryUpdatedAtDateTime) Order(direction runtime.Direction) raidBossesOnRaidsParams {
	return raidBossesOnRaidsParams{
		data: builder.Field{
			Name:  "updatedAt",
			Value: direction,
		},
	}
}

func (r raidBossesOnRaidsQueryUpdatedAtDateTime) Before(value DateTime) raidBossesOnRaidsParams {
	return raidBossesOnRaidsParams{
		data: builder.Field{
			Action: "lt",
			Name:   "updatedAt",
			Value:  value,
		},
	}
}

func (r raidBossesOnRaidsQueryUpdatedAtDateTime) After(value DateTime) raidBossesOnRaidsParams {
	return raidBossesOnRaidsParams{
		data: builder.Field{
			Action: "gt",
			Name:   "updatedAt",
			Value:  value,
		},
	}
}

func (r raidBossesOnRaidsQueryUpdatedAtDateTime) BeforeEquals(value DateTime) raidBossesOnRaidsParams {
	return raidBossesOnRaidsParams{
		data: builder.Field{
			Action: "lte",
			Name:   "updatedAt",
			Value:  value,
		},
	}
}

func (r raidBossesOnRaidsQueryUpdatedAtDateTime) AfterEquals(value DateTime) raidBossesOnRaidsParams {
	return raidBossesOnRaidsParams{
		data: builder.Field{
			Action: "gte",
			Name:   "updatedAt",
			Value:  value,
		},
	}
}

// base struct
type raidBossesOnRaidsQueryRaidRaid struct{}

type raidBossesOnRaidsQueryRaidRelations struct{}

// RaidBossesOnRaids -> Raid
//
// @relation
// @required
func (raidBossesOnRaidsQueryRaidRelations) Where(
	params ...iRaidParams,
) raidBossesOnRaidsParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return raidBossesOnRaidsParams{
		data: builder.Field{
			Name:   "raid",
			Action: "",
			Fields: fields,
		},
	}
}

func (raidBossesOnRaidsQueryRaidRelations) Fetch() raidBossesOnRaidsToRaidFindOne {
	var v raidBossesOnRaidsToRaidFindOne

	v.query.Operation = "query"
	v.query.Method = "raid"
	v.query.Outputs = raidOutput

	return v
}

func (r raidBossesOnRaidsQueryRaidRelations) Link(
	params ...iRaidParams,
) raidBossesOnRaidsWithPrismaRaidSetParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return raidBossesOnRaidsWithPrismaRaidSetParams{
		data: builder.Field{
			Name: "raid",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: fields,
				},
			},
		},
	}
}

// base struct
type raidBossesOnRaidsQueryRaidIDInt struct{}

// Set the required value of RaidID
func (r raidBossesOnRaidsQueryRaidIDInt) Set(value int) raidBossesOnRaidsWithPrismaRaidIDSetParams {

	return raidBossesOnRaidsWithPrismaRaidIDSetParams{
		data: builder.Field{
			Name:  "raidId",
			Value: value,
		},
	}

}

func (r raidBossesOnRaidsQueryRaidIDInt) Equals(value int) raidBossesOnRaidsWithPrismaRaidIDEqualsParams {
	return raidBossesOnRaidsWithPrismaRaidIDEqualsParams{
		data: builder.Field{
			Name:  "raidId",
			Value: value,
		},
	}
}

func (r raidBossesOnRaidsQueryRaidIDInt) In(values []int) raidBossesOnRaidsParams {
	f := builder.Field{
		Name:   "raidId",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return raidBossesOnRaidsParams{
		data: f,
	}
}

func (r raidBossesOnRaidsQueryRaidIDInt) Order(direction runtime.Direction) raidBossesOnRaidsParams {
	return raidBossesOnRaidsParams{
		data: builder.Field{
			Name:  "raidId",
			Value: direction,
		},
	}
}

func (r raidBossesOnRaidsQueryRaidIDInt) LT(value int) raidBossesOnRaidsParams {
	return raidBossesOnRaidsParams{
		data: builder.Field{
			Action: "lt",
			Name:   "raidId",
			Value:  value,
		},
	}
}

func (r raidBossesOnRaidsQueryRaidIDInt) GT(value int) raidBossesOnRaidsParams {
	return raidBossesOnRaidsParams{
		data: builder.Field{
			Action: "gt",
			Name:   "raidId",
			Value:  value,
		},
	}
}

func (r raidBossesOnRaidsQueryRaidIDInt) LTE(value int) raidBossesOnRaidsParams {
	return raidBossesOnRaidsParams{
		data: builder.Field{
			Action: "lte",
			Name:   "raidId",
			Value:  value,
		},
	}
}

func (r raidBossesOnRaidsQueryRaidIDInt) GTE(value int) raidBossesOnRaidsParams {
	return raidBossesOnRaidsParams{
		data: builder.Field{
			Action: "gte",
			Name:   "raidId",
			Value:  value,
		},
	}
}

// base struct
type raidBossesOnRaidsQueryRaidBossRaidBoss struct{}

type raidBossesOnRaidsQueryRaidBossRelations struct{}

// RaidBossesOnRaids -> RaidBoss
//
// @relation
// @required
func (raidBossesOnRaidsQueryRaidBossRelations) Where(
	params ...iRaidBossParams,
) raidBossesOnRaidsParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return raidBossesOnRaidsParams{
		data: builder.Field{
			Name:   "raidBoss",
			Action: "",
			Fields: fields,
		},
	}
}

func (raidBossesOnRaidsQueryRaidBossRelations) Fetch() raidBossesOnRaidsToRaidBossFindOne {
	var v raidBossesOnRaidsToRaidBossFindOne

	v.query.Operation = "query"
	v.query.Method = "raidBoss"
	v.query.Outputs = raidBossOutput

	return v
}

func (r raidBossesOnRaidsQueryRaidBossRelations) Link(
	params ...iRaidBossParams,
) raidBossesOnRaidsWithPrismaRaidBossSetParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return raidBossesOnRaidsWithPrismaRaidBossSetParams{
		data: builder.Field{
			Name: "raidBoss",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: fields,
				},
			},
		},
	}
}

// base struct
type raidBossesOnRaidsQueryRaidBossIDInt struct{}

// Set the required value of RaidBossID
func (r raidBossesOnRaidsQueryRaidBossIDInt) Set(value int) raidBossesOnRaidsWithPrismaRaidBossIDSetParams {

	return raidBossesOnRaidsWithPrismaRaidBossIDSetParams{
		data: builder.Field{
			Name:  "raidBossId",
			Value: value,
		},
	}

}

func (r raidBossesOnRaidsQueryRaidBossIDInt) Equals(value int) raidBossesOnRaidsWithPrismaRaidBossIDEqualsParams {
	return raidBossesOnRaidsWithPrismaRaidBossIDEqualsParams{
		data: builder.Field{
			Name:  "raidBossId",
			Value: value,
		},
	}
}

func (r raidBossesOnRaidsQueryRaidBossIDInt) In(values []int) raidBossesOnRaidsParams {
	f := builder.Field{
		Name:   "raidBossId",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return raidBossesOnRaidsParams{
		data: f,
	}
}

func (r raidBossesOnRaidsQueryRaidBossIDInt) Order(direction runtime.Direction) raidBossesOnRaidsParams {
	return raidBossesOnRaidsParams{
		data: builder.Field{
			Name:  "raidBossId",
			Value: direction,
		},
	}
}

func (r raidBossesOnRaidsQueryRaidBossIDInt) LT(value int) raidBossesOnRaidsParams {
	return raidBossesOnRaidsParams{
		data: builder.Field{
			Action: "lt",
			Name:   "raidBossId",
			Value:  value,
		},
	}
}

func (r raidBossesOnRaidsQueryRaidBossIDInt) GT(value int) raidBossesOnRaidsParams {
	return raidBossesOnRaidsParams{
		data: builder.Field{
			Action: "gt",
			Name:   "raidBossId",
			Value:  value,
		},
	}
}

func (r raidBossesOnRaidsQueryRaidBossIDInt) LTE(value int) raidBossesOnRaidsParams {
	return raidBossesOnRaidsParams{
		data: builder.Field{
			Action: "lte",
			Name:   "raidBossId",
			Value:  value,
		},
	}
}

func (r raidBossesOnRaidsQueryRaidBossIDInt) GTE(value int) raidBossesOnRaidsParams {
	return raidBossesOnRaidsParams{
		data: builder.Field{
			Action: "gte",
			Name:   "raidBossId",
			Value:  value,
		},
	}
}

// Story acts as a namespaces to access query methods for the Story model
var Story = storyQuery{}

// storyQuery exposes query functions for the story model
type storyQuery struct {
	// ID
	//
	// @required
	ID storyQueryIDInt

	// CreatedAt
	//
	// @required
	CreatedAt storyQueryCreatedAtDateTime

	// DeletedAt
	//
	// @optional
	DeletedAt storyQueryDeletedAtDateTime

	// UpdatedAt
	//
	// @required
	UpdatedAt storyQueryUpdatedAtDateTime

	StoriesOnRaids storyQueryStoriesOnRaidsRelations

	Event storyQueryEventRelations
}

func (storyQuery) Not(params ...iStoryParams) storyParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return storyParams{
		data: builder.Field{
			Name:     "NOT",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (storyQuery) Or(params ...iStoryParams) storyParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return storyParams{
		data: builder.Field{
			Name:     "OR",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

// searched for field raidId_avatarId
// type: RaidIdAvatarIdCompoundUniqueInput

// searched for field raidId_avatarId
// type: RaidIdAvatarIdCompoundUniqueInput

// searched for field raidId_raidBossId
// type: RaidIdRaidBossIdCompoundUniqueInput

// searched for field raidId_raidBossId
// type: RaidIdRaidBossIdCompoundUniqueInput

// searched for field raidId_storyId
// type: RaidIdStoryIdCompoundUniqueInput

// searched for field raidId_storyId
// type: RaidIdStoryIdCompoundUniqueInput

// searched for field id
// type: Int

// searched for field storyId_sequence
// type: StoryIdSequenceCompoundUniqueInput

// searched for field id
// type: Int

// searched for field eventId_position
// type: EventIdPositionCompoundUniqueInput

// searched for field messageId_actionId
// type: MessageIdActionIdCompoundUniqueInput

// searched for field messageId_actionId
// type: MessageIdActionIdCompoundUniqueInput

// searched for field messageId_eventId
// type: MessageIdEventIdCompoundUniqueInput

// searched for field messageId_eventId
// type: MessageIdEventIdCompoundUniqueInput

// base struct
type storyQueryIDInt struct{}

// Set the required value of ID
func (r storyQueryIDInt) Set(value int) storySetParams {

	return storySetParams{
		data: builder.Field{
			Name:  "id",
			Value: value,
		},
	}

}

func (r storyQueryIDInt) Equals(value int) storyWithPrismaIDEqualsParamsUnique {
	return storyWithPrismaIDEqualsParamsUnique{
		data: builder.Field{
			Name:  "id",
			Value: value,
		},
	}
}

func (r storyQueryIDInt) In(values []int) storyParamsUnique {
	f := builder.Field{
		Name:   "id",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return storyParamsUnique{
		data: f,
	}
}

func (r storyQueryIDInt) Order(direction runtime.Direction) storyParams {
	return storyParams{
		data: builder.Field{
			Name:  "id",
			Value: direction,
		},
	}
}

func (r storyQueryIDInt) Cursor(cursor string) storyCursorParams {
	return storyCursorParams{
		data: builder.Field{
			Name:  "id",
			Value: cursor,
		},
	}
}

func (r storyQueryIDInt) LT(value int) storyParamsUnique {
	return storyParamsUnique{
		data: builder.Field{
			Action: "lt",
			Name:   "id",
			Value:  value,
		},
	}
}

func (r storyQueryIDInt) GT(value int) storyParamsUnique {
	return storyParamsUnique{
		data: builder.Field{
			Action: "gt",
			Name:   "id",
			Value:  value,
		},
	}
}

func (r storyQueryIDInt) LTE(value int) storyParamsUnique {
	return storyParamsUnique{
		data: builder.Field{
			Action: "lte",
			Name:   "id",
			Value:  value,
		},
	}
}

func (r storyQueryIDInt) GTE(value int) storyParamsUnique {
	return storyParamsUnique{
		data: builder.Field{
			Action: "gte",
			Name:   "id",
			Value:  value,
		},
	}
}

// base struct
type storyQueryCreatedAtDateTime struct{}

// Set the required value of CreatedAt
func (r storyQueryCreatedAtDateTime) Set(value DateTime) storySetParams {

	return storySetParams{
		data: builder.Field{
			Name:  "createdAt",
			Value: value,
		},
	}

}

func (r storyQueryCreatedAtDateTime) Equals(value DateTime) storyWithPrismaCreatedAtEqualsParams {
	return storyWithPrismaCreatedAtEqualsParams{
		data: builder.Field{
			Name:  "createdAt",
			Value: value,
		},
	}
}

func (r storyQueryCreatedAtDateTime) In(values []DateTime) storyParams {
	f := builder.Field{
		Name:   "createdAt",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return storyParams{
		data: f,
	}
}

func (r storyQueryCreatedAtDateTime) Order(direction runtime.Direction) storyParams {
	return storyParams{
		data: builder.Field{
			Name:  "createdAt",
			Value: direction,
		},
	}
}

func (r storyQueryCreatedAtDateTime) Before(value DateTime) storyParams {
	return storyParams{
		data: builder.Field{
			Action: "lt",
			Name:   "createdAt",
			Value:  value,
		},
	}
}

func (r storyQueryCreatedAtDateTime) After(value DateTime) storyParams {
	return storyParams{
		data: builder.Field{
			Action: "gt",
			Name:   "createdAt",
			Value:  value,
		},
	}
}

func (r storyQueryCreatedAtDateTime) BeforeEquals(value DateTime) storyParams {
	return storyParams{
		data: builder.Field{
			Action: "lte",
			Name:   "createdAt",
			Value:  value,
		},
	}
}

func (r storyQueryCreatedAtDateTime) AfterEquals(value DateTime) storyParams {
	return storyParams{
		data: builder.Field{
			Action: "gte",
			Name:   "createdAt",
			Value:  value,
		},
	}
}

// base struct
type storyQueryDeletedAtDateTime struct{}

// Set the optional value of DeletedAt
func (r storyQueryDeletedAtDateTime) Set(value DateTime) storySetParams {

	return storySetParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: value,
		},
	}

}

// Set the optional value of DeletedAt dynamically
func (r storyQueryDeletedAtDateTime) SetOptional(value *DateTime) storySetParams {
	if value == nil {

		var v *DateTime
		return storySetParams{
			data: builder.Field{
				Name:  "deletedAt",
				Value: v,
			},
		}
	}

	return r.Set(*value)
}

func (r storyQueryDeletedAtDateTime) Equals(value DateTime) storyWithPrismaDeletedAtEqualsParams {
	return storyWithPrismaDeletedAtEqualsParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: value,
		},
	}
}

func (r storyQueryDeletedAtDateTime) In(values []DateTime) storyParams {
	f := builder.Field{
		Name:   "deletedAt",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return storyParams{
		data: f,
	}
}

func (r storyQueryDeletedAtDateTime) EqualsOptional(value *DateTime) storyParams {
	return storyParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: value,
		},
	}
}

func (r storyQueryDeletedAtDateTime) IsNull() storyParams {
	var str *string = nil
	return storyParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: str,
		},
	}
}

func (r storyQueryDeletedAtDateTime) Order(direction runtime.Direction) storyParams {
	return storyParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: direction,
		},
	}
}

func (r storyQueryDeletedAtDateTime) Before(value DateTime) storyParams {
	return storyParams{
		data: builder.Field{
			Action: "lt",
			Name:   "deletedAt",
			Value:  value,
		},
	}
}

func (r storyQueryDeletedAtDateTime) After(value DateTime) storyParams {
	return storyParams{
		data: builder.Field{
			Action: "gt",
			Name:   "deletedAt",
			Value:  value,
		},
	}
}

func (r storyQueryDeletedAtDateTime) BeforeEquals(value DateTime) storyParams {
	return storyParams{
		data: builder.Field{
			Action: "lte",
			Name:   "deletedAt",
			Value:  value,
		},
	}
}

func (r storyQueryDeletedAtDateTime) AfterEquals(value DateTime) storyParams {
	return storyParams{
		data: builder.Field{
			Action: "gte",
			Name:   "deletedAt",
			Value:  value,
		},
	}
}

// base struct
type storyQueryUpdatedAtDateTime struct{}

// Set the required value of UpdatedAt
func (r storyQueryUpdatedAtDateTime) Set(value DateTime) storySetParams {

	return storySetParams{
		data: builder.Field{
			Name:  "updatedAt",
			Value: value,
		},
	}

}

func (r storyQueryUpdatedAtDateTime) Equals(value DateTime) storyWithPrismaUpdatedAtEqualsParams {
	return storyWithPrismaUpdatedAtEqualsParams{
		data: builder.Field{
			Name:  "updatedAt",
			Value: value,
		},
	}
}

func (r storyQueryUpdatedAtDateTime) In(values []DateTime) storyParams {
	f := builder.Field{
		Name:   "updatedAt",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return storyParams{
		data: f,
	}
}

func (r storyQueryUpdatedAtDateTime) Order(direction runtime.Direction) storyParams {
	return storyParams{
		data: builder.Field{
			Name:  "updatedAt",
			Value: direction,
		},
	}
}

func (r storyQueryUpdatedAtDateTime) Before(value DateTime) storyParams {
	return storyParams{
		data: builder.Field{
			Action: "lt",
			Name:   "updatedAt",
			Value:  value,
		},
	}
}

func (r storyQueryUpdatedAtDateTime) After(value DateTime) storyParams {
	return storyParams{
		data: builder.Field{
			Action: "gt",
			Name:   "updatedAt",
			Value:  value,
		},
	}
}

func (r storyQueryUpdatedAtDateTime) BeforeEquals(value DateTime) storyParams {
	return storyParams{
		data: builder.Field{
			Action: "lte",
			Name:   "updatedAt",
			Value:  value,
		},
	}
}

func (r storyQueryUpdatedAtDateTime) AfterEquals(value DateTime) storyParams {
	return storyParams{
		data: builder.Field{
			Action: "gte",
			Name:   "updatedAt",
			Value:  value,
		},
	}
}

// base struct
type storyQueryStoriesOnRaidsStoriesOnRaids struct{}

type storyQueryStoriesOnRaidsRelations struct{}

// Story -> StoriesOnRaids
//
// @relation
// @optional
func (storyQueryStoriesOnRaidsRelations) Some(
	params ...iStoriesOnRaidsParams,
) storyParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return storyParams{
		data: builder.Field{
			Name:   "StoriesOnRaids",
			Action: "some",
			Fields: fields,
		},
	}
}

// Story -> StoriesOnRaids
//
// @relation
// @optional
func (storyQueryStoriesOnRaidsRelations) Every(
	params ...iStoriesOnRaidsParams,
) storyParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return storyParams{
		data: builder.Field{
			Name:   "StoriesOnRaids",
			Action: "every",
			Fields: fields,
		},
	}
}

func (storyQueryStoriesOnRaidsRelations) Fetch(

	params ...iStoriesOnRaidsParams,

) storyToStoriesOnRaidsFindMany {
	var v storyToStoriesOnRaidsFindMany

	v.query.Operation = "query"
	v.query.Method = "StoriesOnRaids"
	v.query.Outputs = storiesOnRaidsOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r storyQueryStoriesOnRaidsRelations) Link(
	params ...iStoriesOnRaidsParams,
) storySetParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return storySetParams{
		data: builder.Field{
			Name: "StoriesOnRaids",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: fields,
				},
			},
		},
	}
}

func (r storyQueryStoriesOnRaidsRelations) Unlink() storySetParams {
	return storySetParams{
		data: builder.Field{
			Name: "StoriesOnRaids",
			Fields: []builder.Field{
				{
					Name:  "disconnect",
					Value: true,
				},
			},
		},
	}
}

// base struct
type storyQueryEventEvent struct{}

type storyQueryEventRelations struct{}

// Story -> Event
//
// @relation
// @optional
func (storyQueryEventRelations) Some(
	params ...iEventParams,
) storyParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return storyParams{
		data: builder.Field{
			Name:   "Event",
			Action: "some",
			Fields: fields,
		},
	}
}

// Story -> Event
//
// @relation
// @optional
func (storyQueryEventRelations) Every(
	params ...iEventParams,
) storyParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return storyParams{
		data: builder.Field{
			Name:   "Event",
			Action: "every",
			Fields: fields,
		},
	}
}

func (storyQueryEventRelations) Fetch(

	params ...iEventParams,

) storyToEventFindMany {
	var v storyToEventFindMany

	v.query.Operation = "query"
	v.query.Method = "Event"
	v.query.Outputs = eventOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r storyQueryEventRelations) Link(
	params ...iEventParams,
) storySetParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return storySetParams{
		data: builder.Field{
			Name: "Event",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: fields,
				},
			},
		},
	}
}

func (r storyQueryEventRelations) Unlink() storySetParams {
	return storySetParams{
		data: builder.Field{
			Name: "Event",
			Fields: []builder.Field{
				{
					Name:  "disconnect",
					Value: true,
				},
			},
		},
	}
}

// StoriesOnRaids acts as a namespaces to access query methods for the StoriesOnRaids model
var StoriesOnRaids = storiesOnRaidsQuery{}

// storiesOnRaidsQuery exposes query functions for the storiesOnRaids model
type storiesOnRaidsQuery struct {
	// CreatedAt
	//
	// @required
	CreatedAt storiesOnRaidsQueryCreatedAtDateTime

	// DeletedAt
	//
	// @optional
	DeletedAt storiesOnRaidsQueryDeletedAtDateTime

	// UpdatedAt
	//
	// @required
	UpdatedAt storiesOnRaidsQueryUpdatedAtDateTime

	Raid storiesOnRaidsQueryRaidRelations

	// RaidID
	//
	// @required
	RaidID storiesOnRaidsQueryRaidIDInt

	Story storiesOnRaidsQueryStoryRelations

	// StoryID
	//
	// @required
	StoryID storiesOnRaidsQueryStoryIDInt
}

func (storiesOnRaidsQuery) Not(params ...iStoriesOnRaidsParams) storiesOnRaidsParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return storiesOnRaidsParams{
		data: builder.Field{
			Name:     "NOT",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (storiesOnRaidsQuery) Or(params ...iStoriesOnRaidsParams) storiesOnRaidsParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return storiesOnRaidsParams{
		data: builder.Field{
			Name:     "OR",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

// searched for field raidId_avatarId
// type: RaidIdAvatarIdCompoundUniqueInput

// searched for field raidId_avatarId
// type: RaidIdAvatarIdCompoundUniqueInput

// searched for field raidId_raidBossId
// type: RaidIdRaidBossIdCompoundUniqueInput

// searched for field raidId_raidBossId
// type: RaidIdRaidBossIdCompoundUniqueInput

// searched for field raidId_storyId
// type: RaidIdStoryIdCompoundUniqueInput

func (storiesOnRaidsQuery) RaidIDStoryID(
	_raidID iStoriesOnRaidsWithPrismaRaidIDEqualsParams,

	_storyID iStoriesOnRaidsWithPrismaStoryIDEqualsParams,
) iStoriesOnRaidsEqualsParamsUnique {
	var fields []builder.Field

	fields = append(fields, _raidID.field())
	fields = append(fields, _storyID.field())

	return storiesOnRaidsEqualsParamsUnique{
		data: builder.Field{
			Name:   "raidId_storyId",
			Fields: fields,
		},
	}
}

// searched for field raidId_storyId
// type: RaidIdStoryIdCompoundUniqueInput

func (storiesOnRaidsQuery) RaidIDStoryID(
	_raidID iStoriesOnRaidsWithPrismaRaidIDEqualsParams,

	_storyID iStoriesOnRaidsWithPrismaStoryIDEqualsParams,
) iStoriesOnRaidsEqualsParamsUnique {
	var fields []builder.Field

	fields = append(fields, _raidID.field())
	fields = append(fields, _storyID.field())

	return storiesOnRaidsEqualsParamsUnique{
		data: builder.Field{
			Name:   "raidId_storyId",
			Fields: fields,
		},
	}
}

// searched for field id
// type: Int

// searched for field storyId_sequence
// type: StoryIdSequenceCompoundUniqueInput

// searched for field id
// type: Int

// searched for field eventId_position
// type: EventIdPositionCompoundUniqueInput

// searched for field messageId_actionId
// type: MessageIdActionIdCompoundUniqueInput

// searched for field messageId_actionId
// type: MessageIdActionIdCompoundUniqueInput

// searched for field messageId_eventId
// type: MessageIdEventIdCompoundUniqueInput

// searched for field messageId_eventId
// type: MessageIdEventIdCompoundUniqueInput

// base struct
type storiesOnRaidsQueryCreatedAtDateTime struct{}

// Set the required value of CreatedAt
func (r storiesOnRaidsQueryCreatedAtDateTime) Set(value DateTime) storiesOnRaidsSetParams {

	return storiesOnRaidsSetParams{
		data: builder.Field{
			Name:  "createdAt",
			Value: value,
		},
	}

}

func (r storiesOnRaidsQueryCreatedAtDateTime) Equals(value DateTime) storiesOnRaidsWithPrismaCreatedAtEqualsParams {
	return storiesOnRaidsWithPrismaCreatedAtEqualsParams{
		data: builder.Field{
			Name:  "createdAt",
			Value: value,
		},
	}
}

func (r storiesOnRaidsQueryCreatedAtDateTime) In(values []DateTime) storiesOnRaidsParams {
	f := builder.Field{
		Name:   "createdAt",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return storiesOnRaidsParams{
		data: f,
	}
}

func (r storiesOnRaidsQueryCreatedAtDateTime) Order(direction runtime.Direction) storiesOnRaidsParams {
	return storiesOnRaidsParams{
		data: builder.Field{
			Name:  "createdAt",
			Value: direction,
		},
	}
}

func (r storiesOnRaidsQueryCreatedAtDateTime) Before(value DateTime) storiesOnRaidsParams {
	return storiesOnRaidsParams{
		data: builder.Field{
			Action: "lt",
			Name:   "createdAt",
			Value:  value,
		},
	}
}

func (r storiesOnRaidsQueryCreatedAtDateTime) After(value DateTime) storiesOnRaidsParams {
	return storiesOnRaidsParams{
		data: builder.Field{
			Action: "gt",
			Name:   "createdAt",
			Value:  value,
		},
	}
}

func (r storiesOnRaidsQueryCreatedAtDateTime) BeforeEquals(value DateTime) storiesOnRaidsParams {
	return storiesOnRaidsParams{
		data: builder.Field{
			Action: "lte",
			Name:   "createdAt",
			Value:  value,
		},
	}
}

func (r storiesOnRaidsQueryCreatedAtDateTime) AfterEquals(value DateTime) storiesOnRaidsParams {
	return storiesOnRaidsParams{
		data: builder.Field{
			Action: "gte",
			Name:   "createdAt",
			Value:  value,
		},
	}
}

// base struct
type storiesOnRaidsQueryDeletedAtDateTime struct{}

// Set the optional value of DeletedAt
func (r storiesOnRaidsQueryDeletedAtDateTime) Set(value DateTime) storiesOnRaidsSetParams {

	return storiesOnRaidsSetParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: value,
		},
	}

}

// Set the optional value of DeletedAt dynamically
func (r storiesOnRaidsQueryDeletedAtDateTime) SetOptional(value *DateTime) storiesOnRaidsSetParams {
	if value == nil {

		var v *DateTime
		return storiesOnRaidsSetParams{
			data: builder.Field{
				Name:  "deletedAt",
				Value: v,
			},
		}
	}

	return r.Set(*value)
}

func (r storiesOnRaidsQueryDeletedAtDateTime) Equals(value DateTime) storiesOnRaidsWithPrismaDeletedAtEqualsParams {
	return storiesOnRaidsWithPrismaDeletedAtEqualsParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: value,
		},
	}
}

func (r storiesOnRaidsQueryDeletedAtDateTime) In(values []DateTime) storiesOnRaidsParams {
	f := builder.Field{
		Name:   "deletedAt",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return storiesOnRaidsParams{
		data: f,
	}
}

func (r storiesOnRaidsQueryDeletedAtDateTime) EqualsOptional(value *DateTime) storiesOnRaidsParams {
	return storiesOnRaidsParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: value,
		},
	}
}

func (r storiesOnRaidsQueryDeletedAtDateTime) IsNull() storiesOnRaidsParams {
	var str *string = nil
	return storiesOnRaidsParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: str,
		},
	}
}

func (r storiesOnRaidsQueryDeletedAtDateTime) Order(direction runtime.Direction) storiesOnRaidsParams {
	return storiesOnRaidsParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: direction,
		},
	}
}

func (r storiesOnRaidsQueryDeletedAtDateTime) Before(value DateTime) storiesOnRaidsParams {
	return storiesOnRaidsParams{
		data: builder.Field{
			Action: "lt",
			Name:   "deletedAt",
			Value:  value,
		},
	}
}

func (r storiesOnRaidsQueryDeletedAtDateTime) After(value DateTime) storiesOnRaidsParams {
	return storiesOnRaidsParams{
		data: builder.Field{
			Action: "gt",
			Name:   "deletedAt",
			Value:  value,
		},
	}
}

func (r storiesOnRaidsQueryDeletedAtDateTime) BeforeEquals(value DateTime) storiesOnRaidsParams {
	return storiesOnRaidsParams{
		data: builder.Field{
			Action: "lte",
			Name:   "deletedAt",
			Value:  value,
		},
	}
}

func (r storiesOnRaidsQueryDeletedAtDateTime) AfterEquals(value DateTime) storiesOnRaidsParams {
	return storiesOnRaidsParams{
		data: builder.Field{
			Action: "gte",
			Name:   "deletedAt",
			Value:  value,
		},
	}
}

// base struct
type storiesOnRaidsQueryUpdatedAtDateTime struct{}

// Set the required value of UpdatedAt
func (r storiesOnRaidsQueryUpdatedAtDateTime) Set(value DateTime) storiesOnRaidsSetParams {

	return storiesOnRaidsSetParams{
		data: builder.Field{
			Name:  "updatedAt",
			Value: value,
		},
	}

}

func (r storiesOnRaidsQueryUpdatedAtDateTime) Equals(value DateTime) storiesOnRaidsWithPrismaUpdatedAtEqualsParams {
	return storiesOnRaidsWithPrismaUpdatedAtEqualsParams{
		data: builder.Field{
			Name:  "updatedAt",
			Value: value,
		},
	}
}

func (r storiesOnRaidsQueryUpdatedAtDateTime) In(values []DateTime) storiesOnRaidsParams {
	f := builder.Field{
		Name:   "updatedAt",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return storiesOnRaidsParams{
		data: f,
	}
}

func (r storiesOnRaidsQueryUpdatedAtDateTime) Order(direction runtime.Direction) storiesOnRaidsParams {
	return storiesOnRaidsParams{
		data: builder.Field{
			Name:  "updatedAt",
			Value: direction,
		},
	}
}

func (r storiesOnRaidsQueryUpdatedAtDateTime) Before(value DateTime) storiesOnRaidsParams {
	return storiesOnRaidsParams{
		data: builder.Field{
			Action: "lt",
			Name:   "updatedAt",
			Value:  value,
		},
	}
}

func (r storiesOnRaidsQueryUpdatedAtDateTime) After(value DateTime) storiesOnRaidsParams {
	return storiesOnRaidsParams{
		data: builder.Field{
			Action: "gt",
			Name:   "updatedAt",
			Value:  value,
		},
	}
}

func (r storiesOnRaidsQueryUpdatedAtDateTime) BeforeEquals(value DateTime) storiesOnRaidsParams {
	return storiesOnRaidsParams{
		data: builder.Field{
			Action: "lte",
			Name:   "updatedAt",
			Value:  value,
		},
	}
}

func (r storiesOnRaidsQueryUpdatedAtDateTime) AfterEquals(value DateTime) storiesOnRaidsParams {
	return storiesOnRaidsParams{
		data: builder.Field{
			Action: "gte",
			Name:   "updatedAt",
			Value:  value,
		},
	}
}

// base struct
type storiesOnRaidsQueryRaidRaid struct{}

type storiesOnRaidsQueryRaidRelations struct{}

// StoriesOnRaids -> Raid
//
// @relation
// @required
func (storiesOnRaidsQueryRaidRelations) Where(
	params ...iRaidParams,
) storiesOnRaidsParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return storiesOnRaidsParams{
		data: builder.Field{
			Name:   "raid",
			Action: "",
			Fields: fields,
		},
	}
}

func (storiesOnRaidsQueryRaidRelations) Fetch() storiesOnRaidsToRaidFindOne {
	var v storiesOnRaidsToRaidFindOne

	v.query.Operation = "query"
	v.query.Method = "raid"
	v.query.Outputs = raidOutput

	return v
}

func (r storiesOnRaidsQueryRaidRelations) Link(
	params ...iRaidParams,
) storiesOnRaidsWithPrismaRaidSetParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return storiesOnRaidsWithPrismaRaidSetParams{
		data: builder.Field{
			Name: "raid",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: fields,
				},
			},
		},
	}
}

// base struct
type storiesOnRaidsQueryRaidIDInt struct{}

// Set the required value of RaidID
func (r storiesOnRaidsQueryRaidIDInt) Set(value int) storiesOnRaidsWithPrismaRaidIDSetParams {

	return storiesOnRaidsWithPrismaRaidIDSetParams{
		data: builder.Field{
			Name:  "raidId",
			Value: value,
		},
	}

}

func (r storiesOnRaidsQueryRaidIDInt) Equals(value int) storiesOnRaidsWithPrismaRaidIDEqualsParams {
	return storiesOnRaidsWithPrismaRaidIDEqualsParams{
		data: builder.Field{
			Name:  "raidId",
			Value: value,
		},
	}
}

func (r storiesOnRaidsQueryRaidIDInt) In(values []int) storiesOnRaidsParams {
	f := builder.Field{
		Name:   "raidId",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return storiesOnRaidsParams{
		data: f,
	}
}

func (r storiesOnRaidsQueryRaidIDInt) Order(direction runtime.Direction) storiesOnRaidsParams {
	return storiesOnRaidsParams{
		data: builder.Field{
			Name:  "raidId",
			Value: direction,
		},
	}
}

func (r storiesOnRaidsQueryRaidIDInt) LT(value int) storiesOnRaidsParams {
	return storiesOnRaidsParams{
		data: builder.Field{
			Action: "lt",
			Name:   "raidId",
			Value:  value,
		},
	}
}

func (r storiesOnRaidsQueryRaidIDInt) GT(value int) storiesOnRaidsParams {
	return storiesOnRaidsParams{
		data: builder.Field{
			Action: "gt",
			Name:   "raidId",
			Value:  value,
		},
	}
}

func (r storiesOnRaidsQueryRaidIDInt) LTE(value int) storiesOnRaidsParams {
	return storiesOnRaidsParams{
		data: builder.Field{
			Action: "lte",
			Name:   "raidId",
			Value:  value,
		},
	}
}

func (r storiesOnRaidsQueryRaidIDInt) GTE(value int) storiesOnRaidsParams {
	return storiesOnRaidsParams{
		data: builder.Field{
			Action: "gte",
			Name:   "raidId",
			Value:  value,
		},
	}
}

// base struct
type storiesOnRaidsQueryStoryStory struct{}

type storiesOnRaidsQueryStoryRelations struct{}

// StoriesOnRaids -> Story
//
// @relation
// @required
func (storiesOnRaidsQueryStoryRelations) Where(
	params ...iStoryParams,
) storiesOnRaidsParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return storiesOnRaidsParams{
		data: builder.Field{
			Name:   "story",
			Action: "",
			Fields: fields,
		},
	}
}

func (storiesOnRaidsQueryStoryRelations) Fetch() storiesOnRaidsToStoryFindOne {
	var v storiesOnRaidsToStoryFindOne

	v.query.Operation = "query"
	v.query.Method = "story"
	v.query.Outputs = storyOutput

	return v
}

func (r storiesOnRaidsQueryStoryRelations) Link(
	params ...iStoryParams,
) storiesOnRaidsWithPrismaStorySetParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return storiesOnRaidsWithPrismaStorySetParams{
		data: builder.Field{
			Name: "story",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: fields,
				},
			},
		},
	}
}

// base struct
type storiesOnRaidsQueryStoryIDInt struct{}

// Set the required value of StoryID
func (r storiesOnRaidsQueryStoryIDInt) Set(value int) storiesOnRaidsWithPrismaStoryIDSetParams {

	return storiesOnRaidsWithPrismaStoryIDSetParams{
		data: builder.Field{
			Name:  "storyId",
			Value: value,
		},
	}

}

func (r storiesOnRaidsQueryStoryIDInt) Equals(value int) storiesOnRaidsWithPrismaStoryIDEqualsParams {
	return storiesOnRaidsWithPrismaStoryIDEqualsParams{
		data: builder.Field{
			Name:  "storyId",
			Value: value,
		},
	}
}

func (r storiesOnRaidsQueryStoryIDInt) In(values []int) storiesOnRaidsParams {
	f := builder.Field{
		Name:   "storyId",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return storiesOnRaidsParams{
		data: f,
	}
}

func (r storiesOnRaidsQueryStoryIDInt) Order(direction runtime.Direction) storiesOnRaidsParams {
	return storiesOnRaidsParams{
		data: builder.Field{
			Name:  "storyId",
			Value: direction,
		},
	}
}

func (r storiesOnRaidsQueryStoryIDInt) LT(value int) storiesOnRaidsParams {
	return storiesOnRaidsParams{
		data: builder.Field{
			Action: "lt",
			Name:   "storyId",
			Value:  value,
		},
	}
}

func (r storiesOnRaidsQueryStoryIDInt) GT(value int) storiesOnRaidsParams {
	return storiesOnRaidsParams{
		data: builder.Field{
			Action: "gt",
			Name:   "storyId",
			Value:  value,
		},
	}
}

func (r storiesOnRaidsQueryStoryIDInt) LTE(value int) storiesOnRaidsParams {
	return storiesOnRaidsParams{
		data: builder.Field{
			Action: "lte",
			Name:   "storyId",
			Value:  value,
		},
	}
}

func (r storiesOnRaidsQueryStoryIDInt) GTE(value int) storiesOnRaidsParams {
	return storiesOnRaidsParams{
		data: builder.Field{
			Action: "gte",
			Name:   "storyId",
			Value:  value,
		},
	}
}

// Event acts as a namespaces to access query methods for the Event model
var Event = eventQuery{}

// eventQuery exposes query functions for the event model
type eventQuery struct {
	// ID
	//
	// @required
	ID eventQueryIDInt

	// CreatedAt
	//
	// @required
	CreatedAt eventQueryCreatedAtDateTime

	// DeletedAt
	//
	// @optional
	DeletedAt eventQueryDeletedAtDateTime

	// UpdatedAt
	//
	// @required
	UpdatedAt eventQueryUpdatedAtDateTime

	Story eventQueryStoryRelations

	// StoryID
	//
	// @required
	StoryID eventQueryStoryIDInt

	// Sequence
	//
	// @required
	Sequence eventQuerySequenceInt

	Action eventQueryActionRelations

	MessagesOnEvents eventQueryMessagesOnEventsRelations
}

func (eventQuery) Not(params ...iEventParams) eventParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return eventParams{
		data: builder.Field{
			Name:     "NOT",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (eventQuery) Or(params ...iEventParams) eventParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return eventParams{
		data: builder.Field{
			Name:     "OR",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

// searched for field raidId_avatarId
// type: RaidIdAvatarIdCompoundUniqueInput

// searched for field raidId_avatarId
// type: RaidIdAvatarIdCompoundUniqueInput

// searched for field raidId_raidBossId
// type: RaidIdRaidBossIdCompoundUniqueInput

// searched for field raidId_raidBossId
// type: RaidIdRaidBossIdCompoundUniqueInput

// searched for field raidId_storyId
// type: RaidIdStoryIdCompoundUniqueInput

// searched for field raidId_storyId
// type: RaidIdStoryIdCompoundUniqueInput

// searched for field id
// type: Int

// searched for field storyId_sequence
// type: StoryIdSequenceCompoundUniqueInput

func (eventQuery) StoryIDSequence(
	_storyID iEventWithPrismaStoryIDEqualsParams,

	_sequence iEventWithPrismaSequenceEqualsParams,
) iEventEqualsParamsUnique {
	var fields []builder.Field

	fields = append(fields, _storyID.field())
	fields = append(fields, _sequence.field())

	return eventEqualsParamsUnique{
		data: builder.Field{
			Name:   "storyId_sequence",
			Fields: fields,
		},
	}
}

// searched for field id
// type: Int

// searched for field eventId_position
// type: EventIdPositionCompoundUniqueInput

// searched for field messageId_actionId
// type: MessageIdActionIdCompoundUniqueInput

// searched for field messageId_actionId
// type: MessageIdActionIdCompoundUniqueInput

// searched for field messageId_eventId
// type: MessageIdEventIdCompoundUniqueInput

// searched for field messageId_eventId
// type: MessageIdEventIdCompoundUniqueInput

// base struct
type eventQueryIDInt struct{}

// Set the required value of ID
func (r eventQueryIDInt) Set(value int) eventSetParams {

	return eventSetParams{
		data: builder.Field{
			Name:  "id",
			Value: value,
		},
	}

}

func (r eventQueryIDInt) Equals(value int) eventWithPrismaIDEqualsParamsUnique {
	return eventWithPrismaIDEqualsParamsUnique{
		data: builder.Field{
			Name:  "id",
			Value: value,
		},
	}
}

func (r eventQueryIDInt) In(values []int) eventParamsUnique {
	f := builder.Field{
		Name:   "id",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return eventParamsUnique{
		data: f,
	}
}

func (r eventQueryIDInt) Order(direction runtime.Direction) eventParams {
	return eventParams{
		data: builder.Field{
			Name:  "id",
			Value: direction,
		},
	}
}

func (r eventQueryIDInt) Cursor(cursor string) eventCursorParams {
	return eventCursorParams{
		data: builder.Field{
			Name:  "id",
			Value: cursor,
		},
	}
}

func (r eventQueryIDInt) LT(value int) eventParamsUnique {
	return eventParamsUnique{
		data: builder.Field{
			Action: "lt",
			Name:   "id",
			Value:  value,
		},
	}
}

func (r eventQueryIDInt) GT(value int) eventParamsUnique {
	return eventParamsUnique{
		data: builder.Field{
			Action: "gt",
			Name:   "id",
			Value:  value,
		},
	}
}

func (r eventQueryIDInt) LTE(value int) eventParamsUnique {
	return eventParamsUnique{
		data: builder.Field{
			Action: "lte",
			Name:   "id",
			Value:  value,
		},
	}
}

func (r eventQueryIDInt) GTE(value int) eventParamsUnique {
	return eventParamsUnique{
		data: builder.Field{
			Action: "gte",
			Name:   "id",
			Value:  value,
		},
	}
}

// base struct
type eventQueryCreatedAtDateTime struct{}

// Set the required value of CreatedAt
func (r eventQueryCreatedAtDateTime) Set(value DateTime) eventSetParams {

	return eventSetParams{
		data: builder.Field{
			Name:  "createdAt",
			Value: value,
		},
	}

}

func (r eventQueryCreatedAtDateTime) Equals(value DateTime) eventWithPrismaCreatedAtEqualsParams {
	return eventWithPrismaCreatedAtEqualsParams{
		data: builder.Field{
			Name:  "createdAt",
			Value: value,
		},
	}
}

func (r eventQueryCreatedAtDateTime) In(values []DateTime) eventParams {
	f := builder.Field{
		Name:   "createdAt",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return eventParams{
		data: f,
	}
}

func (r eventQueryCreatedAtDateTime) Order(direction runtime.Direction) eventParams {
	return eventParams{
		data: builder.Field{
			Name:  "createdAt",
			Value: direction,
		},
	}
}

func (r eventQueryCreatedAtDateTime) Before(value DateTime) eventParams {
	return eventParams{
		data: builder.Field{
			Action: "lt",
			Name:   "createdAt",
			Value:  value,
		},
	}
}

func (r eventQueryCreatedAtDateTime) After(value DateTime) eventParams {
	return eventParams{
		data: builder.Field{
			Action: "gt",
			Name:   "createdAt",
			Value:  value,
		},
	}
}

func (r eventQueryCreatedAtDateTime) BeforeEquals(value DateTime) eventParams {
	return eventParams{
		data: builder.Field{
			Action: "lte",
			Name:   "createdAt",
			Value:  value,
		},
	}
}

func (r eventQueryCreatedAtDateTime) AfterEquals(value DateTime) eventParams {
	return eventParams{
		data: builder.Field{
			Action: "gte",
			Name:   "createdAt",
			Value:  value,
		},
	}
}

// base struct
type eventQueryDeletedAtDateTime struct{}

// Set the optional value of DeletedAt
func (r eventQueryDeletedAtDateTime) Set(value DateTime) eventSetParams {

	return eventSetParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: value,
		},
	}

}

// Set the optional value of DeletedAt dynamically
func (r eventQueryDeletedAtDateTime) SetOptional(value *DateTime) eventSetParams {
	if value == nil {

		var v *DateTime
		return eventSetParams{
			data: builder.Field{
				Name:  "deletedAt",
				Value: v,
			},
		}
	}

	return r.Set(*value)
}

func (r eventQueryDeletedAtDateTime) Equals(value DateTime) eventWithPrismaDeletedAtEqualsParams {
	return eventWithPrismaDeletedAtEqualsParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: value,
		},
	}
}

func (r eventQueryDeletedAtDateTime) In(values []DateTime) eventParams {
	f := builder.Field{
		Name:   "deletedAt",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return eventParams{
		data: f,
	}
}

func (r eventQueryDeletedAtDateTime) EqualsOptional(value *DateTime) eventParams {
	return eventParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: value,
		},
	}
}

func (r eventQueryDeletedAtDateTime) IsNull() eventParams {
	var str *string = nil
	return eventParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: str,
		},
	}
}

func (r eventQueryDeletedAtDateTime) Order(direction runtime.Direction) eventParams {
	return eventParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: direction,
		},
	}
}

func (r eventQueryDeletedAtDateTime) Before(value DateTime) eventParams {
	return eventParams{
		data: builder.Field{
			Action: "lt",
			Name:   "deletedAt",
			Value:  value,
		},
	}
}

func (r eventQueryDeletedAtDateTime) After(value DateTime) eventParams {
	return eventParams{
		data: builder.Field{
			Action: "gt",
			Name:   "deletedAt",
			Value:  value,
		},
	}
}

func (r eventQueryDeletedAtDateTime) BeforeEquals(value DateTime) eventParams {
	return eventParams{
		data: builder.Field{
			Action: "lte",
			Name:   "deletedAt",
			Value:  value,
		},
	}
}

func (r eventQueryDeletedAtDateTime) AfterEquals(value DateTime) eventParams {
	return eventParams{
		data: builder.Field{
			Action: "gte",
			Name:   "deletedAt",
			Value:  value,
		},
	}
}

// base struct
type eventQueryUpdatedAtDateTime struct{}

// Set the required value of UpdatedAt
func (r eventQueryUpdatedAtDateTime) Set(value DateTime) eventSetParams {

	return eventSetParams{
		data: builder.Field{
			Name:  "updatedAt",
			Value: value,
		},
	}

}

func (r eventQueryUpdatedAtDateTime) Equals(value DateTime) eventWithPrismaUpdatedAtEqualsParams {
	return eventWithPrismaUpdatedAtEqualsParams{
		data: builder.Field{
			Name:  "updatedAt",
			Value: value,
		},
	}
}

func (r eventQueryUpdatedAtDateTime) In(values []DateTime) eventParams {
	f := builder.Field{
		Name:   "updatedAt",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return eventParams{
		data: f,
	}
}

func (r eventQueryUpdatedAtDateTime) Order(direction runtime.Direction) eventParams {
	return eventParams{
		data: builder.Field{
			Name:  "updatedAt",
			Value: direction,
		},
	}
}

func (r eventQueryUpdatedAtDateTime) Before(value DateTime) eventParams {
	return eventParams{
		data: builder.Field{
			Action: "lt",
			Name:   "updatedAt",
			Value:  value,
		},
	}
}

func (r eventQueryUpdatedAtDateTime) After(value DateTime) eventParams {
	return eventParams{
		data: builder.Field{
			Action: "gt",
			Name:   "updatedAt",
			Value:  value,
		},
	}
}

func (r eventQueryUpdatedAtDateTime) BeforeEquals(value DateTime) eventParams {
	return eventParams{
		data: builder.Field{
			Action: "lte",
			Name:   "updatedAt",
			Value:  value,
		},
	}
}

func (r eventQueryUpdatedAtDateTime) AfterEquals(value DateTime) eventParams {
	return eventParams{
		data: builder.Field{
			Action: "gte",
			Name:   "updatedAt",
			Value:  value,
		},
	}
}

// base struct
type eventQueryStoryStory struct{}

type eventQueryStoryRelations struct{}

// Event -> Story
//
// @relation
// @required
func (eventQueryStoryRelations) Where(
	params ...iStoryParams,
) eventParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return eventParams{
		data: builder.Field{
			Name:   "story",
			Action: "",
			Fields: fields,
		},
	}
}

func (eventQueryStoryRelations) Fetch() eventToStoryFindOne {
	var v eventToStoryFindOne

	v.query.Operation = "query"
	v.query.Method = "story"
	v.query.Outputs = storyOutput

	return v
}

func (r eventQueryStoryRelations) Link(
	params ...iStoryParams,
) eventWithPrismaStorySetParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return eventWithPrismaStorySetParams{
		data: builder.Field{
			Name: "story",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: fields,
				},
			},
		},
	}
}

// base struct
type eventQueryStoryIDInt struct{}

// Set the required value of StoryID
func (r eventQueryStoryIDInt) Set(value int) eventWithPrismaStoryIDSetParams {

	return eventWithPrismaStoryIDSetParams{
		data: builder.Field{
			Name:  "storyId",
			Value: value,
		},
	}

}

func (r eventQueryStoryIDInt) Equals(value int) eventWithPrismaStoryIDEqualsParams {
	return eventWithPrismaStoryIDEqualsParams{
		data: builder.Field{
			Name:  "storyId",
			Value: value,
		},
	}
}

func (r eventQueryStoryIDInt) In(values []int) eventParams {
	f := builder.Field{
		Name:   "storyId",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return eventParams{
		data: f,
	}
}

func (r eventQueryStoryIDInt) Order(direction runtime.Direction) eventParams {
	return eventParams{
		data: builder.Field{
			Name:  "storyId",
			Value: direction,
		},
	}
}

func (r eventQueryStoryIDInt) LT(value int) eventParams {
	return eventParams{
		data: builder.Field{
			Action: "lt",
			Name:   "storyId",
			Value:  value,
		},
	}
}

func (r eventQueryStoryIDInt) GT(value int) eventParams {
	return eventParams{
		data: builder.Field{
			Action: "gt",
			Name:   "storyId",
			Value:  value,
		},
	}
}

func (r eventQueryStoryIDInt) LTE(value int) eventParams {
	return eventParams{
		data: builder.Field{
			Action: "lte",
			Name:   "storyId",
			Value:  value,
		},
	}
}

func (r eventQueryStoryIDInt) GTE(value int) eventParams {
	return eventParams{
		data: builder.Field{
			Action: "gte",
			Name:   "storyId",
			Value:  value,
		},
	}
}

// base struct
type eventQuerySequenceInt struct{}

// Set the required value of Sequence
func (r eventQuerySequenceInt) Set(value int) eventWithPrismaSequenceSetParams {

	return eventWithPrismaSequenceSetParams{
		data: builder.Field{
			Name:  "sequence",
			Value: value,
		},
	}

}

func (r eventQuerySequenceInt) Equals(value int) eventWithPrismaSequenceEqualsParams {
	return eventWithPrismaSequenceEqualsParams{
		data: builder.Field{
			Name:  "sequence",
			Value: value,
		},
	}
}

func (r eventQuerySequenceInt) In(values []int) eventParams {
	f := builder.Field{
		Name:   "sequence",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return eventParams{
		data: f,
	}
}

func (r eventQuerySequenceInt) Order(direction runtime.Direction) eventParams {
	return eventParams{
		data: builder.Field{
			Name:  "sequence",
			Value: direction,
		},
	}
}

func (r eventQuerySequenceInt) LT(value int) eventParams {
	return eventParams{
		data: builder.Field{
			Action: "lt",
			Name:   "sequence",
			Value:  value,
		},
	}
}

func (r eventQuerySequenceInt) GT(value int) eventParams {
	return eventParams{
		data: builder.Field{
			Action: "gt",
			Name:   "sequence",
			Value:  value,
		},
	}
}

func (r eventQuerySequenceInt) LTE(value int) eventParams {
	return eventParams{
		data: builder.Field{
			Action: "lte",
			Name:   "sequence",
			Value:  value,
		},
	}
}

func (r eventQuerySequenceInt) GTE(value int) eventParams {
	return eventParams{
		data: builder.Field{
			Action: "gte",
			Name:   "sequence",
			Value:  value,
		},
	}
}

// base struct
type eventQueryActionAction struct{}

type eventQueryActionRelations struct{}

// Event -> Action
//
// @relation
// @optional
func (eventQueryActionRelations) Some(
	params ...iActionParams,
) eventParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return eventParams{
		data: builder.Field{
			Name:   "Action",
			Action: "some",
			Fields: fields,
		},
	}
}

// Event -> Action
//
// @relation
// @optional
func (eventQueryActionRelations) Every(
	params ...iActionParams,
) eventParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return eventParams{
		data: builder.Field{
			Name:   "Action",
			Action: "every",
			Fields: fields,
		},
	}
}

func (eventQueryActionRelations) Fetch(

	params ...iActionParams,

) eventToActionFindMany {
	var v eventToActionFindMany

	v.query.Operation = "query"
	v.query.Method = "Action"
	v.query.Outputs = actionOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r eventQueryActionRelations) Link(
	params ...iActionParams,
) eventSetParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return eventSetParams{
		data: builder.Field{
			Name: "Action",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: fields,
				},
			},
		},
	}
}

func (r eventQueryActionRelations) Unlink() eventSetParams {
	return eventSetParams{
		data: builder.Field{
			Name: "Action",
			Fields: []builder.Field{
				{
					Name:  "disconnect",
					Value: true,
				},
			},
		},
	}
}

// base struct
type eventQueryMessagesOnEventsMessagesOnEvents struct{}

type eventQueryMessagesOnEventsRelations struct{}

// Event -> MessagesOnEvents
//
// @relation
// @optional
func (eventQueryMessagesOnEventsRelations) Some(
	params ...iMessagesOnEventsParams,
) eventParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return eventParams{
		data: builder.Field{
			Name:   "MessagesOnEvents",
			Action: "some",
			Fields: fields,
		},
	}
}

// Event -> MessagesOnEvents
//
// @relation
// @optional
func (eventQueryMessagesOnEventsRelations) Every(
	params ...iMessagesOnEventsParams,
) eventParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return eventParams{
		data: builder.Field{
			Name:   "MessagesOnEvents",
			Action: "every",
			Fields: fields,
		},
	}
}

func (eventQueryMessagesOnEventsRelations) Fetch(

	params ...iMessagesOnEventsParams,

) eventToMessagesOnEventsFindMany {
	var v eventToMessagesOnEventsFindMany

	v.query.Operation = "query"
	v.query.Method = "MessagesOnEvents"
	v.query.Outputs = messagesOnEventsOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r eventQueryMessagesOnEventsRelations) Link(
	params ...iMessagesOnEventsParams,
) eventSetParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return eventSetParams{
		data: builder.Field{
			Name: "MessagesOnEvents",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: fields,
				},
			},
		},
	}
}

func (r eventQueryMessagesOnEventsRelations) Unlink() eventSetParams {
	return eventSetParams{
		data: builder.Field{
			Name: "MessagesOnEvents",
			Fields: []builder.Field{
				{
					Name:  "disconnect",
					Value: true,
				},
			},
		},
	}
}

// Action acts as a namespaces to access query methods for the Action model
var Action = actionQuery{}

// actionQuery exposes query functions for the action model
type actionQuery struct {
	// ID
	//
	// @required
	ID actionQueryIDInt

	// CreatedAt
	//
	// @required
	CreatedAt actionQueryCreatedAtDateTime

	// DeletedAt
	//
	// @optional
	DeletedAt actionQueryDeletedAtDateTime

	// UpdatedAt
	//
	// @required
	UpdatedAt actionQueryUpdatedAtDateTime

	// Position
	//
	// @required
	Position actionQueryPositionInt

	Event actionQueryEventRelations

	// EventID
	//
	// @required
	EventID actionQueryEventIDInt

	MessagesOnActions actionQueryMessagesOnActionsRelations
}

func (actionQuery) Not(params ...iActionParams) actionParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return actionParams{
		data: builder.Field{
			Name:     "NOT",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (actionQuery) Or(params ...iActionParams) actionParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return actionParams{
		data: builder.Field{
			Name:     "OR",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

// searched for field raidId_avatarId
// type: RaidIdAvatarIdCompoundUniqueInput

// searched for field raidId_avatarId
// type: RaidIdAvatarIdCompoundUniqueInput

// searched for field raidId_raidBossId
// type: RaidIdRaidBossIdCompoundUniqueInput

// searched for field raidId_raidBossId
// type: RaidIdRaidBossIdCompoundUniqueInput

// searched for field raidId_storyId
// type: RaidIdStoryIdCompoundUniqueInput

// searched for field raidId_storyId
// type: RaidIdStoryIdCompoundUniqueInput

// searched for field id
// type: Int

// searched for field storyId_sequence
// type: StoryIdSequenceCompoundUniqueInput

// searched for field id
// type: Int

// searched for field eventId_position
// type: EventIdPositionCompoundUniqueInput

func (actionQuery) EventIDPosition(
	_eventID iActionWithPrismaEventIDEqualsParams,

	_position iActionWithPrismaPositionEqualsParams,
) iActionEqualsParamsUnique {
	var fields []builder.Field

	fields = append(fields, _eventID.field())
	fields = append(fields, _position.field())

	return actionEqualsParamsUnique{
		data: builder.Field{
			Name:   "eventId_position",
			Fields: fields,
		},
	}
}

// searched for field messageId_actionId
// type: MessageIdActionIdCompoundUniqueInput

// searched for field messageId_actionId
// type: MessageIdActionIdCompoundUniqueInput

// searched for field messageId_eventId
// type: MessageIdEventIdCompoundUniqueInput

// searched for field messageId_eventId
// type: MessageIdEventIdCompoundUniqueInput

// base struct
type actionQueryIDInt struct{}

// Set the required value of ID
func (r actionQueryIDInt) Set(value int) actionSetParams {

	return actionSetParams{
		data: builder.Field{
			Name:  "id",
			Value: value,
		},
	}

}

func (r actionQueryIDInt) Equals(value int) actionWithPrismaIDEqualsParamsUnique {
	return actionWithPrismaIDEqualsParamsUnique{
		data: builder.Field{
			Name:  "id",
			Value: value,
		},
	}
}

func (r actionQueryIDInt) In(values []int) actionParamsUnique {
	f := builder.Field{
		Name:   "id",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return actionParamsUnique{
		data: f,
	}
}

func (r actionQueryIDInt) Order(direction runtime.Direction) actionParams {
	return actionParams{
		data: builder.Field{
			Name:  "id",
			Value: direction,
		},
	}
}

func (r actionQueryIDInt) Cursor(cursor string) actionCursorParams {
	return actionCursorParams{
		data: builder.Field{
			Name:  "id",
			Value: cursor,
		},
	}
}

func (r actionQueryIDInt) LT(value int) actionParamsUnique {
	return actionParamsUnique{
		data: builder.Field{
			Action: "lt",
			Name:   "id",
			Value:  value,
		},
	}
}

func (r actionQueryIDInt) GT(value int) actionParamsUnique {
	return actionParamsUnique{
		data: builder.Field{
			Action: "gt",
			Name:   "id",
			Value:  value,
		},
	}
}

func (r actionQueryIDInt) LTE(value int) actionParamsUnique {
	return actionParamsUnique{
		data: builder.Field{
			Action: "lte",
			Name:   "id",
			Value:  value,
		},
	}
}

func (r actionQueryIDInt) GTE(value int) actionParamsUnique {
	return actionParamsUnique{
		data: builder.Field{
			Action: "gte",
			Name:   "id",
			Value:  value,
		},
	}
}

// base struct
type actionQueryCreatedAtDateTime struct{}

// Set the required value of CreatedAt
func (r actionQueryCreatedAtDateTime) Set(value DateTime) actionSetParams {

	return actionSetParams{
		data: builder.Field{
			Name:  "createdAt",
			Value: value,
		},
	}

}

func (r actionQueryCreatedAtDateTime) Equals(value DateTime) actionWithPrismaCreatedAtEqualsParams {
	return actionWithPrismaCreatedAtEqualsParams{
		data: builder.Field{
			Name:  "createdAt",
			Value: value,
		},
	}
}

func (r actionQueryCreatedAtDateTime) In(values []DateTime) actionParams {
	f := builder.Field{
		Name:   "createdAt",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return actionParams{
		data: f,
	}
}

func (r actionQueryCreatedAtDateTime) Order(direction runtime.Direction) actionParams {
	return actionParams{
		data: builder.Field{
			Name:  "createdAt",
			Value: direction,
		},
	}
}

func (r actionQueryCreatedAtDateTime) Before(value DateTime) actionParams {
	return actionParams{
		data: builder.Field{
			Action: "lt",
			Name:   "createdAt",
			Value:  value,
		},
	}
}

func (r actionQueryCreatedAtDateTime) After(value DateTime) actionParams {
	return actionParams{
		data: builder.Field{
			Action: "gt",
			Name:   "createdAt",
			Value:  value,
		},
	}
}

func (r actionQueryCreatedAtDateTime) BeforeEquals(value DateTime) actionParams {
	return actionParams{
		data: builder.Field{
			Action: "lte",
			Name:   "createdAt",
			Value:  value,
		},
	}
}

func (r actionQueryCreatedAtDateTime) AfterEquals(value DateTime) actionParams {
	return actionParams{
		data: builder.Field{
			Action: "gte",
			Name:   "createdAt",
			Value:  value,
		},
	}
}

// base struct
type actionQueryDeletedAtDateTime struct{}

// Set the optional value of DeletedAt
func (r actionQueryDeletedAtDateTime) Set(value DateTime) actionSetParams {

	return actionSetParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: value,
		},
	}

}

// Set the optional value of DeletedAt dynamically
func (r actionQueryDeletedAtDateTime) SetOptional(value *DateTime) actionSetParams {
	if value == nil {

		var v *DateTime
		return actionSetParams{
			data: builder.Field{
				Name:  "deletedAt",
				Value: v,
			},
		}
	}

	return r.Set(*value)
}

func (r actionQueryDeletedAtDateTime) Equals(value DateTime) actionWithPrismaDeletedAtEqualsParams {
	return actionWithPrismaDeletedAtEqualsParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: value,
		},
	}
}

func (r actionQueryDeletedAtDateTime) In(values []DateTime) actionParams {
	f := builder.Field{
		Name:   "deletedAt",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return actionParams{
		data: f,
	}
}

func (r actionQueryDeletedAtDateTime) EqualsOptional(value *DateTime) actionParams {
	return actionParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: value,
		},
	}
}

func (r actionQueryDeletedAtDateTime) IsNull() actionParams {
	var str *string = nil
	return actionParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: str,
		},
	}
}

func (r actionQueryDeletedAtDateTime) Order(direction runtime.Direction) actionParams {
	return actionParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: direction,
		},
	}
}

func (r actionQueryDeletedAtDateTime) Before(value DateTime) actionParams {
	return actionParams{
		data: builder.Field{
			Action: "lt",
			Name:   "deletedAt",
			Value:  value,
		},
	}
}

func (r actionQueryDeletedAtDateTime) After(value DateTime) actionParams {
	return actionParams{
		data: builder.Field{
			Action: "gt",
			Name:   "deletedAt",
			Value:  value,
		},
	}
}

func (r actionQueryDeletedAtDateTime) BeforeEquals(value DateTime) actionParams {
	return actionParams{
		data: builder.Field{
			Action: "lte",
			Name:   "deletedAt",
			Value:  value,
		},
	}
}

func (r actionQueryDeletedAtDateTime) AfterEquals(value DateTime) actionParams {
	return actionParams{
		data: builder.Field{
			Action: "gte",
			Name:   "deletedAt",
			Value:  value,
		},
	}
}

// base struct
type actionQueryUpdatedAtDateTime struct{}

// Set the required value of UpdatedAt
func (r actionQueryUpdatedAtDateTime) Set(value DateTime) actionSetParams {

	return actionSetParams{
		data: builder.Field{
			Name:  "updatedAt",
			Value: value,
		},
	}

}

func (r actionQueryUpdatedAtDateTime) Equals(value DateTime) actionWithPrismaUpdatedAtEqualsParams {
	return actionWithPrismaUpdatedAtEqualsParams{
		data: builder.Field{
			Name:  "updatedAt",
			Value: value,
		},
	}
}

func (r actionQueryUpdatedAtDateTime) In(values []DateTime) actionParams {
	f := builder.Field{
		Name:   "updatedAt",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return actionParams{
		data: f,
	}
}

func (r actionQueryUpdatedAtDateTime) Order(direction runtime.Direction) actionParams {
	return actionParams{
		data: builder.Field{
			Name:  "updatedAt",
			Value: direction,
		},
	}
}

func (r actionQueryUpdatedAtDateTime) Before(value DateTime) actionParams {
	return actionParams{
		data: builder.Field{
			Action: "lt",
			Name:   "updatedAt",
			Value:  value,
		},
	}
}

func (r actionQueryUpdatedAtDateTime) After(value DateTime) actionParams {
	return actionParams{
		data: builder.Field{
			Action: "gt",
			Name:   "updatedAt",
			Value:  value,
		},
	}
}

func (r actionQueryUpdatedAtDateTime) BeforeEquals(value DateTime) actionParams {
	return actionParams{
		data: builder.Field{
			Action: "lte",
			Name:   "updatedAt",
			Value:  value,
		},
	}
}

func (r actionQueryUpdatedAtDateTime) AfterEquals(value DateTime) actionParams {
	return actionParams{
		data: builder.Field{
			Action: "gte",
			Name:   "updatedAt",
			Value:  value,
		},
	}
}

// base struct
type actionQueryPositionInt struct{}

// Set the required value of Position
func (r actionQueryPositionInt) Set(value int) actionWithPrismaPositionSetParams {

	return actionWithPrismaPositionSetParams{
		data: builder.Field{
			Name:  "position",
			Value: value,
		},
	}

}

func (r actionQueryPositionInt) Equals(value int) actionWithPrismaPositionEqualsParams {
	return actionWithPrismaPositionEqualsParams{
		data: builder.Field{
			Name:  "position",
			Value: value,
		},
	}
}

func (r actionQueryPositionInt) In(values []int) actionParams {
	f := builder.Field{
		Name:   "position",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return actionParams{
		data: f,
	}
}

func (r actionQueryPositionInt) Order(direction runtime.Direction) actionParams {
	return actionParams{
		data: builder.Field{
			Name:  "position",
			Value: direction,
		},
	}
}

func (r actionQueryPositionInt) LT(value int) actionParams {
	return actionParams{
		data: builder.Field{
			Action: "lt",
			Name:   "position",
			Value:  value,
		},
	}
}

func (r actionQueryPositionInt) GT(value int) actionParams {
	return actionParams{
		data: builder.Field{
			Action: "gt",
			Name:   "position",
			Value:  value,
		},
	}
}

func (r actionQueryPositionInt) LTE(value int) actionParams {
	return actionParams{
		data: builder.Field{
			Action: "lte",
			Name:   "position",
			Value:  value,
		},
	}
}

func (r actionQueryPositionInt) GTE(value int) actionParams {
	return actionParams{
		data: builder.Field{
			Action: "gte",
			Name:   "position",
			Value:  value,
		},
	}
}

// base struct
type actionQueryEventEvent struct{}

type actionQueryEventRelations struct{}

// Action -> Event
//
// @relation
// @required
func (actionQueryEventRelations) Where(
	params ...iEventParams,
) actionParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return actionParams{
		data: builder.Field{
			Name:   "event",
			Action: "",
			Fields: fields,
		},
	}
}

func (actionQueryEventRelations) Fetch() actionToEventFindOne {
	var v actionToEventFindOne

	v.query.Operation = "query"
	v.query.Method = "event"
	v.query.Outputs = eventOutput

	return v
}

func (r actionQueryEventRelations) Link(
	params ...iEventParams,
) actionWithPrismaEventSetParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return actionWithPrismaEventSetParams{
		data: builder.Field{
			Name: "event",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: fields,
				},
			},
		},
	}
}

// base struct
type actionQueryEventIDInt struct{}

// Set the required value of EventID
func (r actionQueryEventIDInt) Set(value int) actionWithPrismaEventIDSetParams {

	return actionWithPrismaEventIDSetParams{
		data: builder.Field{
			Name:  "eventId",
			Value: value,
		},
	}

}

func (r actionQueryEventIDInt) Equals(value int) actionWithPrismaEventIDEqualsParams {
	return actionWithPrismaEventIDEqualsParams{
		data: builder.Field{
			Name:  "eventId",
			Value: value,
		},
	}
}

func (r actionQueryEventIDInt) In(values []int) actionParams {
	f := builder.Field{
		Name:   "eventId",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return actionParams{
		data: f,
	}
}

func (r actionQueryEventIDInt) Order(direction runtime.Direction) actionParams {
	return actionParams{
		data: builder.Field{
			Name:  "eventId",
			Value: direction,
		},
	}
}

func (r actionQueryEventIDInt) LT(value int) actionParams {
	return actionParams{
		data: builder.Field{
			Action: "lt",
			Name:   "eventId",
			Value:  value,
		},
	}
}

func (r actionQueryEventIDInt) GT(value int) actionParams {
	return actionParams{
		data: builder.Field{
			Action: "gt",
			Name:   "eventId",
			Value:  value,
		},
	}
}

func (r actionQueryEventIDInt) LTE(value int) actionParams {
	return actionParams{
		data: builder.Field{
			Action: "lte",
			Name:   "eventId",
			Value:  value,
		},
	}
}

func (r actionQueryEventIDInt) GTE(value int) actionParams {
	return actionParams{
		data: builder.Field{
			Action: "gte",
			Name:   "eventId",
			Value:  value,
		},
	}
}

// base struct
type actionQueryMessagesOnActionsMessagesOnActions struct{}

type actionQueryMessagesOnActionsRelations struct{}

// Action -> MessagesOnActions
//
// @relation
// @optional
func (actionQueryMessagesOnActionsRelations) Some(
	params ...iMessagesOnActionsParams,
) actionParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return actionParams{
		data: builder.Field{
			Name:   "MessagesOnActions",
			Action: "some",
			Fields: fields,
		},
	}
}

// Action -> MessagesOnActions
//
// @relation
// @optional
func (actionQueryMessagesOnActionsRelations) Every(
	params ...iMessagesOnActionsParams,
) actionParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return actionParams{
		data: builder.Field{
			Name:   "MessagesOnActions",
			Action: "every",
			Fields: fields,
		},
	}
}

func (actionQueryMessagesOnActionsRelations) Fetch(

	params ...iMessagesOnActionsParams,

) actionToMessagesOnActionsFindMany {
	var v actionToMessagesOnActionsFindMany

	v.query.Operation = "query"
	v.query.Method = "MessagesOnActions"
	v.query.Outputs = messagesOnActionsOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r actionQueryMessagesOnActionsRelations) Link(
	params ...iMessagesOnActionsParams,
) actionSetParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return actionSetParams{
		data: builder.Field{
			Name: "MessagesOnActions",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: fields,
				},
			},
		},
	}
}

func (r actionQueryMessagesOnActionsRelations) Unlink() actionSetParams {
	return actionSetParams{
		data: builder.Field{
			Name: "MessagesOnActions",
			Fields: []builder.Field{
				{
					Name:  "disconnect",
					Value: true,
				},
			},
		},
	}
}

// Message acts as a namespaces to access query methods for the Message model
var Message = messageQuery{}

// messageQuery exposes query functions for the message model
type messageQuery struct {
	// ID
	//
	// @required
	ID messageQueryIDInt

	// CreatedAt
	//
	// @required
	CreatedAt messageQueryCreatedAtDateTime

	// DeletedAt
	//
	// @optional
	DeletedAt messageQueryDeletedAtDateTime

	// UpdatedAt
	//
	// @required
	UpdatedAt messageQueryUpdatedAtDateTime

	// Content
	//
	// @required
	Content messageQueryContentString

	// Type
	//
	// @required
	Type messageQueryTypeString

	MessagesOnActions messageQueryMessagesOnActionsRelations

	MessagesOnEvents messageQueryMessagesOnEventsRelations
}

func (messageQuery) Not(params ...iMessageParams) messageParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return messageParams{
		data: builder.Field{
			Name:     "NOT",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (messageQuery) Or(params ...iMessageParams) messageParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return messageParams{
		data: builder.Field{
			Name:     "OR",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

// searched for field raidId_avatarId
// type: RaidIdAvatarIdCompoundUniqueInput

// searched for field raidId_avatarId
// type: RaidIdAvatarIdCompoundUniqueInput

// searched for field raidId_raidBossId
// type: RaidIdRaidBossIdCompoundUniqueInput

// searched for field raidId_raidBossId
// type: RaidIdRaidBossIdCompoundUniqueInput

// searched for field raidId_storyId
// type: RaidIdStoryIdCompoundUniqueInput

// searched for field raidId_storyId
// type: RaidIdStoryIdCompoundUniqueInput

// searched for field id
// type: Int

// searched for field storyId_sequence
// type: StoryIdSequenceCompoundUniqueInput

// searched for field id
// type: Int

// searched for field eventId_position
// type: EventIdPositionCompoundUniqueInput

// searched for field messageId_actionId
// type: MessageIdActionIdCompoundUniqueInput

// searched for field messageId_actionId
// type: MessageIdActionIdCompoundUniqueInput

// searched for field messageId_eventId
// type: MessageIdEventIdCompoundUniqueInput

// searched for field messageId_eventId
// type: MessageIdEventIdCompoundUniqueInput

// base struct
type messageQueryIDInt struct{}

// Set the required value of ID
func (r messageQueryIDInt) Set(value int) messageSetParams {

	return messageSetParams{
		data: builder.Field{
			Name:  "id",
			Value: value,
		},
	}

}

func (r messageQueryIDInt) Equals(value int) messageWithPrismaIDEqualsParamsUnique {
	return messageWithPrismaIDEqualsParamsUnique{
		data: builder.Field{
			Name:  "id",
			Value: value,
		},
	}
}

func (r messageQueryIDInt) In(values []int) messageParamsUnique {
	f := builder.Field{
		Name:   "id",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return messageParamsUnique{
		data: f,
	}
}

func (r messageQueryIDInt) Order(direction runtime.Direction) messageParams {
	return messageParams{
		data: builder.Field{
			Name:  "id",
			Value: direction,
		},
	}
}

func (r messageQueryIDInt) Cursor(cursor string) messageCursorParams {
	return messageCursorParams{
		data: builder.Field{
			Name:  "id",
			Value: cursor,
		},
	}
}

func (r messageQueryIDInt) LT(value int) messageParamsUnique {
	return messageParamsUnique{
		data: builder.Field{
			Action: "lt",
			Name:   "id",
			Value:  value,
		},
	}
}

func (r messageQueryIDInt) GT(value int) messageParamsUnique {
	return messageParamsUnique{
		data: builder.Field{
			Action: "gt",
			Name:   "id",
			Value:  value,
		},
	}
}

func (r messageQueryIDInt) LTE(value int) messageParamsUnique {
	return messageParamsUnique{
		data: builder.Field{
			Action: "lte",
			Name:   "id",
			Value:  value,
		},
	}
}

func (r messageQueryIDInt) GTE(value int) messageParamsUnique {
	return messageParamsUnique{
		data: builder.Field{
			Action: "gte",
			Name:   "id",
			Value:  value,
		},
	}
}

// base struct
type messageQueryCreatedAtDateTime struct{}

// Set the required value of CreatedAt
func (r messageQueryCreatedAtDateTime) Set(value DateTime) messageSetParams {

	return messageSetParams{
		data: builder.Field{
			Name:  "createdAt",
			Value: value,
		},
	}

}

func (r messageQueryCreatedAtDateTime) Equals(value DateTime) messageWithPrismaCreatedAtEqualsParams {
	return messageWithPrismaCreatedAtEqualsParams{
		data: builder.Field{
			Name:  "createdAt",
			Value: value,
		},
	}
}

func (r messageQueryCreatedAtDateTime) In(values []DateTime) messageParams {
	f := builder.Field{
		Name:   "createdAt",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return messageParams{
		data: f,
	}
}

func (r messageQueryCreatedAtDateTime) Order(direction runtime.Direction) messageParams {
	return messageParams{
		data: builder.Field{
			Name:  "createdAt",
			Value: direction,
		},
	}
}

func (r messageQueryCreatedAtDateTime) Before(value DateTime) messageParams {
	return messageParams{
		data: builder.Field{
			Action: "lt",
			Name:   "createdAt",
			Value:  value,
		},
	}
}

func (r messageQueryCreatedAtDateTime) After(value DateTime) messageParams {
	return messageParams{
		data: builder.Field{
			Action: "gt",
			Name:   "createdAt",
			Value:  value,
		},
	}
}

func (r messageQueryCreatedAtDateTime) BeforeEquals(value DateTime) messageParams {
	return messageParams{
		data: builder.Field{
			Action: "lte",
			Name:   "createdAt",
			Value:  value,
		},
	}
}

func (r messageQueryCreatedAtDateTime) AfterEquals(value DateTime) messageParams {
	return messageParams{
		data: builder.Field{
			Action: "gte",
			Name:   "createdAt",
			Value:  value,
		},
	}
}

// base struct
type messageQueryDeletedAtDateTime struct{}

// Set the optional value of DeletedAt
func (r messageQueryDeletedAtDateTime) Set(value DateTime) messageSetParams {

	return messageSetParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: value,
		},
	}

}

// Set the optional value of DeletedAt dynamically
func (r messageQueryDeletedAtDateTime) SetOptional(value *DateTime) messageSetParams {
	if value == nil {

		var v *DateTime
		return messageSetParams{
			data: builder.Field{
				Name:  "deletedAt",
				Value: v,
			},
		}
	}

	return r.Set(*value)
}

func (r messageQueryDeletedAtDateTime) Equals(value DateTime) messageWithPrismaDeletedAtEqualsParams {
	return messageWithPrismaDeletedAtEqualsParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: value,
		},
	}
}

func (r messageQueryDeletedAtDateTime) In(values []DateTime) messageParams {
	f := builder.Field{
		Name:   "deletedAt",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return messageParams{
		data: f,
	}
}

func (r messageQueryDeletedAtDateTime) EqualsOptional(value *DateTime) messageParams {
	return messageParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: value,
		},
	}
}

func (r messageQueryDeletedAtDateTime) IsNull() messageParams {
	var str *string = nil
	return messageParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: str,
		},
	}
}

func (r messageQueryDeletedAtDateTime) Order(direction runtime.Direction) messageParams {
	return messageParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: direction,
		},
	}
}

func (r messageQueryDeletedAtDateTime) Before(value DateTime) messageParams {
	return messageParams{
		data: builder.Field{
			Action: "lt",
			Name:   "deletedAt",
			Value:  value,
		},
	}
}

func (r messageQueryDeletedAtDateTime) After(value DateTime) messageParams {
	return messageParams{
		data: builder.Field{
			Action: "gt",
			Name:   "deletedAt",
			Value:  value,
		},
	}
}

func (r messageQueryDeletedAtDateTime) BeforeEquals(value DateTime) messageParams {
	return messageParams{
		data: builder.Field{
			Action: "lte",
			Name:   "deletedAt",
			Value:  value,
		},
	}
}

func (r messageQueryDeletedAtDateTime) AfterEquals(value DateTime) messageParams {
	return messageParams{
		data: builder.Field{
			Action: "gte",
			Name:   "deletedAt",
			Value:  value,
		},
	}
}

// base struct
type messageQueryUpdatedAtDateTime struct{}

// Set the required value of UpdatedAt
func (r messageQueryUpdatedAtDateTime) Set(value DateTime) messageSetParams {

	return messageSetParams{
		data: builder.Field{
			Name:  "updatedAt",
			Value: value,
		},
	}

}

func (r messageQueryUpdatedAtDateTime) Equals(value DateTime) messageWithPrismaUpdatedAtEqualsParams {
	return messageWithPrismaUpdatedAtEqualsParams{
		data: builder.Field{
			Name:  "updatedAt",
			Value: value,
		},
	}
}

func (r messageQueryUpdatedAtDateTime) In(values []DateTime) messageParams {
	f := builder.Field{
		Name:   "updatedAt",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return messageParams{
		data: f,
	}
}

func (r messageQueryUpdatedAtDateTime) Order(direction runtime.Direction) messageParams {
	return messageParams{
		data: builder.Field{
			Name:  "updatedAt",
			Value: direction,
		},
	}
}

func (r messageQueryUpdatedAtDateTime) Before(value DateTime) messageParams {
	return messageParams{
		data: builder.Field{
			Action: "lt",
			Name:   "updatedAt",
			Value:  value,
		},
	}
}

func (r messageQueryUpdatedAtDateTime) After(value DateTime) messageParams {
	return messageParams{
		data: builder.Field{
			Action: "gt",
			Name:   "updatedAt",
			Value:  value,
		},
	}
}

func (r messageQueryUpdatedAtDateTime) BeforeEquals(value DateTime) messageParams {
	return messageParams{
		data: builder.Field{
			Action: "lte",
			Name:   "updatedAt",
			Value:  value,
		},
	}
}

func (r messageQueryUpdatedAtDateTime) AfterEquals(value DateTime) messageParams {
	return messageParams{
		data: builder.Field{
			Action: "gte",
			Name:   "updatedAt",
			Value:  value,
		},
	}
}

// base struct
type messageQueryContentString struct{}

// Set the required value of Content
func (r messageQueryContentString) Set(value string) messageWithPrismaContentSetParams {

	return messageWithPrismaContentSetParams{
		data: builder.Field{
			Name:  "content",
			Value: value,
		},
	}

}

func (r messageQueryContentString) Equals(value string) messageWithPrismaContentEqualsParams {
	return messageWithPrismaContentEqualsParams{
		data: builder.Field{
			Name:  "content",
			Value: value,
		},
	}
}

func (r messageQueryContentString) In(values []string) messageParams {
	f := builder.Field{
		Name:   "content",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return messageParams{
		data: f,
	}
}

func (r messageQueryContentString) Order(direction runtime.Direction) messageParams {
	return messageParams{
		data: builder.Field{
			Name:  "content",
			Value: direction,
		},
	}
}

func (r messageQueryContentString) Contains(value string) messageParams {
	return messageParams{
		data: builder.Field{
			Action: "contains",
			Name:   "content",
			Value:  value,
		},
	}
}

func (r messageQueryContentString) HasPrefix(value string) messageParams {
	return messageParams{
		data: builder.Field{
			Action: "starts_with",
			Name:   "content",
			Value:  value,
		},
	}
}

func (r messageQueryContentString) HasSuffix(value string) messageParams {
	return messageParams{
		data: builder.Field{
			Action: "ends_with",
			Name:   "content",
			Value:  value,
		},
	}
}

// base struct
type messageQueryTypeString struct{}

// Set the required value of Type
func (r messageQueryTypeString) Set(value string) messageWithPrismaTypeSetParams {

	return messageWithPrismaTypeSetParams{
		data: builder.Field{
			Name:  "type",
			Value: value,
		},
	}

}

func (r messageQueryTypeString) Equals(value string) messageWithPrismaTypeEqualsParams {
	return messageWithPrismaTypeEqualsParams{
		data: builder.Field{
			Name:  "type",
			Value: value,
		},
	}
}

func (r messageQueryTypeString) In(values []string) messageParams {
	f := builder.Field{
		Name:   "type",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return messageParams{
		data: f,
	}
}

func (r messageQueryTypeString) Order(direction runtime.Direction) messageParams {
	return messageParams{
		data: builder.Field{
			Name:  "type",
			Value: direction,
		},
	}
}

func (r messageQueryTypeString) Contains(value string) messageParams {
	return messageParams{
		data: builder.Field{
			Action: "contains",
			Name:   "type",
			Value:  value,
		},
	}
}

func (r messageQueryTypeString) HasPrefix(value string) messageParams {
	return messageParams{
		data: builder.Field{
			Action: "starts_with",
			Name:   "type",
			Value:  value,
		},
	}
}

func (r messageQueryTypeString) HasSuffix(value string) messageParams {
	return messageParams{
		data: builder.Field{
			Action: "ends_with",
			Name:   "type",
			Value:  value,
		},
	}
}

// base struct
type messageQueryMessagesOnActionsMessagesOnActions struct{}

type messageQueryMessagesOnActionsRelations struct{}

// Message -> MessagesOnActions
//
// @relation
// @optional
func (messageQueryMessagesOnActionsRelations) Some(
	params ...iMessagesOnActionsParams,
) messageParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return messageParams{
		data: builder.Field{
			Name:   "MessagesOnActions",
			Action: "some",
			Fields: fields,
		},
	}
}

// Message -> MessagesOnActions
//
// @relation
// @optional
func (messageQueryMessagesOnActionsRelations) Every(
	params ...iMessagesOnActionsParams,
) messageParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return messageParams{
		data: builder.Field{
			Name:   "MessagesOnActions",
			Action: "every",
			Fields: fields,
		},
	}
}

func (messageQueryMessagesOnActionsRelations) Fetch(

	params ...iMessagesOnActionsParams,

) messageToMessagesOnActionsFindMany {
	var v messageToMessagesOnActionsFindMany

	v.query.Operation = "query"
	v.query.Method = "MessagesOnActions"
	v.query.Outputs = messagesOnActionsOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r messageQueryMessagesOnActionsRelations) Link(
	params ...iMessagesOnActionsParams,
) messageSetParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return messageSetParams{
		data: builder.Field{
			Name: "MessagesOnActions",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: fields,
				},
			},
		},
	}
}

func (r messageQueryMessagesOnActionsRelations) Unlink() messageSetParams {
	return messageSetParams{
		data: builder.Field{
			Name: "MessagesOnActions",
			Fields: []builder.Field{
				{
					Name:  "disconnect",
					Value: true,
				},
			},
		},
	}
}

// base struct
type messageQueryMessagesOnEventsMessagesOnEvents struct{}

type messageQueryMessagesOnEventsRelations struct{}

// Message -> MessagesOnEvents
//
// @relation
// @optional
func (messageQueryMessagesOnEventsRelations) Some(
	params ...iMessagesOnEventsParams,
) messageParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return messageParams{
		data: builder.Field{
			Name:   "MessagesOnEvents",
			Action: "some",
			Fields: fields,
		},
	}
}

// Message -> MessagesOnEvents
//
// @relation
// @optional
func (messageQueryMessagesOnEventsRelations) Every(
	params ...iMessagesOnEventsParams,
) messageParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return messageParams{
		data: builder.Field{
			Name:   "MessagesOnEvents",
			Action: "every",
			Fields: fields,
		},
	}
}

func (messageQueryMessagesOnEventsRelations) Fetch(

	params ...iMessagesOnEventsParams,

) messageToMessagesOnEventsFindMany {
	var v messageToMessagesOnEventsFindMany

	v.query.Operation = "query"
	v.query.Method = "MessagesOnEvents"
	v.query.Outputs = messagesOnEventsOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r messageQueryMessagesOnEventsRelations) Link(
	params ...iMessagesOnEventsParams,
) messageSetParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return messageSetParams{
		data: builder.Field{
			Name: "MessagesOnEvents",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: fields,
				},
			},
		},
	}
}

func (r messageQueryMessagesOnEventsRelations) Unlink() messageSetParams {
	return messageSetParams{
		data: builder.Field{
			Name: "MessagesOnEvents",
			Fields: []builder.Field{
				{
					Name:  "disconnect",
					Value: true,
				},
			},
		},
	}
}

// MessagesOnActions acts as a namespaces to access query methods for the MessagesOnActions model
var MessagesOnActions = messagesOnActionsQuery{}

// messagesOnActionsQuery exposes query functions for the messagesOnActions model
type messagesOnActionsQuery struct {
	// CreatedAt
	//
	// @required
	CreatedAt messagesOnActionsQueryCreatedAtDateTime

	// DeletedAt
	//
	// @optional
	DeletedAt messagesOnActionsQueryDeletedAtDateTime

	// UpdatedAt
	//
	// @required
	UpdatedAt messagesOnActionsQueryUpdatedAtDateTime

	Message messagesOnActionsQueryMessageRelations

	// MessageID
	//
	// @required
	MessageID messagesOnActionsQueryMessageIDInt

	Action messagesOnActionsQueryActionRelations

	// ActionID
	//
	// @required
	ActionID messagesOnActionsQueryActionIDInt
}

func (messagesOnActionsQuery) Not(params ...iMessagesOnActionsParams) messagesOnActionsParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return messagesOnActionsParams{
		data: builder.Field{
			Name:     "NOT",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (messagesOnActionsQuery) Or(params ...iMessagesOnActionsParams) messagesOnActionsParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return messagesOnActionsParams{
		data: builder.Field{
			Name:     "OR",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

// searched for field raidId_avatarId
// type: RaidIdAvatarIdCompoundUniqueInput

// searched for field raidId_avatarId
// type: RaidIdAvatarIdCompoundUniqueInput

// searched for field raidId_raidBossId
// type: RaidIdRaidBossIdCompoundUniqueInput

// searched for field raidId_raidBossId
// type: RaidIdRaidBossIdCompoundUniqueInput

// searched for field raidId_storyId
// type: RaidIdStoryIdCompoundUniqueInput

// searched for field raidId_storyId
// type: RaidIdStoryIdCompoundUniqueInput

// searched for field id
// type: Int

// searched for field storyId_sequence
// type: StoryIdSequenceCompoundUniqueInput

// searched for field id
// type: Int

// searched for field eventId_position
// type: EventIdPositionCompoundUniqueInput

// searched for field messageId_actionId
// type: MessageIdActionIdCompoundUniqueInput

func (messagesOnActionsQuery) MessageIDActionID(
	_messageID iMessagesOnActionsWithPrismaMessageIDEqualsParams,

	_actionID iMessagesOnActionsWithPrismaActionIDEqualsParams,
) iMessagesOnActionsEqualsParamsUnique {
	var fields []builder.Field

	fields = append(fields, _messageID.field())
	fields = append(fields, _actionID.field())

	return messagesOnActionsEqualsParamsUnique{
		data: builder.Field{
			Name:   "messageId_actionId",
			Fields: fields,
		},
	}
}

// searched for field messageId_actionId
// type: MessageIdActionIdCompoundUniqueInput

func (messagesOnActionsQuery) MessageIDActionID(
	_messageID iMessagesOnActionsWithPrismaMessageIDEqualsParams,

	_actionID iMessagesOnActionsWithPrismaActionIDEqualsParams,
) iMessagesOnActionsEqualsParamsUnique {
	var fields []builder.Field

	fields = append(fields, _messageID.field())
	fields = append(fields, _actionID.field())

	return messagesOnActionsEqualsParamsUnique{
		data: builder.Field{
			Name:   "messageId_actionId",
			Fields: fields,
		},
	}
}

// searched for field messageId_eventId
// type: MessageIdEventIdCompoundUniqueInput

// searched for field messageId_eventId
// type: MessageIdEventIdCompoundUniqueInput

// base struct
type messagesOnActionsQueryCreatedAtDateTime struct{}

// Set the required value of CreatedAt
func (r messagesOnActionsQueryCreatedAtDateTime) Set(value DateTime) messagesOnActionsSetParams {

	return messagesOnActionsSetParams{
		data: builder.Field{
			Name:  "createdAt",
			Value: value,
		},
	}

}

func (r messagesOnActionsQueryCreatedAtDateTime) Equals(value DateTime) messagesOnActionsWithPrismaCreatedAtEqualsParams {
	return messagesOnActionsWithPrismaCreatedAtEqualsParams{
		data: builder.Field{
			Name:  "createdAt",
			Value: value,
		},
	}
}

func (r messagesOnActionsQueryCreatedAtDateTime) In(values []DateTime) messagesOnActionsParams {
	f := builder.Field{
		Name:   "createdAt",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return messagesOnActionsParams{
		data: f,
	}
}

func (r messagesOnActionsQueryCreatedAtDateTime) Order(direction runtime.Direction) messagesOnActionsParams {
	return messagesOnActionsParams{
		data: builder.Field{
			Name:  "createdAt",
			Value: direction,
		},
	}
}

func (r messagesOnActionsQueryCreatedAtDateTime) Before(value DateTime) messagesOnActionsParams {
	return messagesOnActionsParams{
		data: builder.Field{
			Action: "lt",
			Name:   "createdAt",
			Value:  value,
		},
	}
}

func (r messagesOnActionsQueryCreatedAtDateTime) After(value DateTime) messagesOnActionsParams {
	return messagesOnActionsParams{
		data: builder.Field{
			Action: "gt",
			Name:   "createdAt",
			Value:  value,
		},
	}
}

func (r messagesOnActionsQueryCreatedAtDateTime) BeforeEquals(value DateTime) messagesOnActionsParams {
	return messagesOnActionsParams{
		data: builder.Field{
			Action: "lte",
			Name:   "createdAt",
			Value:  value,
		},
	}
}

func (r messagesOnActionsQueryCreatedAtDateTime) AfterEquals(value DateTime) messagesOnActionsParams {
	return messagesOnActionsParams{
		data: builder.Field{
			Action: "gte",
			Name:   "createdAt",
			Value:  value,
		},
	}
}

// base struct
type messagesOnActionsQueryDeletedAtDateTime struct{}

// Set the optional value of DeletedAt
func (r messagesOnActionsQueryDeletedAtDateTime) Set(value DateTime) messagesOnActionsSetParams {

	return messagesOnActionsSetParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: value,
		},
	}

}

// Set the optional value of DeletedAt dynamically
func (r messagesOnActionsQueryDeletedAtDateTime) SetOptional(value *DateTime) messagesOnActionsSetParams {
	if value == nil {

		var v *DateTime
		return messagesOnActionsSetParams{
			data: builder.Field{
				Name:  "deletedAt",
				Value: v,
			},
		}
	}

	return r.Set(*value)
}

func (r messagesOnActionsQueryDeletedAtDateTime) Equals(value DateTime) messagesOnActionsWithPrismaDeletedAtEqualsParams {
	return messagesOnActionsWithPrismaDeletedAtEqualsParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: value,
		},
	}
}

func (r messagesOnActionsQueryDeletedAtDateTime) In(values []DateTime) messagesOnActionsParams {
	f := builder.Field{
		Name:   "deletedAt",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return messagesOnActionsParams{
		data: f,
	}
}

func (r messagesOnActionsQueryDeletedAtDateTime) EqualsOptional(value *DateTime) messagesOnActionsParams {
	return messagesOnActionsParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: value,
		},
	}
}

func (r messagesOnActionsQueryDeletedAtDateTime) IsNull() messagesOnActionsParams {
	var str *string = nil
	return messagesOnActionsParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: str,
		},
	}
}

func (r messagesOnActionsQueryDeletedAtDateTime) Order(direction runtime.Direction) messagesOnActionsParams {
	return messagesOnActionsParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: direction,
		},
	}
}

func (r messagesOnActionsQueryDeletedAtDateTime) Before(value DateTime) messagesOnActionsParams {
	return messagesOnActionsParams{
		data: builder.Field{
			Action: "lt",
			Name:   "deletedAt",
			Value:  value,
		},
	}
}

func (r messagesOnActionsQueryDeletedAtDateTime) After(value DateTime) messagesOnActionsParams {
	return messagesOnActionsParams{
		data: builder.Field{
			Action: "gt",
			Name:   "deletedAt",
			Value:  value,
		},
	}
}

func (r messagesOnActionsQueryDeletedAtDateTime) BeforeEquals(value DateTime) messagesOnActionsParams {
	return messagesOnActionsParams{
		data: builder.Field{
			Action: "lte",
			Name:   "deletedAt",
			Value:  value,
		},
	}
}

func (r messagesOnActionsQueryDeletedAtDateTime) AfterEquals(value DateTime) messagesOnActionsParams {
	return messagesOnActionsParams{
		data: builder.Field{
			Action: "gte",
			Name:   "deletedAt",
			Value:  value,
		},
	}
}

// base struct
type messagesOnActionsQueryUpdatedAtDateTime struct{}

// Set the required value of UpdatedAt
func (r messagesOnActionsQueryUpdatedAtDateTime) Set(value DateTime) messagesOnActionsSetParams {

	return messagesOnActionsSetParams{
		data: builder.Field{
			Name:  "updatedAt",
			Value: value,
		},
	}

}

func (r messagesOnActionsQueryUpdatedAtDateTime) Equals(value DateTime) messagesOnActionsWithPrismaUpdatedAtEqualsParams {
	return messagesOnActionsWithPrismaUpdatedAtEqualsParams{
		data: builder.Field{
			Name:  "updatedAt",
			Value: value,
		},
	}
}

func (r messagesOnActionsQueryUpdatedAtDateTime) In(values []DateTime) messagesOnActionsParams {
	f := builder.Field{
		Name:   "updatedAt",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return messagesOnActionsParams{
		data: f,
	}
}

func (r messagesOnActionsQueryUpdatedAtDateTime) Order(direction runtime.Direction) messagesOnActionsParams {
	return messagesOnActionsParams{
		data: builder.Field{
			Name:  "updatedAt",
			Value: direction,
		},
	}
}

func (r messagesOnActionsQueryUpdatedAtDateTime) Before(value DateTime) messagesOnActionsParams {
	return messagesOnActionsParams{
		data: builder.Field{
			Action: "lt",
			Name:   "updatedAt",
			Value:  value,
		},
	}
}

func (r messagesOnActionsQueryUpdatedAtDateTime) After(value DateTime) messagesOnActionsParams {
	return messagesOnActionsParams{
		data: builder.Field{
			Action: "gt",
			Name:   "updatedAt",
			Value:  value,
		},
	}
}

func (r messagesOnActionsQueryUpdatedAtDateTime) BeforeEquals(value DateTime) messagesOnActionsParams {
	return messagesOnActionsParams{
		data: builder.Field{
			Action: "lte",
			Name:   "updatedAt",
			Value:  value,
		},
	}
}

func (r messagesOnActionsQueryUpdatedAtDateTime) AfterEquals(value DateTime) messagesOnActionsParams {
	return messagesOnActionsParams{
		data: builder.Field{
			Action: "gte",
			Name:   "updatedAt",
			Value:  value,
		},
	}
}

// base struct
type messagesOnActionsQueryMessageMessage struct{}

type messagesOnActionsQueryMessageRelations struct{}

// MessagesOnActions -> Message
//
// @relation
// @required
func (messagesOnActionsQueryMessageRelations) Where(
	params ...iMessageParams,
) messagesOnActionsParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return messagesOnActionsParams{
		data: builder.Field{
			Name:   "message",
			Action: "",
			Fields: fields,
		},
	}
}

func (messagesOnActionsQueryMessageRelations) Fetch() messagesOnActionsToMessageFindOne {
	var v messagesOnActionsToMessageFindOne

	v.query.Operation = "query"
	v.query.Method = "message"
	v.query.Outputs = messageOutput

	return v
}

func (r messagesOnActionsQueryMessageRelations) Link(
	params ...iMessageParams,
) messagesOnActionsWithPrismaMessageSetParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return messagesOnActionsWithPrismaMessageSetParams{
		data: builder.Field{
			Name: "message",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: fields,
				},
			},
		},
	}
}

// base struct
type messagesOnActionsQueryMessageIDInt struct{}

// Set the required value of MessageID
func (r messagesOnActionsQueryMessageIDInt) Set(value int) messagesOnActionsWithPrismaMessageIDSetParams {

	return messagesOnActionsWithPrismaMessageIDSetParams{
		data: builder.Field{
			Name:  "messageId",
			Value: value,
		},
	}

}

func (r messagesOnActionsQueryMessageIDInt) Equals(value int) messagesOnActionsWithPrismaMessageIDEqualsParams {
	return messagesOnActionsWithPrismaMessageIDEqualsParams{
		data: builder.Field{
			Name:  "messageId",
			Value: value,
		},
	}
}

func (r messagesOnActionsQueryMessageIDInt) In(values []int) messagesOnActionsParams {
	f := builder.Field{
		Name:   "messageId",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return messagesOnActionsParams{
		data: f,
	}
}

func (r messagesOnActionsQueryMessageIDInt) Order(direction runtime.Direction) messagesOnActionsParams {
	return messagesOnActionsParams{
		data: builder.Field{
			Name:  "messageId",
			Value: direction,
		},
	}
}

func (r messagesOnActionsQueryMessageIDInt) LT(value int) messagesOnActionsParams {
	return messagesOnActionsParams{
		data: builder.Field{
			Action: "lt",
			Name:   "messageId",
			Value:  value,
		},
	}
}

func (r messagesOnActionsQueryMessageIDInt) GT(value int) messagesOnActionsParams {
	return messagesOnActionsParams{
		data: builder.Field{
			Action: "gt",
			Name:   "messageId",
			Value:  value,
		},
	}
}

func (r messagesOnActionsQueryMessageIDInt) LTE(value int) messagesOnActionsParams {
	return messagesOnActionsParams{
		data: builder.Field{
			Action: "lte",
			Name:   "messageId",
			Value:  value,
		},
	}
}

func (r messagesOnActionsQueryMessageIDInt) GTE(value int) messagesOnActionsParams {
	return messagesOnActionsParams{
		data: builder.Field{
			Action: "gte",
			Name:   "messageId",
			Value:  value,
		},
	}
}

// base struct
type messagesOnActionsQueryActionAction struct{}

type messagesOnActionsQueryActionRelations struct{}

// MessagesOnActions -> Action
//
// @relation
// @required
func (messagesOnActionsQueryActionRelations) Where(
	params ...iActionParams,
) messagesOnActionsParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return messagesOnActionsParams{
		data: builder.Field{
			Name:   "action",
			Action: "",
			Fields: fields,
		},
	}
}

func (messagesOnActionsQueryActionRelations) Fetch() messagesOnActionsToActionFindOne {
	var v messagesOnActionsToActionFindOne

	v.query.Operation = "query"
	v.query.Method = "action"
	v.query.Outputs = actionOutput

	return v
}

func (r messagesOnActionsQueryActionRelations) Link(
	params ...iActionParams,
) messagesOnActionsWithPrismaActionSetParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return messagesOnActionsWithPrismaActionSetParams{
		data: builder.Field{
			Name: "action",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: fields,
				},
			},
		},
	}
}

// base struct
type messagesOnActionsQueryActionIDInt struct{}

// Set the required value of ActionID
func (r messagesOnActionsQueryActionIDInt) Set(value int) messagesOnActionsWithPrismaActionIDSetParams {

	return messagesOnActionsWithPrismaActionIDSetParams{
		data: builder.Field{
			Name:  "actionId",
			Value: value,
		},
	}

}

func (r messagesOnActionsQueryActionIDInt) Equals(value int) messagesOnActionsWithPrismaActionIDEqualsParams {
	return messagesOnActionsWithPrismaActionIDEqualsParams{
		data: builder.Field{
			Name:  "actionId",
			Value: value,
		},
	}
}

func (r messagesOnActionsQueryActionIDInt) In(values []int) messagesOnActionsParams {
	f := builder.Field{
		Name:   "actionId",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return messagesOnActionsParams{
		data: f,
	}
}

func (r messagesOnActionsQueryActionIDInt) Order(direction runtime.Direction) messagesOnActionsParams {
	return messagesOnActionsParams{
		data: builder.Field{
			Name:  "actionId",
			Value: direction,
		},
	}
}

func (r messagesOnActionsQueryActionIDInt) LT(value int) messagesOnActionsParams {
	return messagesOnActionsParams{
		data: builder.Field{
			Action: "lt",
			Name:   "actionId",
			Value:  value,
		},
	}
}

func (r messagesOnActionsQueryActionIDInt) GT(value int) messagesOnActionsParams {
	return messagesOnActionsParams{
		data: builder.Field{
			Action: "gt",
			Name:   "actionId",
			Value:  value,
		},
	}
}

func (r messagesOnActionsQueryActionIDInt) LTE(value int) messagesOnActionsParams {
	return messagesOnActionsParams{
		data: builder.Field{
			Action: "lte",
			Name:   "actionId",
			Value:  value,
		},
	}
}

func (r messagesOnActionsQueryActionIDInt) GTE(value int) messagesOnActionsParams {
	return messagesOnActionsParams{
		data: builder.Field{
			Action: "gte",
			Name:   "actionId",
			Value:  value,
		},
	}
}

// MessagesOnEvents acts as a namespaces to access query methods for the MessagesOnEvents model
var MessagesOnEvents = messagesOnEventsQuery{}

// messagesOnEventsQuery exposes query functions for the messagesOnEvents model
type messagesOnEventsQuery struct {
	// CreatedAt
	//
	// @required
	CreatedAt messagesOnEventsQueryCreatedAtDateTime

	// DeletedAt
	//
	// @optional
	DeletedAt messagesOnEventsQueryDeletedAtDateTime

	// UpdatedAt
	//
	// @required
	UpdatedAt messagesOnEventsQueryUpdatedAtDateTime

	Message messagesOnEventsQueryMessageRelations

	// MessageID
	//
	// @required
	MessageID messagesOnEventsQueryMessageIDInt

	Event messagesOnEventsQueryEventRelations

	// EventID
	//
	// @required
	EventID messagesOnEventsQueryEventIDInt
}

func (messagesOnEventsQuery) Not(params ...iMessagesOnEventsParams) messagesOnEventsParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return messagesOnEventsParams{
		data: builder.Field{
			Name:     "NOT",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (messagesOnEventsQuery) Or(params ...iMessagesOnEventsParams) messagesOnEventsParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return messagesOnEventsParams{
		data: builder.Field{
			Name:     "OR",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

// searched for field raidId_avatarId
// type: RaidIdAvatarIdCompoundUniqueInput

// searched for field raidId_avatarId
// type: RaidIdAvatarIdCompoundUniqueInput

// searched for field raidId_raidBossId
// type: RaidIdRaidBossIdCompoundUniqueInput

// searched for field raidId_raidBossId
// type: RaidIdRaidBossIdCompoundUniqueInput

// searched for field raidId_storyId
// type: RaidIdStoryIdCompoundUniqueInput

// searched for field raidId_storyId
// type: RaidIdStoryIdCompoundUniqueInput

// searched for field id
// type: Int

// searched for field storyId_sequence
// type: StoryIdSequenceCompoundUniqueInput

// searched for field id
// type: Int

// searched for field eventId_position
// type: EventIdPositionCompoundUniqueInput

// searched for field messageId_actionId
// type: MessageIdActionIdCompoundUniqueInput

// searched for field messageId_actionId
// type: MessageIdActionIdCompoundUniqueInput

// searched for field messageId_eventId
// type: MessageIdEventIdCompoundUniqueInput

func (messagesOnEventsQuery) MessageIDEventID(
	_messageID iMessagesOnEventsWithPrismaMessageIDEqualsParams,

	_eventID iMessagesOnEventsWithPrismaEventIDEqualsParams,
) iMessagesOnEventsEqualsParamsUnique {
	var fields []builder.Field

	fields = append(fields, _messageID.field())
	fields = append(fields, _eventID.field())

	return messagesOnEventsEqualsParamsUnique{
		data: builder.Field{
			Name:   "messageId_eventId",
			Fields: fields,
		},
	}
}

// searched for field messageId_eventId
// type: MessageIdEventIdCompoundUniqueInput

func (messagesOnEventsQuery) MessageIDEventID(
	_messageID iMessagesOnEventsWithPrismaMessageIDEqualsParams,

	_eventID iMessagesOnEventsWithPrismaEventIDEqualsParams,
) iMessagesOnEventsEqualsParamsUnique {
	var fields []builder.Field

	fields = append(fields, _messageID.field())
	fields = append(fields, _eventID.field())

	return messagesOnEventsEqualsParamsUnique{
		data: builder.Field{
			Name:   "messageId_eventId",
			Fields: fields,
		},
	}
}

// base struct
type messagesOnEventsQueryCreatedAtDateTime struct{}

// Set the required value of CreatedAt
func (r messagesOnEventsQueryCreatedAtDateTime) Set(value DateTime) messagesOnEventsSetParams {

	return messagesOnEventsSetParams{
		data: builder.Field{
			Name:  "createdAt",
			Value: value,
		},
	}

}

func (r messagesOnEventsQueryCreatedAtDateTime) Equals(value DateTime) messagesOnEventsWithPrismaCreatedAtEqualsParams {
	return messagesOnEventsWithPrismaCreatedAtEqualsParams{
		data: builder.Field{
			Name:  "createdAt",
			Value: value,
		},
	}
}

func (r messagesOnEventsQueryCreatedAtDateTime) In(values []DateTime) messagesOnEventsParams {
	f := builder.Field{
		Name:   "createdAt",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return messagesOnEventsParams{
		data: f,
	}
}

func (r messagesOnEventsQueryCreatedAtDateTime) Order(direction runtime.Direction) messagesOnEventsParams {
	return messagesOnEventsParams{
		data: builder.Field{
			Name:  "createdAt",
			Value: direction,
		},
	}
}

func (r messagesOnEventsQueryCreatedAtDateTime) Before(value DateTime) messagesOnEventsParams {
	return messagesOnEventsParams{
		data: builder.Field{
			Action: "lt",
			Name:   "createdAt",
			Value:  value,
		},
	}
}

func (r messagesOnEventsQueryCreatedAtDateTime) After(value DateTime) messagesOnEventsParams {
	return messagesOnEventsParams{
		data: builder.Field{
			Action: "gt",
			Name:   "createdAt",
			Value:  value,
		},
	}
}

func (r messagesOnEventsQueryCreatedAtDateTime) BeforeEquals(value DateTime) messagesOnEventsParams {
	return messagesOnEventsParams{
		data: builder.Field{
			Action: "lte",
			Name:   "createdAt",
			Value:  value,
		},
	}
}

func (r messagesOnEventsQueryCreatedAtDateTime) AfterEquals(value DateTime) messagesOnEventsParams {
	return messagesOnEventsParams{
		data: builder.Field{
			Action: "gte",
			Name:   "createdAt",
			Value:  value,
		},
	}
}

// base struct
type messagesOnEventsQueryDeletedAtDateTime struct{}

// Set the optional value of DeletedAt
func (r messagesOnEventsQueryDeletedAtDateTime) Set(value DateTime) messagesOnEventsSetParams {

	return messagesOnEventsSetParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: value,
		},
	}

}

// Set the optional value of DeletedAt dynamically
func (r messagesOnEventsQueryDeletedAtDateTime) SetOptional(value *DateTime) messagesOnEventsSetParams {
	if value == nil {

		var v *DateTime
		return messagesOnEventsSetParams{
			data: builder.Field{
				Name:  "deletedAt",
				Value: v,
			},
		}
	}

	return r.Set(*value)
}

func (r messagesOnEventsQueryDeletedAtDateTime) Equals(value DateTime) messagesOnEventsWithPrismaDeletedAtEqualsParams {
	return messagesOnEventsWithPrismaDeletedAtEqualsParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: value,
		},
	}
}

func (r messagesOnEventsQueryDeletedAtDateTime) In(values []DateTime) messagesOnEventsParams {
	f := builder.Field{
		Name:   "deletedAt",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return messagesOnEventsParams{
		data: f,
	}
}

func (r messagesOnEventsQueryDeletedAtDateTime) EqualsOptional(value *DateTime) messagesOnEventsParams {
	return messagesOnEventsParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: value,
		},
	}
}

func (r messagesOnEventsQueryDeletedAtDateTime) IsNull() messagesOnEventsParams {
	var str *string = nil
	return messagesOnEventsParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: str,
		},
	}
}

func (r messagesOnEventsQueryDeletedAtDateTime) Order(direction runtime.Direction) messagesOnEventsParams {
	return messagesOnEventsParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: direction,
		},
	}
}

func (r messagesOnEventsQueryDeletedAtDateTime) Before(value DateTime) messagesOnEventsParams {
	return messagesOnEventsParams{
		data: builder.Field{
			Action: "lt",
			Name:   "deletedAt",
			Value:  value,
		},
	}
}

func (r messagesOnEventsQueryDeletedAtDateTime) After(value DateTime) messagesOnEventsParams {
	return messagesOnEventsParams{
		data: builder.Field{
			Action: "gt",
			Name:   "deletedAt",
			Value:  value,
		},
	}
}

func (r messagesOnEventsQueryDeletedAtDateTime) BeforeEquals(value DateTime) messagesOnEventsParams {
	return messagesOnEventsParams{
		data: builder.Field{
			Action: "lte",
			Name:   "deletedAt",
			Value:  value,
		},
	}
}

func (r messagesOnEventsQueryDeletedAtDateTime) AfterEquals(value DateTime) messagesOnEventsParams {
	return messagesOnEventsParams{
		data: builder.Field{
			Action: "gte",
			Name:   "deletedAt",
			Value:  value,
		},
	}
}

// base struct
type messagesOnEventsQueryUpdatedAtDateTime struct{}

// Set the required value of UpdatedAt
func (r messagesOnEventsQueryUpdatedAtDateTime) Set(value DateTime) messagesOnEventsSetParams {

	return messagesOnEventsSetParams{
		data: builder.Field{
			Name:  "updatedAt",
			Value: value,
		},
	}

}

func (r messagesOnEventsQueryUpdatedAtDateTime) Equals(value DateTime) messagesOnEventsWithPrismaUpdatedAtEqualsParams {
	return messagesOnEventsWithPrismaUpdatedAtEqualsParams{
		data: builder.Field{
			Name:  "updatedAt",
			Value: value,
		},
	}
}

func (r messagesOnEventsQueryUpdatedAtDateTime) In(values []DateTime) messagesOnEventsParams {
	f := builder.Field{
		Name:   "updatedAt",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return messagesOnEventsParams{
		data: f,
	}
}

func (r messagesOnEventsQueryUpdatedAtDateTime) Order(direction runtime.Direction) messagesOnEventsParams {
	return messagesOnEventsParams{
		data: builder.Field{
			Name:  "updatedAt",
			Value: direction,
		},
	}
}

func (r messagesOnEventsQueryUpdatedAtDateTime) Before(value DateTime) messagesOnEventsParams {
	return messagesOnEventsParams{
		data: builder.Field{
			Action: "lt",
			Name:   "updatedAt",
			Value:  value,
		},
	}
}

func (r messagesOnEventsQueryUpdatedAtDateTime) After(value DateTime) messagesOnEventsParams {
	return messagesOnEventsParams{
		data: builder.Field{
			Action: "gt",
			Name:   "updatedAt",
			Value:  value,
		},
	}
}

func (r messagesOnEventsQueryUpdatedAtDateTime) BeforeEquals(value DateTime) messagesOnEventsParams {
	return messagesOnEventsParams{
		data: builder.Field{
			Action: "lte",
			Name:   "updatedAt",
			Value:  value,
		},
	}
}

func (r messagesOnEventsQueryUpdatedAtDateTime) AfterEquals(value DateTime) messagesOnEventsParams {
	return messagesOnEventsParams{
		data: builder.Field{
			Action: "gte",
			Name:   "updatedAt",
			Value:  value,
		},
	}
}

// base struct
type messagesOnEventsQueryMessageMessage struct{}

type messagesOnEventsQueryMessageRelations struct{}

// MessagesOnEvents -> Message
//
// @relation
// @required
func (messagesOnEventsQueryMessageRelations) Where(
	params ...iMessageParams,
) messagesOnEventsParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return messagesOnEventsParams{
		data: builder.Field{
			Name:   "message",
			Action: "",
			Fields: fields,
		},
	}
}

func (messagesOnEventsQueryMessageRelations) Fetch() messagesOnEventsToMessageFindOne {
	var v messagesOnEventsToMessageFindOne

	v.query.Operation = "query"
	v.query.Method = "message"
	v.query.Outputs = messageOutput

	return v
}

func (r messagesOnEventsQueryMessageRelations) Link(
	params ...iMessageParams,
) messagesOnEventsWithPrismaMessageSetParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return messagesOnEventsWithPrismaMessageSetParams{
		data: builder.Field{
			Name: "message",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: fields,
				},
			},
		},
	}
}

// base struct
type messagesOnEventsQueryMessageIDInt struct{}

// Set the required value of MessageID
func (r messagesOnEventsQueryMessageIDInt) Set(value int) messagesOnEventsWithPrismaMessageIDSetParams {

	return messagesOnEventsWithPrismaMessageIDSetParams{
		data: builder.Field{
			Name:  "messageId",
			Value: value,
		},
	}

}

func (r messagesOnEventsQueryMessageIDInt) Equals(value int) messagesOnEventsWithPrismaMessageIDEqualsParams {
	return messagesOnEventsWithPrismaMessageIDEqualsParams{
		data: builder.Field{
			Name:  "messageId",
			Value: value,
		},
	}
}

func (r messagesOnEventsQueryMessageIDInt) In(values []int) messagesOnEventsParams {
	f := builder.Field{
		Name:   "messageId",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return messagesOnEventsParams{
		data: f,
	}
}

func (r messagesOnEventsQueryMessageIDInt) Order(direction runtime.Direction) messagesOnEventsParams {
	return messagesOnEventsParams{
		data: builder.Field{
			Name:  "messageId",
			Value: direction,
		},
	}
}

func (r messagesOnEventsQueryMessageIDInt) LT(value int) messagesOnEventsParams {
	return messagesOnEventsParams{
		data: builder.Field{
			Action: "lt",
			Name:   "messageId",
			Value:  value,
		},
	}
}

func (r messagesOnEventsQueryMessageIDInt) GT(value int) messagesOnEventsParams {
	return messagesOnEventsParams{
		data: builder.Field{
			Action: "gt",
			Name:   "messageId",
			Value:  value,
		},
	}
}

func (r messagesOnEventsQueryMessageIDInt) LTE(value int) messagesOnEventsParams {
	return messagesOnEventsParams{
		data: builder.Field{
			Action: "lte",
			Name:   "messageId",
			Value:  value,
		},
	}
}

func (r messagesOnEventsQueryMessageIDInt) GTE(value int) messagesOnEventsParams {
	return messagesOnEventsParams{
		data: builder.Field{
			Action: "gte",
			Name:   "messageId",
			Value:  value,
		},
	}
}

// base struct
type messagesOnEventsQueryEventEvent struct{}

type messagesOnEventsQueryEventRelations struct{}

// MessagesOnEvents -> Event
//
// @relation
// @required
func (messagesOnEventsQueryEventRelations) Where(
	params ...iEventParams,
) messagesOnEventsParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return messagesOnEventsParams{
		data: builder.Field{
			Name:   "event",
			Action: "",
			Fields: fields,
		},
	}
}

func (messagesOnEventsQueryEventRelations) Fetch() messagesOnEventsToEventFindOne {
	var v messagesOnEventsToEventFindOne

	v.query.Operation = "query"
	v.query.Method = "event"
	v.query.Outputs = eventOutput

	return v
}

func (r messagesOnEventsQueryEventRelations) Link(
	params ...iEventParams,
) messagesOnEventsWithPrismaEventSetParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return messagesOnEventsWithPrismaEventSetParams{
		data: builder.Field{
			Name: "event",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: fields,
				},
			},
		},
	}
}

// base struct
type messagesOnEventsQueryEventIDInt struct{}

// Set the required value of EventID
func (r messagesOnEventsQueryEventIDInt) Set(value int) messagesOnEventsWithPrismaEventIDSetParams {

	return messagesOnEventsWithPrismaEventIDSetParams{
		data: builder.Field{
			Name:  "eventId",
			Value: value,
		},
	}

}

func (r messagesOnEventsQueryEventIDInt) Equals(value int) messagesOnEventsWithPrismaEventIDEqualsParams {
	return messagesOnEventsWithPrismaEventIDEqualsParams{
		data: builder.Field{
			Name:  "eventId",
			Value: value,
		},
	}
}

func (r messagesOnEventsQueryEventIDInt) In(values []int) messagesOnEventsParams {
	f := builder.Field{
		Name:   "eventId",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return messagesOnEventsParams{
		data: f,
	}
}

func (r messagesOnEventsQueryEventIDInt) Order(direction runtime.Direction) messagesOnEventsParams {
	return messagesOnEventsParams{
		data: builder.Field{
			Name:  "eventId",
			Value: direction,
		},
	}
}

func (r messagesOnEventsQueryEventIDInt) LT(value int) messagesOnEventsParams {
	return messagesOnEventsParams{
		data: builder.Field{
			Action: "lt",
			Name:   "eventId",
			Value:  value,
		},
	}
}

func (r messagesOnEventsQueryEventIDInt) GT(value int) messagesOnEventsParams {
	return messagesOnEventsParams{
		data: builder.Field{
			Action: "gt",
			Name:   "eventId",
			Value:  value,
		},
	}
}

func (r messagesOnEventsQueryEventIDInt) LTE(value int) messagesOnEventsParams {
	return messagesOnEventsParams{
		data: builder.Field{
			Action: "lte",
			Name:   "eventId",
			Value:  value,
		},
	}
}

func (r messagesOnEventsQueryEventIDInt) GTE(value int) messagesOnEventsParams {
	return messagesOnEventsParams{
		data: builder.Field{
			Action: "gte",
			Name:   "eventId",
			Value:  value,
		},
	}
}
