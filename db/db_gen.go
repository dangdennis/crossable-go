// Code generated by Prisma Client Go. DO NOT EDIT.
//nolint
// +build !codeanalysis

package db

import (
	"context"
	"errors"
	"fmt"

	"github.com/prisma/prisma-client-go/engine"
	"github.com/prisma/prisma-client-go/generator/builder"
	"github.com/prisma/prisma-client-go/generator/raw"
	"github.com/prisma/prisma-client-go/generator/runtime"
)

// re-declare variables which are needed in Prisma Client Go but also should be exported
// in the generated client

type DateTime = runtime.DateTime

type Direction = runtime.Direction

const (
	ASC  Direction = runtime.ASC
	DESC Direction = runtime.DESC
)

const RFC3339Milli = runtime.RFC3339Milli

// --- template actions.gotpl ---
var countOutput = []builder.Output{
	{Name: "count"},
}

type userActions struct {
	// client holds the prisma client
	client *PrismaClient
}

var userOutput = []builder.Output{
	{Name: "id"},
	{Name: "createdAt"},
	{Name: "deletedAt"},
	{Name: "updatedAt"},
	{Name: "discordUserId"},
	{Name: "email"},
	{Name: "discordUsername"},
	{Name: "firstName"},
	{Name: "lastName"},
}

type iUserRelationWith interface {
	getQuery() builder.Query
	with()
	userRelation()
}

type iUserParams interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
}

type userParams struct {
	data  builder.Field
	query builder.Query
}

func (p userParams) field() builder.Field {
	return p.data
}

func (p userParams) getQuery() builder.Query {
	return p.query
}

func (p userParams) userModel() {}

type iUserOrderByParams interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
}

type userOrderByParams struct {
	data  builder.Field
	query builder.Query
}

func (p userOrderByParams) field() builder.Field {
	return p.data
}

func (p userOrderByParams) getQuery() builder.Query {
	return p.query
}

func (p userOrderByParams) userModel() {}

type iUserCursorParams interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	isCursor()
}

type userCursorParams struct {
	data  builder.Field
	query builder.Query
}

func (p userCursorParams) field() builder.Field {
	return p.data
}

func (p userCursorParams) isCursor() {}

func (p userCursorParams) getQuery() builder.Query {
	return p.query
}

func (p userCursorParams) userModel() {}

type iUserParamsUnique interface {
	field() builder.Field
	getQuery() builder.Query
	unique()
	userModel()
}

type userParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p userParamsUnique) userModel() {}

func (userParamsUnique) unique() {}

func (p userParamsUnique) field() builder.Field {
	return p.data
}

func (p userParamsUnique) getQuery() builder.Query {
	return p.query
}

type iUserEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
}

type userEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p userEqualsParams) userModel() {}

func (userEqualsParams) equals() {}

func (p userEqualsParams) field() builder.Field {
	return p.data
}

func (p userEqualsParams) getQuery() builder.Query {
	return p.query
}

type iUserEqualsParamsUnique interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	unique()
	userModel()
}

type userEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p userEqualsParamsUnique) userModel() {}

func (userEqualsParamsUnique) unique() {}
func (userEqualsParamsUnique) equals() {}

func (p userEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p userEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

type iUserSetParams interface {
	field() builder.Field
	settable()
}

type userSetParams struct {
	data builder.Field
}

func (userSetParams) settable() {}

func (p userSetParams) field() builder.Field {
	return p.data
}

type iUserWithPrismaIDEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	idField()
}

type userWithPrismaIDSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaIDSetParams) field() builder.Field {
	return p.data
}

func (p userWithPrismaIDSetParams) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaIDSetParams) userModel() {}

func (p userWithPrismaIDSetParams) idField() {}

type userWithPrismaIDEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaIDEqualsParams) field() builder.Field {
	return p.data
}

func (p userWithPrismaIDEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaIDEqualsParams) userModel() {}

func (p userWithPrismaIDEqualsParams) idField() {}

func (userWithPrismaIDSetParams) settable()  {}
func (userWithPrismaIDEqualsParams) equals() {}

type userWithPrismaIDEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaIDEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p userWithPrismaIDEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaIDEqualsParamsUnique) userModel() {}
func (p userWithPrismaIDEqualsParamsUnique) idField()   {}

func (userWithPrismaIDEqualsParamsUnique) unique() {}
func (userWithPrismaIDEqualsParamsUnique) equals() {}

type iUserWithPrismaCreatedAtEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	createdAtField()
}

type userWithPrismaCreatedAtSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaCreatedAtSetParams) field() builder.Field {
	return p.data
}

func (p userWithPrismaCreatedAtSetParams) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaCreatedAtSetParams) userModel() {}

func (p userWithPrismaCreatedAtSetParams) createdAtField() {}

type userWithPrismaCreatedAtEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaCreatedAtEqualsParams) field() builder.Field {
	return p.data
}

func (p userWithPrismaCreatedAtEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaCreatedAtEqualsParams) userModel() {}

func (p userWithPrismaCreatedAtEqualsParams) createdAtField() {}

func (userWithPrismaCreatedAtSetParams) settable()  {}
func (userWithPrismaCreatedAtEqualsParams) equals() {}

type userWithPrismaCreatedAtEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaCreatedAtEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p userWithPrismaCreatedAtEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaCreatedAtEqualsParamsUnique) userModel()      {}
func (p userWithPrismaCreatedAtEqualsParamsUnique) createdAtField() {}

func (userWithPrismaCreatedAtEqualsParamsUnique) unique() {}
func (userWithPrismaCreatedAtEqualsParamsUnique) equals() {}

type iUserWithPrismaDeletedAtEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	deletedAtField()
}

type userWithPrismaDeletedAtSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaDeletedAtSetParams) field() builder.Field {
	return p.data
}

func (p userWithPrismaDeletedAtSetParams) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaDeletedAtSetParams) userModel() {}

func (p userWithPrismaDeletedAtSetParams) deletedAtField() {}

type userWithPrismaDeletedAtEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaDeletedAtEqualsParams) field() builder.Field {
	return p.data
}

func (p userWithPrismaDeletedAtEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaDeletedAtEqualsParams) userModel() {}

func (p userWithPrismaDeletedAtEqualsParams) deletedAtField() {}

func (userWithPrismaDeletedAtSetParams) settable()  {}
func (userWithPrismaDeletedAtEqualsParams) equals() {}

type userWithPrismaDeletedAtEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaDeletedAtEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p userWithPrismaDeletedAtEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaDeletedAtEqualsParamsUnique) userModel()      {}
func (p userWithPrismaDeletedAtEqualsParamsUnique) deletedAtField() {}

func (userWithPrismaDeletedAtEqualsParamsUnique) unique() {}
func (userWithPrismaDeletedAtEqualsParamsUnique) equals() {}

type iUserWithPrismaUpdatedAtEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	updatedAtField()
}

type userWithPrismaUpdatedAtSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaUpdatedAtSetParams) field() builder.Field {
	return p.data
}

func (p userWithPrismaUpdatedAtSetParams) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaUpdatedAtSetParams) userModel() {}

func (p userWithPrismaUpdatedAtSetParams) updatedAtField() {}

type userWithPrismaUpdatedAtEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaUpdatedAtEqualsParams) field() builder.Field {
	return p.data
}

func (p userWithPrismaUpdatedAtEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaUpdatedAtEqualsParams) userModel() {}

func (p userWithPrismaUpdatedAtEqualsParams) updatedAtField() {}

func (userWithPrismaUpdatedAtSetParams) settable()  {}
func (userWithPrismaUpdatedAtEqualsParams) equals() {}

type userWithPrismaUpdatedAtEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaUpdatedAtEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p userWithPrismaUpdatedAtEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaUpdatedAtEqualsParamsUnique) userModel()      {}
func (p userWithPrismaUpdatedAtEqualsParamsUnique) updatedAtField() {}

func (userWithPrismaUpdatedAtEqualsParamsUnique) unique() {}
func (userWithPrismaUpdatedAtEqualsParamsUnique) equals() {}

type iUserWithPrismaDiscordUserIDEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	discordUserIDField()
}

type userWithPrismaDiscordUserIDSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaDiscordUserIDSetParams) field() builder.Field {
	return p.data
}

func (p userWithPrismaDiscordUserIDSetParams) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaDiscordUserIDSetParams) userModel() {}

func (p userWithPrismaDiscordUserIDSetParams) discordUserIDField() {}

type userWithPrismaDiscordUserIDEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaDiscordUserIDEqualsParams) field() builder.Field {
	return p.data
}

func (p userWithPrismaDiscordUserIDEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaDiscordUserIDEqualsParams) userModel() {}

func (p userWithPrismaDiscordUserIDEqualsParams) discordUserIDField() {}

func (userWithPrismaDiscordUserIDSetParams) settable()  {}
func (userWithPrismaDiscordUserIDEqualsParams) equals() {}

type userWithPrismaDiscordUserIDEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaDiscordUserIDEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p userWithPrismaDiscordUserIDEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaDiscordUserIDEqualsParamsUnique) userModel()          {}
func (p userWithPrismaDiscordUserIDEqualsParamsUnique) discordUserIDField() {}

func (userWithPrismaDiscordUserIDEqualsParamsUnique) unique() {}
func (userWithPrismaDiscordUserIDEqualsParamsUnique) equals() {}

type iUserWithPrismaEmailEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	emailField()
}

type userWithPrismaEmailSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaEmailSetParams) field() builder.Field {
	return p.data
}

func (p userWithPrismaEmailSetParams) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaEmailSetParams) userModel() {}

func (p userWithPrismaEmailSetParams) emailField() {}

type userWithPrismaEmailEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaEmailEqualsParams) field() builder.Field {
	return p.data
}

func (p userWithPrismaEmailEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaEmailEqualsParams) userModel() {}

func (p userWithPrismaEmailEqualsParams) emailField() {}

func (userWithPrismaEmailSetParams) settable()  {}
func (userWithPrismaEmailEqualsParams) equals() {}

type userWithPrismaEmailEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaEmailEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p userWithPrismaEmailEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaEmailEqualsParamsUnique) userModel()  {}
func (p userWithPrismaEmailEqualsParamsUnique) emailField() {}

func (userWithPrismaEmailEqualsParamsUnique) unique() {}
func (userWithPrismaEmailEqualsParamsUnique) equals() {}

type iUserWithPrismaDiscordUsernameEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	discordUsernameField()
}

type userWithPrismaDiscordUsernameSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaDiscordUsernameSetParams) field() builder.Field {
	return p.data
}

func (p userWithPrismaDiscordUsernameSetParams) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaDiscordUsernameSetParams) userModel() {}

func (p userWithPrismaDiscordUsernameSetParams) discordUsernameField() {}

type userWithPrismaDiscordUsernameEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaDiscordUsernameEqualsParams) field() builder.Field {
	return p.data
}

func (p userWithPrismaDiscordUsernameEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaDiscordUsernameEqualsParams) userModel() {}

func (p userWithPrismaDiscordUsernameEqualsParams) discordUsernameField() {}

func (userWithPrismaDiscordUsernameSetParams) settable()  {}
func (userWithPrismaDiscordUsernameEqualsParams) equals() {}

type userWithPrismaDiscordUsernameEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaDiscordUsernameEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p userWithPrismaDiscordUsernameEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaDiscordUsernameEqualsParamsUnique) userModel()            {}
func (p userWithPrismaDiscordUsernameEqualsParamsUnique) discordUsernameField() {}

func (userWithPrismaDiscordUsernameEqualsParamsUnique) unique() {}
func (userWithPrismaDiscordUsernameEqualsParamsUnique) equals() {}

type iUserWithPrismaFirstNameEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	firstNameField()
}

type userWithPrismaFirstNameSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaFirstNameSetParams) field() builder.Field {
	return p.data
}

func (p userWithPrismaFirstNameSetParams) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaFirstNameSetParams) userModel() {}

func (p userWithPrismaFirstNameSetParams) firstNameField() {}

type userWithPrismaFirstNameEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaFirstNameEqualsParams) field() builder.Field {
	return p.data
}

func (p userWithPrismaFirstNameEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaFirstNameEqualsParams) userModel() {}

func (p userWithPrismaFirstNameEqualsParams) firstNameField() {}

func (userWithPrismaFirstNameSetParams) settable()  {}
func (userWithPrismaFirstNameEqualsParams) equals() {}

type userWithPrismaFirstNameEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaFirstNameEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p userWithPrismaFirstNameEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaFirstNameEqualsParamsUnique) userModel()      {}
func (p userWithPrismaFirstNameEqualsParamsUnique) firstNameField() {}

func (userWithPrismaFirstNameEqualsParamsUnique) unique() {}
func (userWithPrismaFirstNameEqualsParamsUnique) equals() {}

type iUserWithPrismaLastNameEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	lastNameField()
}

type userWithPrismaLastNameSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaLastNameSetParams) field() builder.Field {
	return p.data
}

func (p userWithPrismaLastNameSetParams) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaLastNameSetParams) userModel() {}

func (p userWithPrismaLastNameSetParams) lastNameField() {}

type userWithPrismaLastNameEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaLastNameEqualsParams) field() builder.Field {
	return p.data
}

func (p userWithPrismaLastNameEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaLastNameEqualsParams) userModel() {}

func (p userWithPrismaLastNameEqualsParams) lastNameField() {}

func (userWithPrismaLastNameSetParams) settable()  {}
func (userWithPrismaLastNameEqualsParams) equals() {}

type userWithPrismaLastNameEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaLastNameEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p userWithPrismaLastNameEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaLastNameEqualsParamsUnique) userModel()     {}
func (p userWithPrismaLastNameEqualsParamsUnique) lastNameField() {}

func (userWithPrismaLastNameEqualsParamsUnique) unique() {}
func (userWithPrismaLastNameEqualsParamsUnique) equals() {}

type iUserWithPrismaAvatarEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	avatarField()
}

type userWithPrismaAvatarSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaAvatarSetParams) field() builder.Field {
	return p.data
}

func (p userWithPrismaAvatarSetParams) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaAvatarSetParams) userModel() {}

func (p userWithPrismaAvatarSetParams) avatarField() {}

type userWithPrismaAvatarEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaAvatarEqualsParams) field() builder.Field {
	return p.data
}

func (p userWithPrismaAvatarEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaAvatarEqualsParams) userModel() {}

func (p userWithPrismaAvatarEqualsParams) avatarField() {}

func (userWithPrismaAvatarSetParams) settable()  {}
func (userWithPrismaAvatarEqualsParams) equals() {}

type userWithPrismaAvatarEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaAvatarEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p userWithPrismaAvatarEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaAvatarEqualsParamsUnique) userModel()   {}
func (p userWithPrismaAvatarEqualsParamsUnique) avatarField() {}

func (userWithPrismaAvatarEqualsParamsUnique) unique() {}
func (userWithPrismaAvatarEqualsParamsUnique) equals() {}

type avatarActions struct {
	// client holds the prisma client
	client *PrismaClient
}

var avatarOutput = []builder.Output{
	{Name: "id"},
	{Name: "createdAt"},
	{Name: "deletedAt"},
	{Name: "updatedAt"},
	{Name: "userId"},
}

type iAvatarRelationWith interface {
	getQuery() builder.Query
	with()
	avatarRelation()
}

type iAvatarParams interface {
	field() builder.Field
	getQuery() builder.Query
	avatarModel()
}

type avatarParams struct {
	data  builder.Field
	query builder.Query
}

func (p avatarParams) field() builder.Field {
	return p.data
}

func (p avatarParams) getQuery() builder.Query {
	return p.query
}

func (p avatarParams) avatarModel() {}

type iAvatarOrderByParams interface {
	field() builder.Field
	getQuery() builder.Query
	avatarModel()
}

type avatarOrderByParams struct {
	data  builder.Field
	query builder.Query
}

func (p avatarOrderByParams) field() builder.Field {
	return p.data
}

func (p avatarOrderByParams) getQuery() builder.Query {
	return p.query
}

func (p avatarOrderByParams) avatarModel() {}

type iAvatarCursorParams interface {
	field() builder.Field
	getQuery() builder.Query
	avatarModel()
	isCursor()
}

type avatarCursorParams struct {
	data  builder.Field
	query builder.Query
}

func (p avatarCursorParams) field() builder.Field {
	return p.data
}

func (p avatarCursorParams) isCursor() {}

func (p avatarCursorParams) getQuery() builder.Query {
	return p.query
}

func (p avatarCursorParams) avatarModel() {}

type iAvatarParamsUnique interface {
	field() builder.Field
	getQuery() builder.Query
	unique()
	avatarModel()
}

type avatarParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p avatarParamsUnique) avatarModel() {}

func (avatarParamsUnique) unique() {}

func (p avatarParamsUnique) field() builder.Field {
	return p.data
}

func (p avatarParamsUnique) getQuery() builder.Query {
	return p.query
}

type iAvatarEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	avatarModel()
}

type avatarEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p avatarEqualsParams) avatarModel() {}

func (avatarEqualsParams) equals() {}

func (p avatarEqualsParams) field() builder.Field {
	return p.data
}

func (p avatarEqualsParams) getQuery() builder.Query {
	return p.query
}

type iAvatarEqualsParamsUnique interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	unique()
	avatarModel()
}

type avatarEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p avatarEqualsParamsUnique) avatarModel() {}

func (avatarEqualsParamsUnique) unique() {}
func (avatarEqualsParamsUnique) equals() {}

func (p avatarEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p avatarEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

type iAvatarSetParams interface {
	field() builder.Field
	settable()
}

type avatarSetParams struct {
	data builder.Field
}

func (avatarSetParams) settable() {}

func (p avatarSetParams) field() builder.Field {
	return p.data
}

type iAvatarWithPrismaIDEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	avatarModel()
	idField()
}

type avatarWithPrismaIDSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p avatarWithPrismaIDSetParams) field() builder.Field {
	return p.data
}

func (p avatarWithPrismaIDSetParams) getQuery() builder.Query {
	return p.query
}

func (p avatarWithPrismaIDSetParams) avatarModel() {}

func (p avatarWithPrismaIDSetParams) idField() {}

type avatarWithPrismaIDEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p avatarWithPrismaIDEqualsParams) field() builder.Field {
	return p.data
}

func (p avatarWithPrismaIDEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p avatarWithPrismaIDEqualsParams) avatarModel() {}

func (p avatarWithPrismaIDEqualsParams) idField() {}

func (avatarWithPrismaIDSetParams) settable()  {}
func (avatarWithPrismaIDEqualsParams) equals() {}

type avatarWithPrismaIDEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p avatarWithPrismaIDEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p avatarWithPrismaIDEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p avatarWithPrismaIDEqualsParamsUnique) avatarModel() {}
func (p avatarWithPrismaIDEqualsParamsUnique) idField()     {}

func (avatarWithPrismaIDEqualsParamsUnique) unique() {}
func (avatarWithPrismaIDEqualsParamsUnique) equals() {}

type iAvatarWithPrismaCreatedAtEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	avatarModel()
	createdAtField()
}

type avatarWithPrismaCreatedAtSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p avatarWithPrismaCreatedAtSetParams) field() builder.Field {
	return p.data
}

func (p avatarWithPrismaCreatedAtSetParams) getQuery() builder.Query {
	return p.query
}

func (p avatarWithPrismaCreatedAtSetParams) avatarModel() {}

func (p avatarWithPrismaCreatedAtSetParams) createdAtField() {}

type avatarWithPrismaCreatedAtEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p avatarWithPrismaCreatedAtEqualsParams) field() builder.Field {
	return p.data
}

func (p avatarWithPrismaCreatedAtEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p avatarWithPrismaCreatedAtEqualsParams) avatarModel() {}

func (p avatarWithPrismaCreatedAtEqualsParams) createdAtField() {}

func (avatarWithPrismaCreatedAtSetParams) settable()  {}
func (avatarWithPrismaCreatedAtEqualsParams) equals() {}

type avatarWithPrismaCreatedAtEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p avatarWithPrismaCreatedAtEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p avatarWithPrismaCreatedAtEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p avatarWithPrismaCreatedAtEqualsParamsUnique) avatarModel()    {}
func (p avatarWithPrismaCreatedAtEqualsParamsUnique) createdAtField() {}

func (avatarWithPrismaCreatedAtEqualsParamsUnique) unique() {}
func (avatarWithPrismaCreatedAtEqualsParamsUnique) equals() {}

type iAvatarWithPrismaDeletedAtEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	avatarModel()
	deletedAtField()
}

type avatarWithPrismaDeletedAtSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p avatarWithPrismaDeletedAtSetParams) field() builder.Field {
	return p.data
}

func (p avatarWithPrismaDeletedAtSetParams) getQuery() builder.Query {
	return p.query
}

func (p avatarWithPrismaDeletedAtSetParams) avatarModel() {}

func (p avatarWithPrismaDeletedAtSetParams) deletedAtField() {}

type avatarWithPrismaDeletedAtEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p avatarWithPrismaDeletedAtEqualsParams) field() builder.Field {
	return p.data
}

func (p avatarWithPrismaDeletedAtEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p avatarWithPrismaDeletedAtEqualsParams) avatarModel() {}

func (p avatarWithPrismaDeletedAtEqualsParams) deletedAtField() {}

func (avatarWithPrismaDeletedAtSetParams) settable()  {}
func (avatarWithPrismaDeletedAtEqualsParams) equals() {}

type avatarWithPrismaDeletedAtEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p avatarWithPrismaDeletedAtEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p avatarWithPrismaDeletedAtEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p avatarWithPrismaDeletedAtEqualsParamsUnique) avatarModel()    {}
func (p avatarWithPrismaDeletedAtEqualsParamsUnique) deletedAtField() {}

func (avatarWithPrismaDeletedAtEqualsParamsUnique) unique() {}
func (avatarWithPrismaDeletedAtEqualsParamsUnique) equals() {}

type iAvatarWithPrismaUpdatedAtEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	avatarModel()
	updatedAtField()
}

type avatarWithPrismaUpdatedAtSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p avatarWithPrismaUpdatedAtSetParams) field() builder.Field {
	return p.data
}

func (p avatarWithPrismaUpdatedAtSetParams) getQuery() builder.Query {
	return p.query
}

func (p avatarWithPrismaUpdatedAtSetParams) avatarModel() {}

func (p avatarWithPrismaUpdatedAtSetParams) updatedAtField() {}

type avatarWithPrismaUpdatedAtEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p avatarWithPrismaUpdatedAtEqualsParams) field() builder.Field {
	return p.data
}

func (p avatarWithPrismaUpdatedAtEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p avatarWithPrismaUpdatedAtEqualsParams) avatarModel() {}

func (p avatarWithPrismaUpdatedAtEqualsParams) updatedAtField() {}

func (avatarWithPrismaUpdatedAtSetParams) settable()  {}
func (avatarWithPrismaUpdatedAtEqualsParams) equals() {}

type avatarWithPrismaUpdatedAtEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p avatarWithPrismaUpdatedAtEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p avatarWithPrismaUpdatedAtEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p avatarWithPrismaUpdatedAtEqualsParamsUnique) avatarModel()    {}
func (p avatarWithPrismaUpdatedAtEqualsParamsUnique) updatedAtField() {}

func (avatarWithPrismaUpdatedAtEqualsParamsUnique) unique() {}
func (avatarWithPrismaUpdatedAtEqualsParamsUnique) equals() {}

type iAvatarWithPrismaUserEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	avatarModel()
	userField()
}

type avatarWithPrismaUserSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p avatarWithPrismaUserSetParams) field() builder.Field {
	return p.data
}

func (p avatarWithPrismaUserSetParams) getQuery() builder.Query {
	return p.query
}

func (p avatarWithPrismaUserSetParams) avatarModel() {}

func (p avatarWithPrismaUserSetParams) userField() {}

type avatarWithPrismaUserEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p avatarWithPrismaUserEqualsParams) field() builder.Field {
	return p.data
}

func (p avatarWithPrismaUserEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p avatarWithPrismaUserEqualsParams) avatarModel() {}

func (p avatarWithPrismaUserEqualsParams) userField() {}

func (avatarWithPrismaUserSetParams) settable()  {}
func (avatarWithPrismaUserEqualsParams) equals() {}

type avatarWithPrismaUserEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p avatarWithPrismaUserEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p avatarWithPrismaUserEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p avatarWithPrismaUserEqualsParamsUnique) avatarModel() {}
func (p avatarWithPrismaUserEqualsParamsUnique) userField()   {}

func (avatarWithPrismaUserEqualsParamsUnique) unique() {}
func (avatarWithPrismaUserEqualsParamsUnique) equals() {}

type iAvatarWithPrismaUserIDEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	avatarModel()
	userIDField()
}

type avatarWithPrismaUserIDSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p avatarWithPrismaUserIDSetParams) field() builder.Field {
	return p.data
}

func (p avatarWithPrismaUserIDSetParams) getQuery() builder.Query {
	return p.query
}

func (p avatarWithPrismaUserIDSetParams) avatarModel() {}

func (p avatarWithPrismaUserIDSetParams) userIDField() {}

type avatarWithPrismaUserIDEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p avatarWithPrismaUserIDEqualsParams) field() builder.Field {
	return p.data
}

func (p avatarWithPrismaUserIDEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p avatarWithPrismaUserIDEqualsParams) avatarModel() {}

func (p avatarWithPrismaUserIDEqualsParams) userIDField() {}

func (avatarWithPrismaUserIDSetParams) settable()  {}
func (avatarWithPrismaUserIDEqualsParams) equals() {}

type avatarWithPrismaUserIDEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p avatarWithPrismaUserIDEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p avatarWithPrismaUserIDEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p avatarWithPrismaUserIDEqualsParamsUnique) avatarModel() {}
func (p avatarWithPrismaUserIDEqualsParamsUnique) userIDField() {}

func (avatarWithPrismaUserIDEqualsParamsUnique) unique() {}
func (avatarWithPrismaUserIDEqualsParamsUnique) equals() {}

type iAvatarWithPrismaRaidAttackEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	avatarModel()
	raidAttackField()
}

type avatarWithPrismaRaidAttackSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p avatarWithPrismaRaidAttackSetParams) field() builder.Field {
	return p.data
}

func (p avatarWithPrismaRaidAttackSetParams) getQuery() builder.Query {
	return p.query
}

func (p avatarWithPrismaRaidAttackSetParams) avatarModel() {}

func (p avatarWithPrismaRaidAttackSetParams) raidAttackField() {}

type avatarWithPrismaRaidAttackEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p avatarWithPrismaRaidAttackEqualsParams) field() builder.Field {
	return p.data
}

func (p avatarWithPrismaRaidAttackEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p avatarWithPrismaRaidAttackEqualsParams) avatarModel() {}

func (p avatarWithPrismaRaidAttackEqualsParams) raidAttackField() {}

func (avatarWithPrismaRaidAttackSetParams) settable()  {}
func (avatarWithPrismaRaidAttackEqualsParams) equals() {}

type avatarWithPrismaRaidAttackEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p avatarWithPrismaRaidAttackEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p avatarWithPrismaRaidAttackEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p avatarWithPrismaRaidAttackEqualsParamsUnique) avatarModel()     {}
func (p avatarWithPrismaRaidAttackEqualsParamsUnique) raidAttackField() {}

func (avatarWithPrismaRaidAttackEqualsParamsUnique) unique() {}
func (avatarWithPrismaRaidAttackEqualsParamsUnique) equals() {}

type iAvatarWithPrismaAvatarsOnRaidsEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	avatarModel()
	avatarsOnRaidsField()
}

type avatarWithPrismaAvatarsOnRaidsSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p avatarWithPrismaAvatarsOnRaidsSetParams) field() builder.Field {
	return p.data
}

func (p avatarWithPrismaAvatarsOnRaidsSetParams) getQuery() builder.Query {
	return p.query
}

func (p avatarWithPrismaAvatarsOnRaidsSetParams) avatarModel() {}

func (p avatarWithPrismaAvatarsOnRaidsSetParams) avatarsOnRaidsField() {}

type avatarWithPrismaAvatarsOnRaidsEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p avatarWithPrismaAvatarsOnRaidsEqualsParams) field() builder.Field {
	return p.data
}

func (p avatarWithPrismaAvatarsOnRaidsEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p avatarWithPrismaAvatarsOnRaidsEqualsParams) avatarModel() {}

func (p avatarWithPrismaAvatarsOnRaidsEqualsParams) avatarsOnRaidsField() {}

func (avatarWithPrismaAvatarsOnRaidsSetParams) settable()  {}
func (avatarWithPrismaAvatarsOnRaidsEqualsParams) equals() {}

type avatarWithPrismaAvatarsOnRaidsEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p avatarWithPrismaAvatarsOnRaidsEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p avatarWithPrismaAvatarsOnRaidsEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p avatarWithPrismaAvatarsOnRaidsEqualsParamsUnique) avatarModel()         {}
func (p avatarWithPrismaAvatarsOnRaidsEqualsParamsUnique) avatarsOnRaidsField() {}

func (avatarWithPrismaAvatarsOnRaidsEqualsParamsUnique) unique() {}
func (avatarWithPrismaAvatarsOnRaidsEqualsParamsUnique) equals() {}

type raidActions struct {
	// client holds the prisma client
	client *PrismaClient
}

var raidOutput = []builder.Output{
	{Name: "id"},
	{Name: "createdAt"},
	{Name: "deletedAt"},
	{Name: "updatedAt"},
	{Name: "startTime"},
	{Name: "endTime"},
	{Name: "completionProgress"},
	{Name: "active"},
	{Name: "playerLimit"},
}

type iRaidRelationWith interface {
	getQuery() builder.Query
	with()
	raidRelation()
}

type iRaidParams interface {
	field() builder.Field
	getQuery() builder.Query
	raidModel()
}

type raidParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidParams) field() builder.Field {
	return p.data
}

func (p raidParams) getQuery() builder.Query {
	return p.query
}

func (p raidParams) raidModel() {}

type iRaidOrderByParams interface {
	field() builder.Field
	getQuery() builder.Query
	raidModel()
}

type raidOrderByParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidOrderByParams) field() builder.Field {
	return p.data
}

func (p raidOrderByParams) getQuery() builder.Query {
	return p.query
}

func (p raidOrderByParams) raidModel() {}

type iRaidCursorParams interface {
	field() builder.Field
	getQuery() builder.Query
	raidModel()
	isCursor()
}

type raidCursorParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidCursorParams) field() builder.Field {
	return p.data
}

func (p raidCursorParams) isCursor() {}

func (p raidCursorParams) getQuery() builder.Query {
	return p.query
}

func (p raidCursorParams) raidModel() {}

type iRaidParamsUnique interface {
	field() builder.Field
	getQuery() builder.Query
	unique()
	raidModel()
}

type raidParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p raidParamsUnique) raidModel() {}

func (raidParamsUnique) unique() {}

func (p raidParamsUnique) field() builder.Field {
	return p.data
}

func (p raidParamsUnique) getQuery() builder.Query {
	return p.query
}

type iRaidEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	raidModel()
}

type raidEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidEqualsParams) raidModel() {}

func (raidEqualsParams) equals() {}

func (p raidEqualsParams) field() builder.Field {
	return p.data
}

func (p raidEqualsParams) getQuery() builder.Query {
	return p.query
}

type iRaidEqualsParamsUnique interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	unique()
	raidModel()
}

type raidEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p raidEqualsParamsUnique) raidModel() {}

func (raidEqualsParamsUnique) unique() {}
func (raidEqualsParamsUnique) equals() {}

func (p raidEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p raidEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

type iRaidSetParams interface {
	field() builder.Field
	settable()
}

type raidSetParams struct {
	data builder.Field
}

func (raidSetParams) settable() {}

func (p raidSetParams) field() builder.Field {
	return p.data
}

type iRaidWithPrismaIDEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	raidModel()
	idField()
}

type raidWithPrismaIDSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidWithPrismaIDSetParams) field() builder.Field {
	return p.data
}

func (p raidWithPrismaIDSetParams) getQuery() builder.Query {
	return p.query
}

func (p raidWithPrismaIDSetParams) raidModel() {}

func (p raidWithPrismaIDSetParams) idField() {}

type raidWithPrismaIDEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidWithPrismaIDEqualsParams) field() builder.Field {
	return p.data
}

func (p raidWithPrismaIDEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p raidWithPrismaIDEqualsParams) raidModel() {}

func (p raidWithPrismaIDEqualsParams) idField() {}

func (raidWithPrismaIDSetParams) settable()  {}
func (raidWithPrismaIDEqualsParams) equals() {}

type raidWithPrismaIDEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p raidWithPrismaIDEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p raidWithPrismaIDEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p raidWithPrismaIDEqualsParamsUnique) raidModel() {}
func (p raidWithPrismaIDEqualsParamsUnique) idField()   {}

func (raidWithPrismaIDEqualsParamsUnique) unique() {}
func (raidWithPrismaIDEqualsParamsUnique) equals() {}

type iRaidWithPrismaCreatedAtEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	raidModel()
	createdAtField()
}

type raidWithPrismaCreatedAtSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidWithPrismaCreatedAtSetParams) field() builder.Field {
	return p.data
}

func (p raidWithPrismaCreatedAtSetParams) getQuery() builder.Query {
	return p.query
}

func (p raidWithPrismaCreatedAtSetParams) raidModel() {}

func (p raidWithPrismaCreatedAtSetParams) createdAtField() {}

type raidWithPrismaCreatedAtEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidWithPrismaCreatedAtEqualsParams) field() builder.Field {
	return p.data
}

func (p raidWithPrismaCreatedAtEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p raidWithPrismaCreatedAtEqualsParams) raidModel() {}

func (p raidWithPrismaCreatedAtEqualsParams) createdAtField() {}

func (raidWithPrismaCreatedAtSetParams) settable()  {}
func (raidWithPrismaCreatedAtEqualsParams) equals() {}

type raidWithPrismaCreatedAtEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p raidWithPrismaCreatedAtEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p raidWithPrismaCreatedAtEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p raidWithPrismaCreatedAtEqualsParamsUnique) raidModel()      {}
func (p raidWithPrismaCreatedAtEqualsParamsUnique) createdAtField() {}

func (raidWithPrismaCreatedAtEqualsParamsUnique) unique() {}
func (raidWithPrismaCreatedAtEqualsParamsUnique) equals() {}

type iRaidWithPrismaDeletedAtEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	raidModel()
	deletedAtField()
}

type raidWithPrismaDeletedAtSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidWithPrismaDeletedAtSetParams) field() builder.Field {
	return p.data
}

func (p raidWithPrismaDeletedAtSetParams) getQuery() builder.Query {
	return p.query
}

func (p raidWithPrismaDeletedAtSetParams) raidModel() {}

func (p raidWithPrismaDeletedAtSetParams) deletedAtField() {}

type raidWithPrismaDeletedAtEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidWithPrismaDeletedAtEqualsParams) field() builder.Field {
	return p.data
}

func (p raidWithPrismaDeletedAtEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p raidWithPrismaDeletedAtEqualsParams) raidModel() {}

func (p raidWithPrismaDeletedAtEqualsParams) deletedAtField() {}

func (raidWithPrismaDeletedAtSetParams) settable()  {}
func (raidWithPrismaDeletedAtEqualsParams) equals() {}

type raidWithPrismaDeletedAtEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p raidWithPrismaDeletedAtEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p raidWithPrismaDeletedAtEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p raidWithPrismaDeletedAtEqualsParamsUnique) raidModel()      {}
func (p raidWithPrismaDeletedAtEqualsParamsUnique) deletedAtField() {}

func (raidWithPrismaDeletedAtEqualsParamsUnique) unique() {}
func (raidWithPrismaDeletedAtEqualsParamsUnique) equals() {}

type iRaidWithPrismaUpdatedAtEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	raidModel()
	updatedAtField()
}

type raidWithPrismaUpdatedAtSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidWithPrismaUpdatedAtSetParams) field() builder.Field {
	return p.data
}

func (p raidWithPrismaUpdatedAtSetParams) getQuery() builder.Query {
	return p.query
}

func (p raidWithPrismaUpdatedAtSetParams) raidModel() {}

func (p raidWithPrismaUpdatedAtSetParams) updatedAtField() {}

type raidWithPrismaUpdatedAtEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidWithPrismaUpdatedAtEqualsParams) field() builder.Field {
	return p.data
}

func (p raidWithPrismaUpdatedAtEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p raidWithPrismaUpdatedAtEqualsParams) raidModel() {}

func (p raidWithPrismaUpdatedAtEqualsParams) updatedAtField() {}

func (raidWithPrismaUpdatedAtSetParams) settable()  {}
func (raidWithPrismaUpdatedAtEqualsParams) equals() {}

type raidWithPrismaUpdatedAtEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p raidWithPrismaUpdatedAtEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p raidWithPrismaUpdatedAtEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p raidWithPrismaUpdatedAtEqualsParamsUnique) raidModel()      {}
func (p raidWithPrismaUpdatedAtEqualsParamsUnique) updatedAtField() {}

func (raidWithPrismaUpdatedAtEqualsParamsUnique) unique() {}
func (raidWithPrismaUpdatedAtEqualsParamsUnique) equals() {}

type iRaidWithPrismaStartTimeEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	raidModel()
	startTimeField()
}

type raidWithPrismaStartTimeSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidWithPrismaStartTimeSetParams) field() builder.Field {
	return p.data
}

func (p raidWithPrismaStartTimeSetParams) getQuery() builder.Query {
	return p.query
}

func (p raidWithPrismaStartTimeSetParams) raidModel() {}

func (p raidWithPrismaStartTimeSetParams) startTimeField() {}

type raidWithPrismaStartTimeEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidWithPrismaStartTimeEqualsParams) field() builder.Field {
	return p.data
}

func (p raidWithPrismaStartTimeEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p raidWithPrismaStartTimeEqualsParams) raidModel() {}

func (p raidWithPrismaStartTimeEqualsParams) startTimeField() {}

func (raidWithPrismaStartTimeSetParams) settable()  {}
func (raidWithPrismaStartTimeEqualsParams) equals() {}

type raidWithPrismaStartTimeEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p raidWithPrismaStartTimeEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p raidWithPrismaStartTimeEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p raidWithPrismaStartTimeEqualsParamsUnique) raidModel()      {}
func (p raidWithPrismaStartTimeEqualsParamsUnique) startTimeField() {}

func (raidWithPrismaStartTimeEqualsParamsUnique) unique() {}
func (raidWithPrismaStartTimeEqualsParamsUnique) equals() {}

type iRaidWithPrismaEndTimeEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	raidModel()
	endTimeField()
}

type raidWithPrismaEndTimeSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidWithPrismaEndTimeSetParams) field() builder.Field {
	return p.data
}

func (p raidWithPrismaEndTimeSetParams) getQuery() builder.Query {
	return p.query
}

func (p raidWithPrismaEndTimeSetParams) raidModel() {}

func (p raidWithPrismaEndTimeSetParams) endTimeField() {}

type raidWithPrismaEndTimeEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidWithPrismaEndTimeEqualsParams) field() builder.Field {
	return p.data
}

func (p raidWithPrismaEndTimeEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p raidWithPrismaEndTimeEqualsParams) raidModel() {}

func (p raidWithPrismaEndTimeEqualsParams) endTimeField() {}

func (raidWithPrismaEndTimeSetParams) settable()  {}
func (raidWithPrismaEndTimeEqualsParams) equals() {}

type raidWithPrismaEndTimeEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p raidWithPrismaEndTimeEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p raidWithPrismaEndTimeEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p raidWithPrismaEndTimeEqualsParamsUnique) raidModel()    {}
func (p raidWithPrismaEndTimeEqualsParamsUnique) endTimeField() {}

func (raidWithPrismaEndTimeEqualsParamsUnique) unique() {}
func (raidWithPrismaEndTimeEqualsParamsUnique) equals() {}

type iRaidWithPrismaCompletionProgressEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	raidModel()
	completionProgressField()
}

type raidWithPrismaCompletionProgressSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidWithPrismaCompletionProgressSetParams) field() builder.Field {
	return p.data
}

func (p raidWithPrismaCompletionProgressSetParams) getQuery() builder.Query {
	return p.query
}

func (p raidWithPrismaCompletionProgressSetParams) raidModel() {}

func (p raidWithPrismaCompletionProgressSetParams) completionProgressField() {}

type raidWithPrismaCompletionProgressEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidWithPrismaCompletionProgressEqualsParams) field() builder.Field {
	return p.data
}

func (p raidWithPrismaCompletionProgressEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p raidWithPrismaCompletionProgressEqualsParams) raidModel() {}

func (p raidWithPrismaCompletionProgressEqualsParams) completionProgressField() {}

func (raidWithPrismaCompletionProgressSetParams) settable()  {}
func (raidWithPrismaCompletionProgressEqualsParams) equals() {}

type raidWithPrismaCompletionProgressEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p raidWithPrismaCompletionProgressEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p raidWithPrismaCompletionProgressEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p raidWithPrismaCompletionProgressEqualsParamsUnique) raidModel()               {}
func (p raidWithPrismaCompletionProgressEqualsParamsUnique) completionProgressField() {}

func (raidWithPrismaCompletionProgressEqualsParamsUnique) unique() {}
func (raidWithPrismaCompletionProgressEqualsParamsUnique) equals() {}

type iRaidWithPrismaActiveEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	raidModel()
	activeField()
}

type raidWithPrismaActiveSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidWithPrismaActiveSetParams) field() builder.Field {
	return p.data
}

func (p raidWithPrismaActiveSetParams) getQuery() builder.Query {
	return p.query
}

func (p raidWithPrismaActiveSetParams) raidModel() {}

func (p raidWithPrismaActiveSetParams) activeField() {}

type raidWithPrismaActiveEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidWithPrismaActiveEqualsParams) field() builder.Field {
	return p.data
}

func (p raidWithPrismaActiveEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p raidWithPrismaActiveEqualsParams) raidModel() {}

func (p raidWithPrismaActiveEqualsParams) activeField() {}

func (raidWithPrismaActiveSetParams) settable()  {}
func (raidWithPrismaActiveEqualsParams) equals() {}

type raidWithPrismaActiveEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p raidWithPrismaActiveEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p raidWithPrismaActiveEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p raidWithPrismaActiveEqualsParamsUnique) raidModel()   {}
func (p raidWithPrismaActiveEqualsParamsUnique) activeField() {}

func (raidWithPrismaActiveEqualsParamsUnique) unique() {}
func (raidWithPrismaActiveEqualsParamsUnique) equals() {}

type iRaidWithPrismaPlayerLimitEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	raidModel()
	playerLimitField()
}

type raidWithPrismaPlayerLimitSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidWithPrismaPlayerLimitSetParams) field() builder.Field {
	return p.data
}

func (p raidWithPrismaPlayerLimitSetParams) getQuery() builder.Query {
	return p.query
}

func (p raidWithPrismaPlayerLimitSetParams) raidModel() {}

func (p raidWithPrismaPlayerLimitSetParams) playerLimitField() {}

type raidWithPrismaPlayerLimitEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidWithPrismaPlayerLimitEqualsParams) field() builder.Field {
	return p.data
}

func (p raidWithPrismaPlayerLimitEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p raidWithPrismaPlayerLimitEqualsParams) raidModel() {}

func (p raidWithPrismaPlayerLimitEqualsParams) playerLimitField() {}

func (raidWithPrismaPlayerLimitSetParams) settable()  {}
func (raidWithPrismaPlayerLimitEqualsParams) equals() {}

type raidWithPrismaPlayerLimitEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p raidWithPrismaPlayerLimitEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p raidWithPrismaPlayerLimitEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p raidWithPrismaPlayerLimitEqualsParamsUnique) raidModel()        {}
func (p raidWithPrismaPlayerLimitEqualsParamsUnique) playerLimitField() {}

func (raidWithPrismaPlayerLimitEqualsParamsUnique) unique() {}
func (raidWithPrismaPlayerLimitEqualsParamsUnique) equals() {}

type iRaidWithPrismaRaidAttackEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	raidModel()
	raidAttackField()
}

type raidWithPrismaRaidAttackSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidWithPrismaRaidAttackSetParams) field() builder.Field {
	return p.data
}

func (p raidWithPrismaRaidAttackSetParams) getQuery() builder.Query {
	return p.query
}

func (p raidWithPrismaRaidAttackSetParams) raidModel() {}

func (p raidWithPrismaRaidAttackSetParams) raidAttackField() {}

type raidWithPrismaRaidAttackEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidWithPrismaRaidAttackEqualsParams) field() builder.Field {
	return p.data
}

func (p raidWithPrismaRaidAttackEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p raidWithPrismaRaidAttackEqualsParams) raidModel() {}

func (p raidWithPrismaRaidAttackEqualsParams) raidAttackField() {}

func (raidWithPrismaRaidAttackSetParams) settable()  {}
func (raidWithPrismaRaidAttackEqualsParams) equals() {}

type raidWithPrismaRaidAttackEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p raidWithPrismaRaidAttackEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p raidWithPrismaRaidAttackEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p raidWithPrismaRaidAttackEqualsParamsUnique) raidModel()       {}
func (p raidWithPrismaRaidAttackEqualsParamsUnique) raidAttackField() {}

func (raidWithPrismaRaidAttackEqualsParamsUnique) unique() {}
func (raidWithPrismaRaidAttackEqualsParamsUnique) equals() {}

type iRaidWithPrismaAvatarsOnRaidsEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	raidModel()
	avatarsOnRaidsField()
}

type raidWithPrismaAvatarsOnRaidsSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidWithPrismaAvatarsOnRaidsSetParams) field() builder.Field {
	return p.data
}

func (p raidWithPrismaAvatarsOnRaidsSetParams) getQuery() builder.Query {
	return p.query
}

func (p raidWithPrismaAvatarsOnRaidsSetParams) raidModel() {}

func (p raidWithPrismaAvatarsOnRaidsSetParams) avatarsOnRaidsField() {}

type raidWithPrismaAvatarsOnRaidsEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidWithPrismaAvatarsOnRaidsEqualsParams) field() builder.Field {
	return p.data
}

func (p raidWithPrismaAvatarsOnRaidsEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p raidWithPrismaAvatarsOnRaidsEqualsParams) raidModel() {}

func (p raidWithPrismaAvatarsOnRaidsEqualsParams) avatarsOnRaidsField() {}

func (raidWithPrismaAvatarsOnRaidsSetParams) settable()  {}
func (raidWithPrismaAvatarsOnRaidsEqualsParams) equals() {}

type raidWithPrismaAvatarsOnRaidsEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p raidWithPrismaAvatarsOnRaidsEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p raidWithPrismaAvatarsOnRaidsEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p raidWithPrismaAvatarsOnRaidsEqualsParamsUnique) raidModel()           {}
func (p raidWithPrismaAvatarsOnRaidsEqualsParamsUnique) avatarsOnRaidsField() {}

func (raidWithPrismaAvatarsOnRaidsEqualsParamsUnique) unique() {}
func (raidWithPrismaAvatarsOnRaidsEqualsParamsUnique) equals() {}

type iRaidWithPrismaRaidBossesOnRaidsEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	raidModel()
	raidBossesOnRaidsField()
}

type raidWithPrismaRaidBossesOnRaidsSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidWithPrismaRaidBossesOnRaidsSetParams) field() builder.Field {
	return p.data
}

func (p raidWithPrismaRaidBossesOnRaidsSetParams) getQuery() builder.Query {
	return p.query
}

func (p raidWithPrismaRaidBossesOnRaidsSetParams) raidModel() {}

func (p raidWithPrismaRaidBossesOnRaidsSetParams) raidBossesOnRaidsField() {}

type raidWithPrismaRaidBossesOnRaidsEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidWithPrismaRaidBossesOnRaidsEqualsParams) field() builder.Field {
	return p.data
}

func (p raidWithPrismaRaidBossesOnRaidsEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p raidWithPrismaRaidBossesOnRaidsEqualsParams) raidModel() {}

func (p raidWithPrismaRaidBossesOnRaidsEqualsParams) raidBossesOnRaidsField() {}

func (raidWithPrismaRaidBossesOnRaidsSetParams) settable()  {}
func (raidWithPrismaRaidBossesOnRaidsEqualsParams) equals() {}

type raidWithPrismaRaidBossesOnRaidsEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p raidWithPrismaRaidBossesOnRaidsEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p raidWithPrismaRaidBossesOnRaidsEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p raidWithPrismaRaidBossesOnRaidsEqualsParamsUnique) raidModel()              {}
func (p raidWithPrismaRaidBossesOnRaidsEqualsParamsUnique) raidBossesOnRaidsField() {}

func (raidWithPrismaRaidBossesOnRaidsEqualsParamsUnique) unique() {}
func (raidWithPrismaRaidBossesOnRaidsEqualsParamsUnique) equals() {}

type raidBossActions struct {
	// client holds the prisma client
	client *PrismaClient
}

var raidBossOutput = []builder.Output{
	{Name: "id"},
	{Name: "createdAt"},
	{Name: "deletedAt"},
	{Name: "updatedAt"},
	{Name: "name"},
	{Name: "image"},
}

type iRaidBossRelationWith interface {
	getQuery() builder.Query
	with()
	raidBossRelation()
}

type iRaidBossParams interface {
	field() builder.Field
	getQuery() builder.Query
	raidBossModel()
}

type raidBossParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossParams) field() builder.Field {
	return p.data
}

func (p raidBossParams) getQuery() builder.Query {
	return p.query
}

func (p raidBossParams) raidBossModel() {}

type iRaidBossOrderByParams interface {
	field() builder.Field
	getQuery() builder.Query
	raidBossModel()
}

type raidBossOrderByParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossOrderByParams) field() builder.Field {
	return p.data
}

func (p raidBossOrderByParams) getQuery() builder.Query {
	return p.query
}

func (p raidBossOrderByParams) raidBossModel() {}

type iRaidBossCursorParams interface {
	field() builder.Field
	getQuery() builder.Query
	raidBossModel()
	isCursor()
}

type raidBossCursorParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossCursorParams) field() builder.Field {
	return p.data
}

func (p raidBossCursorParams) isCursor() {}

func (p raidBossCursorParams) getQuery() builder.Query {
	return p.query
}

func (p raidBossCursorParams) raidBossModel() {}

type iRaidBossParamsUnique interface {
	field() builder.Field
	getQuery() builder.Query
	unique()
	raidBossModel()
}

type raidBossParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossParamsUnique) raidBossModel() {}

func (raidBossParamsUnique) unique() {}

func (p raidBossParamsUnique) field() builder.Field {
	return p.data
}

func (p raidBossParamsUnique) getQuery() builder.Query {
	return p.query
}

type iRaidBossEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	raidBossModel()
}

type raidBossEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossEqualsParams) raidBossModel() {}

func (raidBossEqualsParams) equals() {}

func (p raidBossEqualsParams) field() builder.Field {
	return p.data
}

func (p raidBossEqualsParams) getQuery() builder.Query {
	return p.query
}

type iRaidBossEqualsParamsUnique interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	unique()
	raidBossModel()
}

type raidBossEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossEqualsParamsUnique) raidBossModel() {}

func (raidBossEqualsParamsUnique) unique() {}
func (raidBossEqualsParamsUnique) equals() {}

func (p raidBossEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p raidBossEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

type iRaidBossSetParams interface {
	field() builder.Field
	settable()
}

type raidBossSetParams struct {
	data builder.Field
}

func (raidBossSetParams) settable() {}

func (p raidBossSetParams) field() builder.Field {
	return p.data
}

type iRaidBossWithPrismaIDEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	raidBossModel()
	idField()
}

type raidBossWithPrismaIDSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossWithPrismaIDSetParams) field() builder.Field {
	return p.data
}

func (p raidBossWithPrismaIDSetParams) getQuery() builder.Query {
	return p.query
}

func (p raidBossWithPrismaIDSetParams) raidBossModel() {}

func (p raidBossWithPrismaIDSetParams) idField() {}

type raidBossWithPrismaIDEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossWithPrismaIDEqualsParams) field() builder.Field {
	return p.data
}

func (p raidBossWithPrismaIDEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p raidBossWithPrismaIDEqualsParams) raidBossModel() {}

func (p raidBossWithPrismaIDEqualsParams) idField() {}

func (raidBossWithPrismaIDSetParams) settable()  {}
func (raidBossWithPrismaIDEqualsParams) equals() {}

type raidBossWithPrismaIDEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossWithPrismaIDEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p raidBossWithPrismaIDEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p raidBossWithPrismaIDEqualsParamsUnique) raidBossModel() {}
func (p raidBossWithPrismaIDEqualsParamsUnique) idField()       {}

func (raidBossWithPrismaIDEqualsParamsUnique) unique() {}
func (raidBossWithPrismaIDEqualsParamsUnique) equals() {}

type iRaidBossWithPrismaCreatedAtEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	raidBossModel()
	createdAtField()
}

type raidBossWithPrismaCreatedAtSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossWithPrismaCreatedAtSetParams) field() builder.Field {
	return p.data
}

func (p raidBossWithPrismaCreatedAtSetParams) getQuery() builder.Query {
	return p.query
}

func (p raidBossWithPrismaCreatedAtSetParams) raidBossModel() {}

func (p raidBossWithPrismaCreatedAtSetParams) createdAtField() {}

type raidBossWithPrismaCreatedAtEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossWithPrismaCreatedAtEqualsParams) field() builder.Field {
	return p.data
}

func (p raidBossWithPrismaCreatedAtEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p raidBossWithPrismaCreatedAtEqualsParams) raidBossModel() {}

func (p raidBossWithPrismaCreatedAtEqualsParams) createdAtField() {}

func (raidBossWithPrismaCreatedAtSetParams) settable()  {}
func (raidBossWithPrismaCreatedAtEqualsParams) equals() {}

type raidBossWithPrismaCreatedAtEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossWithPrismaCreatedAtEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p raidBossWithPrismaCreatedAtEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p raidBossWithPrismaCreatedAtEqualsParamsUnique) raidBossModel()  {}
func (p raidBossWithPrismaCreatedAtEqualsParamsUnique) createdAtField() {}

func (raidBossWithPrismaCreatedAtEqualsParamsUnique) unique() {}
func (raidBossWithPrismaCreatedAtEqualsParamsUnique) equals() {}

type iRaidBossWithPrismaDeletedAtEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	raidBossModel()
	deletedAtField()
}

type raidBossWithPrismaDeletedAtSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossWithPrismaDeletedAtSetParams) field() builder.Field {
	return p.data
}

func (p raidBossWithPrismaDeletedAtSetParams) getQuery() builder.Query {
	return p.query
}

func (p raidBossWithPrismaDeletedAtSetParams) raidBossModel() {}

func (p raidBossWithPrismaDeletedAtSetParams) deletedAtField() {}

type raidBossWithPrismaDeletedAtEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossWithPrismaDeletedAtEqualsParams) field() builder.Field {
	return p.data
}

func (p raidBossWithPrismaDeletedAtEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p raidBossWithPrismaDeletedAtEqualsParams) raidBossModel() {}

func (p raidBossWithPrismaDeletedAtEqualsParams) deletedAtField() {}

func (raidBossWithPrismaDeletedAtSetParams) settable()  {}
func (raidBossWithPrismaDeletedAtEqualsParams) equals() {}

type raidBossWithPrismaDeletedAtEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossWithPrismaDeletedAtEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p raidBossWithPrismaDeletedAtEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p raidBossWithPrismaDeletedAtEqualsParamsUnique) raidBossModel()  {}
func (p raidBossWithPrismaDeletedAtEqualsParamsUnique) deletedAtField() {}

func (raidBossWithPrismaDeletedAtEqualsParamsUnique) unique() {}
func (raidBossWithPrismaDeletedAtEqualsParamsUnique) equals() {}

type iRaidBossWithPrismaUpdatedAtEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	raidBossModel()
	updatedAtField()
}

type raidBossWithPrismaUpdatedAtSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossWithPrismaUpdatedAtSetParams) field() builder.Field {
	return p.data
}

func (p raidBossWithPrismaUpdatedAtSetParams) getQuery() builder.Query {
	return p.query
}

func (p raidBossWithPrismaUpdatedAtSetParams) raidBossModel() {}

func (p raidBossWithPrismaUpdatedAtSetParams) updatedAtField() {}

type raidBossWithPrismaUpdatedAtEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossWithPrismaUpdatedAtEqualsParams) field() builder.Field {
	return p.data
}

func (p raidBossWithPrismaUpdatedAtEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p raidBossWithPrismaUpdatedAtEqualsParams) raidBossModel() {}

func (p raidBossWithPrismaUpdatedAtEqualsParams) updatedAtField() {}

func (raidBossWithPrismaUpdatedAtSetParams) settable()  {}
func (raidBossWithPrismaUpdatedAtEqualsParams) equals() {}

type raidBossWithPrismaUpdatedAtEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossWithPrismaUpdatedAtEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p raidBossWithPrismaUpdatedAtEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p raidBossWithPrismaUpdatedAtEqualsParamsUnique) raidBossModel()  {}
func (p raidBossWithPrismaUpdatedAtEqualsParamsUnique) updatedAtField() {}

func (raidBossWithPrismaUpdatedAtEqualsParamsUnique) unique() {}
func (raidBossWithPrismaUpdatedAtEqualsParamsUnique) equals() {}

type iRaidBossWithPrismaNameEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	raidBossModel()
	nameField()
}

type raidBossWithPrismaNameSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossWithPrismaNameSetParams) field() builder.Field {
	return p.data
}

func (p raidBossWithPrismaNameSetParams) getQuery() builder.Query {
	return p.query
}

func (p raidBossWithPrismaNameSetParams) raidBossModel() {}

func (p raidBossWithPrismaNameSetParams) nameField() {}

type raidBossWithPrismaNameEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossWithPrismaNameEqualsParams) field() builder.Field {
	return p.data
}

func (p raidBossWithPrismaNameEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p raidBossWithPrismaNameEqualsParams) raidBossModel() {}

func (p raidBossWithPrismaNameEqualsParams) nameField() {}

func (raidBossWithPrismaNameSetParams) settable()  {}
func (raidBossWithPrismaNameEqualsParams) equals() {}

type raidBossWithPrismaNameEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossWithPrismaNameEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p raidBossWithPrismaNameEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p raidBossWithPrismaNameEqualsParamsUnique) raidBossModel() {}
func (p raidBossWithPrismaNameEqualsParamsUnique) nameField()     {}

func (raidBossWithPrismaNameEqualsParamsUnique) unique() {}
func (raidBossWithPrismaNameEqualsParamsUnique) equals() {}

type iRaidBossWithPrismaImageEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	raidBossModel()
	imageField()
}

type raidBossWithPrismaImageSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossWithPrismaImageSetParams) field() builder.Field {
	return p.data
}

func (p raidBossWithPrismaImageSetParams) getQuery() builder.Query {
	return p.query
}

func (p raidBossWithPrismaImageSetParams) raidBossModel() {}

func (p raidBossWithPrismaImageSetParams) imageField() {}

type raidBossWithPrismaImageEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossWithPrismaImageEqualsParams) field() builder.Field {
	return p.data
}

func (p raidBossWithPrismaImageEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p raidBossWithPrismaImageEqualsParams) raidBossModel() {}

func (p raidBossWithPrismaImageEqualsParams) imageField() {}

func (raidBossWithPrismaImageSetParams) settable()  {}
func (raidBossWithPrismaImageEqualsParams) equals() {}

type raidBossWithPrismaImageEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossWithPrismaImageEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p raidBossWithPrismaImageEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p raidBossWithPrismaImageEqualsParamsUnique) raidBossModel() {}
func (p raidBossWithPrismaImageEqualsParamsUnique) imageField()    {}

func (raidBossWithPrismaImageEqualsParamsUnique) unique() {}
func (raidBossWithPrismaImageEqualsParamsUnique) equals() {}

type iRaidBossWithPrismaRaidBossesOnRaidsEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	raidBossModel()
	raidBossesOnRaidsField()
}

type raidBossWithPrismaRaidBossesOnRaidsSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossWithPrismaRaidBossesOnRaidsSetParams) field() builder.Field {
	return p.data
}

func (p raidBossWithPrismaRaidBossesOnRaidsSetParams) getQuery() builder.Query {
	return p.query
}

func (p raidBossWithPrismaRaidBossesOnRaidsSetParams) raidBossModel() {}

func (p raidBossWithPrismaRaidBossesOnRaidsSetParams) raidBossesOnRaidsField() {}

type raidBossWithPrismaRaidBossesOnRaidsEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossWithPrismaRaidBossesOnRaidsEqualsParams) field() builder.Field {
	return p.data
}

func (p raidBossWithPrismaRaidBossesOnRaidsEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p raidBossWithPrismaRaidBossesOnRaidsEqualsParams) raidBossModel() {}

func (p raidBossWithPrismaRaidBossesOnRaidsEqualsParams) raidBossesOnRaidsField() {}

func (raidBossWithPrismaRaidBossesOnRaidsSetParams) settable()  {}
func (raidBossWithPrismaRaidBossesOnRaidsEqualsParams) equals() {}

type raidBossWithPrismaRaidBossesOnRaidsEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossWithPrismaRaidBossesOnRaidsEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p raidBossWithPrismaRaidBossesOnRaidsEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p raidBossWithPrismaRaidBossesOnRaidsEqualsParamsUnique) raidBossModel()          {}
func (p raidBossWithPrismaRaidBossesOnRaidsEqualsParamsUnique) raidBossesOnRaidsField() {}

func (raidBossWithPrismaRaidBossesOnRaidsEqualsParamsUnique) unique() {}
func (raidBossWithPrismaRaidBossesOnRaidsEqualsParamsUnique) equals() {}

type iRaidBossWithPrismaRaidAttackEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	raidBossModel()
	raidAttackField()
}

type raidBossWithPrismaRaidAttackSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossWithPrismaRaidAttackSetParams) field() builder.Field {
	return p.data
}

func (p raidBossWithPrismaRaidAttackSetParams) getQuery() builder.Query {
	return p.query
}

func (p raidBossWithPrismaRaidAttackSetParams) raidBossModel() {}

func (p raidBossWithPrismaRaidAttackSetParams) raidAttackField() {}

type raidBossWithPrismaRaidAttackEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossWithPrismaRaidAttackEqualsParams) field() builder.Field {
	return p.data
}

func (p raidBossWithPrismaRaidAttackEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p raidBossWithPrismaRaidAttackEqualsParams) raidBossModel() {}

func (p raidBossWithPrismaRaidAttackEqualsParams) raidAttackField() {}

func (raidBossWithPrismaRaidAttackSetParams) settable()  {}
func (raidBossWithPrismaRaidAttackEqualsParams) equals() {}

type raidBossWithPrismaRaidAttackEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossWithPrismaRaidAttackEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p raidBossWithPrismaRaidAttackEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p raidBossWithPrismaRaidAttackEqualsParamsUnique) raidBossModel()   {}
func (p raidBossWithPrismaRaidAttackEqualsParamsUnique) raidAttackField() {}

func (raidBossWithPrismaRaidAttackEqualsParamsUnique) unique() {}
func (raidBossWithPrismaRaidAttackEqualsParamsUnique) equals() {}

type raidAttackActions struct {
	// client holds the prisma client
	client *PrismaClient
}

var raidAttackOutput = []builder.Output{
	{Name: "createdAt"},
	{Name: "deletedAt"},
	{Name: "updatedAt"},
	{Name: "raidId"},
	{Name: "avatarId"},
	{Name: "raidBossId"},
}

type iRaidAttackRelationWith interface {
	getQuery() builder.Query
	with()
	raidAttackRelation()
}

type iRaidAttackParams interface {
	field() builder.Field
	getQuery() builder.Query
	raidAttackModel()
}

type raidAttackParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidAttackParams) field() builder.Field {
	return p.data
}

func (p raidAttackParams) getQuery() builder.Query {
	return p.query
}

func (p raidAttackParams) raidAttackModel() {}

type iRaidAttackOrderByParams interface {
	field() builder.Field
	getQuery() builder.Query
	raidAttackModel()
}

type raidAttackOrderByParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidAttackOrderByParams) field() builder.Field {
	return p.data
}

func (p raidAttackOrderByParams) getQuery() builder.Query {
	return p.query
}

func (p raidAttackOrderByParams) raidAttackModel() {}

type iRaidAttackCursorParams interface {
	field() builder.Field
	getQuery() builder.Query
	raidAttackModel()
	isCursor()
}

type raidAttackCursorParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidAttackCursorParams) field() builder.Field {
	return p.data
}

func (p raidAttackCursorParams) isCursor() {}

func (p raidAttackCursorParams) getQuery() builder.Query {
	return p.query
}

func (p raidAttackCursorParams) raidAttackModel() {}

type iRaidAttackParamsUnique interface {
	field() builder.Field
	getQuery() builder.Query
	unique()
	raidAttackModel()
}

type raidAttackParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p raidAttackParamsUnique) raidAttackModel() {}

func (raidAttackParamsUnique) unique() {}

func (p raidAttackParamsUnique) field() builder.Field {
	return p.data
}

func (p raidAttackParamsUnique) getQuery() builder.Query {
	return p.query
}

type iRaidAttackEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	raidAttackModel()
}

type raidAttackEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidAttackEqualsParams) raidAttackModel() {}

func (raidAttackEqualsParams) equals() {}

func (p raidAttackEqualsParams) field() builder.Field {
	return p.data
}

func (p raidAttackEqualsParams) getQuery() builder.Query {
	return p.query
}

type iRaidAttackEqualsParamsUnique interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	unique()
	raidAttackModel()
}

type raidAttackEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p raidAttackEqualsParamsUnique) raidAttackModel() {}

func (raidAttackEqualsParamsUnique) unique() {}
func (raidAttackEqualsParamsUnique) equals() {}

func (p raidAttackEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p raidAttackEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

type iRaidAttackSetParams interface {
	field() builder.Field
	settable()
}

type raidAttackSetParams struct {
	data builder.Field
}

func (raidAttackSetParams) settable() {}

func (p raidAttackSetParams) field() builder.Field {
	return p.data
}

type iRaidAttackWithPrismaCreatedAtEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	raidAttackModel()
	createdAtField()
}

type raidAttackWithPrismaCreatedAtSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidAttackWithPrismaCreatedAtSetParams) field() builder.Field {
	return p.data
}

func (p raidAttackWithPrismaCreatedAtSetParams) getQuery() builder.Query {
	return p.query
}

func (p raidAttackWithPrismaCreatedAtSetParams) raidAttackModel() {}

func (p raidAttackWithPrismaCreatedAtSetParams) createdAtField() {}

type raidAttackWithPrismaCreatedAtEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidAttackWithPrismaCreatedAtEqualsParams) field() builder.Field {
	return p.data
}

func (p raidAttackWithPrismaCreatedAtEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p raidAttackWithPrismaCreatedAtEqualsParams) raidAttackModel() {}

func (p raidAttackWithPrismaCreatedAtEqualsParams) createdAtField() {}

func (raidAttackWithPrismaCreatedAtSetParams) settable()  {}
func (raidAttackWithPrismaCreatedAtEqualsParams) equals() {}

type raidAttackWithPrismaCreatedAtEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p raidAttackWithPrismaCreatedAtEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p raidAttackWithPrismaCreatedAtEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p raidAttackWithPrismaCreatedAtEqualsParamsUnique) raidAttackModel() {}
func (p raidAttackWithPrismaCreatedAtEqualsParamsUnique) createdAtField()  {}

func (raidAttackWithPrismaCreatedAtEqualsParamsUnique) unique() {}
func (raidAttackWithPrismaCreatedAtEqualsParamsUnique) equals() {}

type iRaidAttackWithPrismaDeletedAtEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	raidAttackModel()
	deletedAtField()
}

type raidAttackWithPrismaDeletedAtSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidAttackWithPrismaDeletedAtSetParams) field() builder.Field {
	return p.data
}

func (p raidAttackWithPrismaDeletedAtSetParams) getQuery() builder.Query {
	return p.query
}

func (p raidAttackWithPrismaDeletedAtSetParams) raidAttackModel() {}

func (p raidAttackWithPrismaDeletedAtSetParams) deletedAtField() {}

type raidAttackWithPrismaDeletedAtEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidAttackWithPrismaDeletedAtEqualsParams) field() builder.Field {
	return p.data
}

func (p raidAttackWithPrismaDeletedAtEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p raidAttackWithPrismaDeletedAtEqualsParams) raidAttackModel() {}

func (p raidAttackWithPrismaDeletedAtEqualsParams) deletedAtField() {}

func (raidAttackWithPrismaDeletedAtSetParams) settable()  {}
func (raidAttackWithPrismaDeletedAtEqualsParams) equals() {}

type raidAttackWithPrismaDeletedAtEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p raidAttackWithPrismaDeletedAtEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p raidAttackWithPrismaDeletedAtEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p raidAttackWithPrismaDeletedAtEqualsParamsUnique) raidAttackModel() {}
func (p raidAttackWithPrismaDeletedAtEqualsParamsUnique) deletedAtField()  {}

func (raidAttackWithPrismaDeletedAtEqualsParamsUnique) unique() {}
func (raidAttackWithPrismaDeletedAtEqualsParamsUnique) equals() {}

type iRaidAttackWithPrismaUpdatedAtEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	raidAttackModel()
	updatedAtField()
}

type raidAttackWithPrismaUpdatedAtSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidAttackWithPrismaUpdatedAtSetParams) field() builder.Field {
	return p.data
}

func (p raidAttackWithPrismaUpdatedAtSetParams) getQuery() builder.Query {
	return p.query
}

func (p raidAttackWithPrismaUpdatedAtSetParams) raidAttackModel() {}

func (p raidAttackWithPrismaUpdatedAtSetParams) updatedAtField() {}

type raidAttackWithPrismaUpdatedAtEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidAttackWithPrismaUpdatedAtEqualsParams) field() builder.Field {
	return p.data
}

func (p raidAttackWithPrismaUpdatedAtEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p raidAttackWithPrismaUpdatedAtEqualsParams) raidAttackModel() {}

func (p raidAttackWithPrismaUpdatedAtEqualsParams) updatedAtField() {}

func (raidAttackWithPrismaUpdatedAtSetParams) settable()  {}
func (raidAttackWithPrismaUpdatedAtEqualsParams) equals() {}

type raidAttackWithPrismaUpdatedAtEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p raidAttackWithPrismaUpdatedAtEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p raidAttackWithPrismaUpdatedAtEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p raidAttackWithPrismaUpdatedAtEqualsParamsUnique) raidAttackModel() {}
func (p raidAttackWithPrismaUpdatedAtEqualsParamsUnique) updatedAtField()  {}

func (raidAttackWithPrismaUpdatedAtEqualsParamsUnique) unique() {}
func (raidAttackWithPrismaUpdatedAtEqualsParamsUnique) equals() {}

type iRaidAttackWithPrismaRaidEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	raidAttackModel()
	raidField()
}

type raidAttackWithPrismaRaidSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidAttackWithPrismaRaidSetParams) field() builder.Field {
	return p.data
}

func (p raidAttackWithPrismaRaidSetParams) getQuery() builder.Query {
	return p.query
}

func (p raidAttackWithPrismaRaidSetParams) raidAttackModel() {}

func (p raidAttackWithPrismaRaidSetParams) raidField() {}

type raidAttackWithPrismaRaidEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidAttackWithPrismaRaidEqualsParams) field() builder.Field {
	return p.data
}

func (p raidAttackWithPrismaRaidEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p raidAttackWithPrismaRaidEqualsParams) raidAttackModel() {}

func (p raidAttackWithPrismaRaidEqualsParams) raidField() {}

func (raidAttackWithPrismaRaidSetParams) settable()  {}
func (raidAttackWithPrismaRaidEqualsParams) equals() {}

type raidAttackWithPrismaRaidEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p raidAttackWithPrismaRaidEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p raidAttackWithPrismaRaidEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p raidAttackWithPrismaRaidEqualsParamsUnique) raidAttackModel() {}
func (p raidAttackWithPrismaRaidEqualsParamsUnique) raidField()       {}

func (raidAttackWithPrismaRaidEqualsParamsUnique) unique() {}
func (raidAttackWithPrismaRaidEqualsParamsUnique) equals() {}

type iRaidAttackWithPrismaRaidIDEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	raidAttackModel()
	raidIDField()
}

type raidAttackWithPrismaRaidIDSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidAttackWithPrismaRaidIDSetParams) field() builder.Field {
	return p.data
}

func (p raidAttackWithPrismaRaidIDSetParams) getQuery() builder.Query {
	return p.query
}

func (p raidAttackWithPrismaRaidIDSetParams) raidAttackModel() {}

func (p raidAttackWithPrismaRaidIDSetParams) raidIDField() {}

type raidAttackWithPrismaRaidIDEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidAttackWithPrismaRaidIDEqualsParams) field() builder.Field {
	return p.data
}

func (p raidAttackWithPrismaRaidIDEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p raidAttackWithPrismaRaidIDEqualsParams) raidAttackModel() {}

func (p raidAttackWithPrismaRaidIDEqualsParams) raidIDField() {}

func (raidAttackWithPrismaRaidIDSetParams) settable()  {}
func (raidAttackWithPrismaRaidIDEqualsParams) equals() {}

type raidAttackWithPrismaRaidIDEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p raidAttackWithPrismaRaidIDEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p raidAttackWithPrismaRaidIDEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p raidAttackWithPrismaRaidIDEqualsParamsUnique) raidAttackModel() {}
func (p raidAttackWithPrismaRaidIDEqualsParamsUnique) raidIDField()     {}

func (raidAttackWithPrismaRaidIDEqualsParamsUnique) unique() {}
func (raidAttackWithPrismaRaidIDEqualsParamsUnique) equals() {}

type iRaidAttackWithPrismaAvatarEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	raidAttackModel()
	avatarField()
}

type raidAttackWithPrismaAvatarSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidAttackWithPrismaAvatarSetParams) field() builder.Field {
	return p.data
}

func (p raidAttackWithPrismaAvatarSetParams) getQuery() builder.Query {
	return p.query
}

func (p raidAttackWithPrismaAvatarSetParams) raidAttackModel() {}

func (p raidAttackWithPrismaAvatarSetParams) avatarField() {}

type raidAttackWithPrismaAvatarEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidAttackWithPrismaAvatarEqualsParams) field() builder.Field {
	return p.data
}

func (p raidAttackWithPrismaAvatarEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p raidAttackWithPrismaAvatarEqualsParams) raidAttackModel() {}

func (p raidAttackWithPrismaAvatarEqualsParams) avatarField() {}

func (raidAttackWithPrismaAvatarSetParams) settable()  {}
func (raidAttackWithPrismaAvatarEqualsParams) equals() {}

type raidAttackWithPrismaAvatarEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p raidAttackWithPrismaAvatarEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p raidAttackWithPrismaAvatarEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p raidAttackWithPrismaAvatarEqualsParamsUnique) raidAttackModel() {}
func (p raidAttackWithPrismaAvatarEqualsParamsUnique) avatarField()     {}

func (raidAttackWithPrismaAvatarEqualsParamsUnique) unique() {}
func (raidAttackWithPrismaAvatarEqualsParamsUnique) equals() {}

type iRaidAttackWithPrismaAvatarIDEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	raidAttackModel()
	avatarIDField()
}

type raidAttackWithPrismaAvatarIDSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidAttackWithPrismaAvatarIDSetParams) field() builder.Field {
	return p.data
}

func (p raidAttackWithPrismaAvatarIDSetParams) getQuery() builder.Query {
	return p.query
}

func (p raidAttackWithPrismaAvatarIDSetParams) raidAttackModel() {}

func (p raidAttackWithPrismaAvatarIDSetParams) avatarIDField() {}

type raidAttackWithPrismaAvatarIDEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidAttackWithPrismaAvatarIDEqualsParams) field() builder.Field {
	return p.data
}

func (p raidAttackWithPrismaAvatarIDEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p raidAttackWithPrismaAvatarIDEqualsParams) raidAttackModel() {}

func (p raidAttackWithPrismaAvatarIDEqualsParams) avatarIDField() {}

func (raidAttackWithPrismaAvatarIDSetParams) settable()  {}
func (raidAttackWithPrismaAvatarIDEqualsParams) equals() {}

type raidAttackWithPrismaAvatarIDEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p raidAttackWithPrismaAvatarIDEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p raidAttackWithPrismaAvatarIDEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p raidAttackWithPrismaAvatarIDEqualsParamsUnique) raidAttackModel() {}
func (p raidAttackWithPrismaAvatarIDEqualsParamsUnique) avatarIDField()   {}

func (raidAttackWithPrismaAvatarIDEqualsParamsUnique) unique() {}
func (raidAttackWithPrismaAvatarIDEqualsParamsUnique) equals() {}

type iRaidAttackWithPrismaRaidBossEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	raidAttackModel()
	raidBossField()
}

type raidAttackWithPrismaRaidBossSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidAttackWithPrismaRaidBossSetParams) field() builder.Field {
	return p.data
}

func (p raidAttackWithPrismaRaidBossSetParams) getQuery() builder.Query {
	return p.query
}

func (p raidAttackWithPrismaRaidBossSetParams) raidAttackModel() {}

func (p raidAttackWithPrismaRaidBossSetParams) raidBossField() {}

type raidAttackWithPrismaRaidBossEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidAttackWithPrismaRaidBossEqualsParams) field() builder.Field {
	return p.data
}

func (p raidAttackWithPrismaRaidBossEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p raidAttackWithPrismaRaidBossEqualsParams) raidAttackModel() {}

func (p raidAttackWithPrismaRaidBossEqualsParams) raidBossField() {}

func (raidAttackWithPrismaRaidBossSetParams) settable()  {}
func (raidAttackWithPrismaRaidBossEqualsParams) equals() {}

type raidAttackWithPrismaRaidBossEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p raidAttackWithPrismaRaidBossEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p raidAttackWithPrismaRaidBossEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p raidAttackWithPrismaRaidBossEqualsParamsUnique) raidAttackModel() {}
func (p raidAttackWithPrismaRaidBossEqualsParamsUnique) raidBossField()   {}

func (raidAttackWithPrismaRaidBossEqualsParamsUnique) unique() {}
func (raidAttackWithPrismaRaidBossEqualsParamsUnique) equals() {}

type iRaidAttackWithPrismaRaidBossIDEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	raidAttackModel()
	raidBossIDField()
}

type raidAttackWithPrismaRaidBossIDSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidAttackWithPrismaRaidBossIDSetParams) field() builder.Field {
	return p.data
}

func (p raidAttackWithPrismaRaidBossIDSetParams) getQuery() builder.Query {
	return p.query
}

func (p raidAttackWithPrismaRaidBossIDSetParams) raidAttackModel() {}

func (p raidAttackWithPrismaRaidBossIDSetParams) raidBossIDField() {}

type raidAttackWithPrismaRaidBossIDEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidAttackWithPrismaRaidBossIDEqualsParams) field() builder.Field {
	return p.data
}

func (p raidAttackWithPrismaRaidBossIDEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p raidAttackWithPrismaRaidBossIDEqualsParams) raidAttackModel() {}

func (p raidAttackWithPrismaRaidBossIDEqualsParams) raidBossIDField() {}

func (raidAttackWithPrismaRaidBossIDSetParams) settable()  {}
func (raidAttackWithPrismaRaidBossIDEqualsParams) equals() {}

type raidAttackWithPrismaRaidBossIDEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p raidAttackWithPrismaRaidBossIDEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p raidAttackWithPrismaRaidBossIDEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p raidAttackWithPrismaRaidBossIDEqualsParamsUnique) raidAttackModel() {}
func (p raidAttackWithPrismaRaidBossIDEqualsParamsUnique) raidBossIDField() {}

func (raidAttackWithPrismaRaidBossIDEqualsParamsUnique) unique() {}
func (raidAttackWithPrismaRaidBossIDEqualsParamsUnique) equals() {}

type avatarsOnRaidsActions struct {
	// client holds the prisma client
	client *PrismaClient
}

var avatarsOnRaidsOutput = []builder.Output{
	{Name: "createdAt"},
	{Name: "deletedAt"},
	{Name: "updatedAt"},
	{Name: "raidId"},
	{Name: "avatarId"},
}

type iAvatarsOnRaidsRelationWith interface {
	getQuery() builder.Query
	with()
	avatarsOnRaidsRelation()
}

type iAvatarsOnRaidsParams interface {
	field() builder.Field
	getQuery() builder.Query
	avatarsOnRaidsModel()
}

type avatarsOnRaidsParams struct {
	data  builder.Field
	query builder.Query
}

func (p avatarsOnRaidsParams) field() builder.Field {
	return p.data
}

func (p avatarsOnRaidsParams) getQuery() builder.Query {
	return p.query
}

func (p avatarsOnRaidsParams) avatarsOnRaidsModel() {}

type iAvatarsOnRaidsOrderByParams interface {
	field() builder.Field
	getQuery() builder.Query
	avatarsOnRaidsModel()
}

type avatarsOnRaidsOrderByParams struct {
	data  builder.Field
	query builder.Query
}

func (p avatarsOnRaidsOrderByParams) field() builder.Field {
	return p.data
}

func (p avatarsOnRaidsOrderByParams) getQuery() builder.Query {
	return p.query
}

func (p avatarsOnRaidsOrderByParams) avatarsOnRaidsModel() {}

type iAvatarsOnRaidsCursorParams interface {
	field() builder.Field
	getQuery() builder.Query
	avatarsOnRaidsModel()
	isCursor()
}

type avatarsOnRaidsCursorParams struct {
	data  builder.Field
	query builder.Query
}

func (p avatarsOnRaidsCursorParams) field() builder.Field {
	return p.data
}

func (p avatarsOnRaidsCursorParams) isCursor() {}

func (p avatarsOnRaidsCursorParams) getQuery() builder.Query {
	return p.query
}

func (p avatarsOnRaidsCursorParams) avatarsOnRaidsModel() {}

type iAvatarsOnRaidsParamsUnique interface {
	field() builder.Field
	getQuery() builder.Query
	unique()
	avatarsOnRaidsModel()
}

type avatarsOnRaidsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p avatarsOnRaidsParamsUnique) avatarsOnRaidsModel() {}

func (avatarsOnRaidsParamsUnique) unique() {}

func (p avatarsOnRaidsParamsUnique) field() builder.Field {
	return p.data
}

func (p avatarsOnRaidsParamsUnique) getQuery() builder.Query {
	return p.query
}

type iAvatarsOnRaidsEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	avatarsOnRaidsModel()
}

type avatarsOnRaidsEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p avatarsOnRaidsEqualsParams) avatarsOnRaidsModel() {}

func (avatarsOnRaidsEqualsParams) equals() {}

func (p avatarsOnRaidsEqualsParams) field() builder.Field {
	return p.data
}

func (p avatarsOnRaidsEqualsParams) getQuery() builder.Query {
	return p.query
}

type iAvatarsOnRaidsEqualsParamsUnique interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	unique()
	avatarsOnRaidsModel()
}

type avatarsOnRaidsEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p avatarsOnRaidsEqualsParamsUnique) avatarsOnRaidsModel() {}

func (avatarsOnRaidsEqualsParamsUnique) unique() {}
func (avatarsOnRaidsEqualsParamsUnique) equals() {}

func (p avatarsOnRaidsEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p avatarsOnRaidsEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

type iAvatarsOnRaidsSetParams interface {
	field() builder.Field
	settable()
}

type avatarsOnRaidsSetParams struct {
	data builder.Field
}

func (avatarsOnRaidsSetParams) settable() {}

func (p avatarsOnRaidsSetParams) field() builder.Field {
	return p.data
}

type iAvatarsOnRaidsWithPrismaCreatedAtEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	avatarsOnRaidsModel()
	createdAtField()
}

type avatarsOnRaidsWithPrismaCreatedAtSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p avatarsOnRaidsWithPrismaCreatedAtSetParams) field() builder.Field {
	return p.data
}

func (p avatarsOnRaidsWithPrismaCreatedAtSetParams) getQuery() builder.Query {
	return p.query
}

func (p avatarsOnRaidsWithPrismaCreatedAtSetParams) avatarsOnRaidsModel() {}

func (p avatarsOnRaidsWithPrismaCreatedAtSetParams) createdAtField() {}

type avatarsOnRaidsWithPrismaCreatedAtEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p avatarsOnRaidsWithPrismaCreatedAtEqualsParams) field() builder.Field {
	return p.data
}

func (p avatarsOnRaidsWithPrismaCreatedAtEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p avatarsOnRaidsWithPrismaCreatedAtEqualsParams) avatarsOnRaidsModel() {}

func (p avatarsOnRaidsWithPrismaCreatedAtEqualsParams) createdAtField() {}

func (avatarsOnRaidsWithPrismaCreatedAtSetParams) settable()  {}
func (avatarsOnRaidsWithPrismaCreatedAtEqualsParams) equals() {}

type avatarsOnRaidsWithPrismaCreatedAtEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p avatarsOnRaidsWithPrismaCreatedAtEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p avatarsOnRaidsWithPrismaCreatedAtEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p avatarsOnRaidsWithPrismaCreatedAtEqualsParamsUnique) avatarsOnRaidsModel() {}
func (p avatarsOnRaidsWithPrismaCreatedAtEqualsParamsUnique) createdAtField()      {}

func (avatarsOnRaidsWithPrismaCreatedAtEqualsParamsUnique) unique() {}
func (avatarsOnRaidsWithPrismaCreatedAtEqualsParamsUnique) equals() {}

type iAvatarsOnRaidsWithPrismaDeletedAtEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	avatarsOnRaidsModel()
	deletedAtField()
}

type avatarsOnRaidsWithPrismaDeletedAtSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p avatarsOnRaidsWithPrismaDeletedAtSetParams) field() builder.Field {
	return p.data
}

func (p avatarsOnRaidsWithPrismaDeletedAtSetParams) getQuery() builder.Query {
	return p.query
}

func (p avatarsOnRaidsWithPrismaDeletedAtSetParams) avatarsOnRaidsModel() {}

func (p avatarsOnRaidsWithPrismaDeletedAtSetParams) deletedAtField() {}

type avatarsOnRaidsWithPrismaDeletedAtEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p avatarsOnRaidsWithPrismaDeletedAtEqualsParams) field() builder.Field {
	return p.data
}

func (p avatarsOnRaidsWithPrismaDeletedAtEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p avatarsOnRaidsWithPrismaDeletedAtEqualsParams) avatarsOnRaidsModel() {}

func (p avatarsOnRaidsWithPrismaDeletedAtEqualsParams) deletedAtField() {}

func (avatarsOnRaidsWithPrismaDeletedAtSetParams) settable()  {}
func (avatarsOnRaidsWithPrismaDeletedAtEqualsParams) equals() {}

type avatarsOnRaidsWithPrismaDeletedAtEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p avatarsOnRaidsWithPrismaDeletedAtEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p avatarsOnRaidsWithPrismaDeletedAtEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p avatarsOnRaidsWithPrismaDeletedAtEqualsParamsUnique) avatarsOnRaidsModel() {}
func (p avatarsOnRaidsWithPrismaDeletedAtEqualsParamsUnique) deletedAtField()      {}

func (avatarsOnRaidsWithPrismaDeletedAtEqualsParamsUnique) unique() {}
func (avatarsOnRaidsWithPrismaDeletedAtEqualsParamsUnique) equals() {}

type iAvatarsOnRaidsWithPrismaUpdatedAtEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	avatarsOnRaidsModel()
	updatedAtField()
}

type avatarsOnRaidsWithPrismaUpdatedAtSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p avatarsOnRaidsWithPrismaUpdatedAtSetParams) field() builder.Field {
	return p.data
}

func (p avatarsOnRaidsWithPrismaUpdatedAtSetParams) getQuery() builder.Query {
	return p.query
}

func (p avatarsOnRaidsWithPrismaUpdatedAtSetParams) avatarsOnRaidsModel() {}

func (p avatarsOnRaidsWithPrismaUpdatedAtSetParams) updatedAtField() {}

type avatarsOnRaidsWithPrismaUpdatedAtEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p avatarsOnRaidsWithPrismaUpdatedAtEqualsParams) field() builder.Field {
	return p.data
}

func (p avatarsOnRaidsWithPrismaUpdatedAtEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p avatarsOnRaidsWithPrismaUpdatedAtEqualsParams) avatarsOnRaidsModel() {}

func (p avatarsOnRaidsWithPrismaUpdatedAtEqualsParams) updatedAtField() {}

func (avatarsOnRaidsWithPrismaUpdatedAtSetParams) settable()  {}
func (avatarsOnRaidsWithPrismaUpdatedAtEqualsParams) equals() {}

type avatarsOnRaidsWithPrismaUpdatedAtEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p avatarsOnRaidsWithPrismaUpdatedAtEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p avatarsOnRaidsWithPrismaUpdatedAtEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p avatarsOnRaidsWithPrismaUpdatedAtEqualsParamsUnique) avatarsOnRaidsModel() {}
func (p avatarsOnRaidsWithPrismaUpdatedAtEqualsParamsUnique) updatedAtField()      {}

func (avatarsOnRaidsWithPrismaUpdatedAtEqualsParamsUnique) unique() {}
func (avatarsOnRaidsWithPrismaUpdatedAtEqualsParamsUnique) equals() {}

type iAvatarsOnRaidsWithPrismaRaidEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	avatarsOnRaidsModel()
	raidField()
}

type avatarsOnRaidsWithPrismaRaidSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p avatarsOnRaidsWithPrismaRaidSetParams) field() builder.Field {
	return p.data
}

func (p avatarsOnRaidsWithPrismaRaidSetParams) getQuery() builder.Query {
	return p.query
}

func (p avatarsOnRaidsWithPrismaRaidSetParams) avatarsOnRaidsModel() {}

func (p avatarsOnRaidsWithPrismaRaidSetParams) raidField() {}

type avatarsOnRaidsWithPrismaRaidEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p avatarsOnRaidsWithPrismaRaidEqualsParams) field() builder.Field {
	return p.data
}

func (p avatarsOnRaidsWithPrismaRaidEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p avatarsOnRaidsWithPrismaRaidEqualsParams) avatarsOnRaidsModel() {}

func (p avatarsOnRaidsWithPrismaRaidEqualsParams) raidField() {}

func (avatarsOnRaidsWithPrismaRaidSetParams) settable()  {}
func (avatarsOnRaidsWithPrismaRaidEqualsParams) equals() {}

type avatarsOnRaidsWithPrismaRaidEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p avatarsOnRaidsWithPrismaRaidEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p avatarsOnRaidsWithPrismaRaidEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p avatarsOnRaidsWithPrismaRaidEqualsParamsUnique) avatarsOnRaidsModel() {}
func (p avatarsOnRaidsWithPrismaRaidEqualsParamsUnique) raidField()           {}

func (avatarsOnRaidsWithPrismaRaidEqualsParamsUnique) unique() {}
func (avatarsOnRaidsWithPrismaRaidEqualsParamsUnique) equals() {}

type iAvatarsOnRaidsWithPrismaRaidIDEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	avatarsOnRaidsModel()
	raidIDField()
}

type avatarsOnRaidsWithPrismaRaidIDSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p avatarsOnRaidsWithPrismaRaidIDSetParams) field() builder.Field {
	return p.data
}

func (p avatarsOnRaidsWithPrismaRaidIDSetParams) getQuery() builder.Query {
	return p.query
}

func (p avatarsOnRaidsWithPrismaRaidIDSetParams) avatarsOnRaidsModel() {}

func (p avatarsOnRaidsWithPrismaRaidIDSetParams) raidIDField() {}

type avatarsOnRaidsWithPrismaRaidIDEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p avatarsOnRaidsWithPrismaRaidIDEqualsParams) field() builder.Field {
	return p.data
}

func (p avatarsOnRaidsWithPrismaRaidIDEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p avatarsOnRaidsWithPrismaRaidIDEqualsParams) avatarsOnRaidsModel() {}

func (p avatarsOnRaidsWithPrismaRaidIDEqualsParams) raidIDField() {}

func (avatarsOnRaidsWithPrismaRaidIDSetParams) settable()  {}
func (avatarsOnRaidsWithPrismaRaidIDEqualsParams) equals() {}

type avatarsOnRaidsWithPrismaRaidIDEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p avatarsOnRaidsWithPrismaRaidIDEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p avatarsOnRaidsWithPrismaRaidIDEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p avatarsOnRaidsWithPrismaRaidIDEqualsParamsUnique) avatarsOnRaidsModel() {}
func (p avatarsOnRaidsWithPrismaRaidIDEqualsParamsUnique) raidIDField()         {}

func (avatarsOnRaidsWithPrismaRaidIDEqualsParamsUnique) unique() {}
func (avatarsOnRaidsWithPrismaRaidIDEqualsParamsUnique) equals() {}

type iAvatarsOnRaidsWithPrismaAvatarEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	avatarsOnRaidsModel()
	avatarField()
}

type avatarsOnRaidsWithPrismaAvatarSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p avatarsOnRaidsWithPrismaAvatarSetParams) field() builder.Field {
	return p.data
}

func (p avatarsOnRaidsWithPrismaAvatarSetParams) getQuery() builder.Query {
	return p.query
}

func (p avatarsOnRaidsWithPrismaAvatarSetParams) avatarsOnRaidsModel() {}

func (p avatarsOnRaidsWithPrismaAvatarSetParams) avatarField() {}

type avatarsOnRaidsWithPrismaAvatarEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p avatarsOnRaidsWithPrismaAvatarEqualsParams) field() builder.Field {
	return p.data
}

func (p avatarsOnRaidsWithPrismaAvatarEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p avatarsOnRaidsWithPrismaAvatarEqualsParams) avatarsOnRaidsModel() {}

func (p avatarsOnRaidsWithPrismaAvatarEqualsParams) avatarField() {}

func (avatarsOnRaidsWithPrismaAvatarSetParams) settable()  {}
func (avatarsOnRaidsWithPrismaAvatarEqualsParams) equals() {}

type avatarsOnRaidsWithPrismaAvatarEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p avatarsOnRaidsWithPrismaAvatarEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p avatarsOnRaidsWithPrismaAvatarEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p avatarsOnRaidsWithPrismaAvatarEqualsParamsUnique) avatarsOnRaidsModel() {}
func (p avatarsOnRaidsWithPrismaAvatarEqualsParamsUnique) avatarField()         {}

func (avatarsOnRaidsWithPrismaAvatarEqualsParamsUnique) unique() {}
func (avatarsOnRaidsWithPrismaAvatarEqualsParamsUnique) equals() {}

type iAvatarsOnRaidsWithPrismaAvatarIDEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	avatarsOnRaidsModel()
	avatarIDField()
}

type avatarsOnRaidsWithPrismaAvatarIDSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p avatarsOnRaidsWithPrismaAvatarIDSetParams) field() builder.Field {
	return p.data
}

func (p avatarsOnRaidsWithPrismaAvatarIDSetParams) getQuery() builder.Query {
	return p.query
}

func (p avatarsOnRaidsWithPrismaAvatarIDSetParams) avatarsOnRaidsModel() {}

func (p avatarsOnRaidsWithPrismaAvatarIDSetParams) avatarIDField() {}

type avatarsOnRaidsWithPrismaAvatarIDEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p avatarsOnRaidsWithPrismaAvatarIDEqualsParams) field() builder.Field {
	return p.data
}

func (p avatarsOnRaidsWithPrismaAvatarIDEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p avatarsOnRaidsWithPrismaAvatarIDEqualsParams) avatarsOnRaidsModel() {}

func (p avatarsOnRaidsWithPrismaAvatarIDEqualsParams) avatarIDField() {}

func (avatarsOnRaidsWithPrismaAvatarIDSetParams) settable()  {}
func (avatarsOnRaidsWithPrismaAvatarIDEqualsParams) equals() {}

type avatarsOnRaidsWithPrismaAvatarIDEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p avatarsOnRaidsWithPrismaAvatarIDEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p avatarsOnRaidsWithPrismaAvatarIDEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p avatarsOnRaidsWithPrismaAvatarIDEqualsParamsUnique) avatarsOnRaidsModel() {}
func (p avatarsOnRaidsWithPrismaAvatarIDEqualsParamsUnique) avatarIDField()       {}

func (avatarsOnRaidsWithPrismaAvatarIDEqualsParamsUnique) unique() {}
func (avatarsOnRaidsWithPrismaAvatarIDEqualsParamsUnique) equals() {}

type raidBossesOnRaidsActions struct {
	// client holds the prisma client
	client *PrismaClient
}

var raidBossesOnRaidsOutput = []builder.Output{
	{Name: "createdAt"},
	{Name: "deletedAt"},
	{Name: "updatedAt"},
	{Name: "raidId"},
	{Name: "raidBossId"},
}

type iRaidBossesOnRaidsRelationWith interface {
	getQuery() builder.Query
	with()
	raidBossesOnRaidsRelation()
}

type iRaidBossesOnRaidsParams interface {
	field() builder.Field
	getQuery() builder.Query
	raidBossesOnRaidsModel()
}

type raidBossesOnRaidsParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossesOnRaidsParams) field() builder.Field {
	return p.data
}

func (p raidBossesOnRaidsParams) getQuery() builder.Query {
	return p.query
}

func (p raidBossesOnRaidsParams) raidBossesOnRaidsModel() {}

type iRaidBossesOnRaidsOrderByParams interface {
	field() builder.Field
	getQuery() builder.Query
	raidBossesOnRaidsModel()
}

type raidBossesOnRaidsOrderByParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossesOnRaidsOrderByParams) field() builder.Field {
	return p.data
}

func (p raidBossesOnRaidsOrderByParams) getQuery() builder.Query {
	return p.query
}

func (p raidBossesOnRaidsOrderByParams) raidBossesOnRaidsModel() {}

type iRaidBossesOnRaidsCursorParams interface {
	field() builder.Field
	getQuery() builder.Query
	raidBossesOnRaidsModel()
	isCursor()
}

type raidBossesOnRaidsCursorParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossesOnRaidsCursorParams) field() builder.Field {
	return p.data
}

func (p raidBossesOnRaidsCursorParams) isCursor() {}

func (p raidBossesOnRaidsCursorParams) getQuery() builder.Query {
	return p.query
}

func (p raidBossesOnRaidsCursorParams) raidBossesOnRaidsModel() {}

type iRaidBossesOnRaidsParamsUnique interface {
	field() builder.Field
	getQuery() builder.Query
	unique()
	raidBossesOnRaidsModel()
}

type raidBossesOnRaidsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossesOnRaidsParamsUnique) raidBossesOnRaidsModel() {}

func (raidBossesOnRaidsParamsUnique) unique() {}

func (p raidBossesOnRaidsParamsUnique) field() builder.Field {
	return p.data
}

func (p raidBossesOnRaidsParamsUnique) getQuery() builder.Query {
	return p.query
}

type iRaidBossesOnRaidsEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	raidBossesOnRaidsModel()
}

type raidBossesOnRaidsEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossesOnRaidsEqualsParams) raidBossesOnRaidsModel() {}

func (raidBossesOnRaidsEqualsParams) equals() {}

func (p raidBossesOnRaidsEqualsParams) field() builder.Field {
	return p.data
}

func (p raidBossesOnRaidsEqualsParams) getQuery() builder.Query {
	return p.query
}

type iRaidBossesOnRaidsEqualsParamsUnique interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	unique()
	raidBossesOnRaidsModel()
}

type raidBossesOnRaidsEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossesOnRaidsEqualsParamsUnique) raidBossesOnRaidsModel() {}

func (raidBossesOnRaidsEqualsParamsUnique) unique() {}
func (raidBossesOnRaidsEqualsParamsUnique) equals() {}

func (p raidBossesOnRaidsEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p raidBossesOnRaidsEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

type iRaidBossesOnRaidsSetParams interface {
	field() builder.Field
	settable()
}

type raidBossesOnRaidsSetParams struct {
	data builder.Field
}

func (raidBossesOnRaidsSetParams) settable() {}

func (p raidBossesOnRaidsSetParams) field() builder.Field {
	return p.data
}

type iRaidBossesOnRaidsWithPrismaCreatedAtEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	raidBossesOnRaidsModel()
	createdAtField()
}

type raidBossesOnRaidsWithPrismaCreatedAtSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossesOnRaidsWithPrismaCreatedAtSetParams) field() builder.Field {
	return p.data
}

func (p raidBossesOnRaidsWithPrismaCreatedAtSetParams) getQuery() builder.Query {
	return p.query
}

func (p raidBossesOnRaidsWithPrismaCreatedAtSetParams) raidBossesOnRaidsModel() {}

func (p raidBossesOnRaidsWithPrismaCreatedAtSetParams) createdAtField() {}

type raidBossesOnRaidsWithPrismaCreatedAtEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossesOnRaidsWithPrismaCreatedAtEqualsParams) field() builder.Field {
	return p.data
}

func (p raidBossesOnRaidsWithPrismaCreatedAtEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p raidBossesOnRaidsWithPrismaCreatedAtEqualsParams) raidBossesOnRaidsModel() {}

func (p raidBossesOnRaidsWithPrismaCreatedAtEqualsParams) createdAtField() {}

func (raidBossesOnRaidsWithPrismaCreatedAtSetParams) settable()  {}
func (raidBossesOnRaidsWithPrismaCreatedAtEqualsParams) equals() {}

type raidBossesOnRaidsWithPrismaCreatedAtEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossesOnRaidsWithPrismaCreatedAtEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p raidBossesOnRaidsWithPrismaCreatedAtEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p raidBossesOnRaidsWithPrismaCreatedAtEqualsParamsUnique) raidBossesOnRaidsModel() {}
func (p raidBossesOnRaidsWithPrismaCreatedAtEqualsParamsUnique) createdAtField()         {}

func (raidBossesOnRaidsWithPrismaCreatedAtEqualsParamsUnique) unique() {}
func (raidBossesOnRaidsWithPrismaCreatedAtEqualsParamsUnique) equals() {}

type iRaidBossesOnRaidsWithPrismaDeletedAtEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	raidBossesOnRaidsModel()
	deletedAtField()
}

type raidBossesOnRaidsWithPrismaDeletedAtSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossesOnRaidsWithPrismaDeletedAtSetParams) field() builder.Field {
	return p.data
}

func (p raidBossesOnRaidsWithPrismaDeletedAtSetParams) getQuery() builder.Query {
	return p.query
}

func (p raidBossesOnRaidsWithPrismaDeletedAtSetParams) raidBossesOnRaidsModel() {}

func (p raidBossesOnRaidsWithPrismaDeletedAtSetParams) deletedAtField() {}

type raidBossesOnRaidsWithPrismaDeletedAtEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossesOnRaidsWithPrismaDeletedAtEqualsParams) field() builder.Field {
	return p.data
}

func (p raidBossesOnRaidsWithPrismaDeletedAtEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p raidBossesOnRaidsWithPrismaDeletedAtEqualsParams) raidBossesOnRaidsModel() {}

func (p raidBossesOnRaidsWithPrismaDeletedAtEqualsParams) deletedAtField() {}

func (raidBossesOnRaidsWithPrismaDeletedAtSetParams) settable()  {}
func (raidBossesOnRaidsWithPrismaDeletedAtEqualsParams) equals() {}

type raidBossesOnRaidsWithPrismaDeletedAtEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossesOnRaidsWithPrismaDeletedAtEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p raidBossesOnRaidsWithPrismaDeletedAtEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p raidBossesOnRaidsWithPrismaDeletedAtEqualsParamsUnique) raidBossesOnRaidsModel() {}
func (p raidBossesOnRaidsWithPrismaDeletedAtEqualsParamsUnique) deletedAtField()         {}

func (raidBossesOnRaidsWithPrismaDeletedAtEqualsParamsUnique) unique() {}
func (raidBossesOnRaidsWithPrismaDeletedAtEqualsParamsUnique) equals() {}

type iRaidBossesOnRaidsWithPrismaUpdatedAtEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	raidBossesOnRaidsModel()
	updatedAtField()
}

type raidBossesOnRaidsWithPrismaUpdatedAtSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossesOnRaidsWithPrismaUpdatedAtSetParams) field() builder.Field {
	return p.data
}

func (p raidBossesOnRaidsWithPrismaUpdatedAtSetParams) getQuery() builder.Query {
	return p.query
}

func (p raidBossesOnRaidsWithPrismaUpdatedAtSetParams) raidBossesOnRaidsModel() {}

func (p raidBossesOnRaidsWithPrismaUpdatedAtSetParams) updatedAtField() {}

type raidBossesOnRaidsWithPrismaUpdatedAtEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossesOnRaidsWithPrismaUpdatedAtEqualsParams) field() builder.Field {
	return p.data
}

func (p raidBossesOnRaidsWithPrismaUpdatedAtEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p raidBossesOnRaidsWithPrismaUpdatedAtEqualsParams) raidBossesOnRaidsModel() {}

func (p raidBossesOnRaidsWithPrismaUpdatedAtEqualsParams) updatedAtField() {}

func (raidBossesOnRaidsWithPrismaUpdatedAtSetParams) settable()  {}
func (raidBossesOnRaidsWithPrismaUpdatedAtEqualsParams) equals() {}

type raidBossesOnRaidsWithPrismaUpdatedAtEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossesOnRaidsWithPrismaUpdatedAtEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p raidBossesOnRaidsWithPrismaUpdatedAtEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p raidBossesOnRaidsWithPrismaUpdatedAtEqualsParamsUnique) raidBossesOnRaidsModel() {}
func (p raidBossesOnRaidsWithPrismaUpdatedAtEqualsParamsUnique) updatedAtField()         {}

func (raidBossesOnRaidsWithPrismaUpdatedAtEqualsParamsUnique) unique() {}
func (raidBossesOnRaidsWithPrismaUpdatedAtEqualsParamsUnique) equals() {}

type iRaidBossesOnRaidsWithPrismaRaidEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	raidBossesOnRaidsModel()
	raidField()
}

type raidBossesOnRaidsWithPrismaRaidSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossesOnRaidsWithPrismaRaidSetParams) field() builder.Field {
	return p.data
}

func (p raidBossesOnRaidsWithPrismaRaidSetParams) getQuery() builder.Query {
	return p.query
}

func (p raidBossesOnRaidsWithPrismaRaidSetParams) raidBossesOnRaidsModel() {}

func (p raidBossesOnRaidsWithPrismaRaidSetParams) raidField() {}

type raidBossesOnRaidsWithPrismaRaidEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossesOnRaidsWithPrismaRaidEqualsParams) field() builder.Field {
	return p.data
}

func (p raidBossesOnRaidsWithPrismaRaidEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p raidBossesOnRaidsWithPrismaRaidEqualsParams) raidBossesOnRaidsModel() {}

func (p raidBossesOnRaidsWithPrismaRaidEqualsParams) raidField() {}

func (raidBossesOnRaidsWithPrismaRaidSetParams) settable()  {}
func (raidBossesOnRaidsWithPrismaRaidEqualsParams) equals() {}

type raidBossesOnRaidsWithPrismaRaidEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossesOnRaidsWithPrismaRaidEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p raidBossesOnRaidsWithPrismaRaidEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p raidBossesOnRaidsWithPrismaRaidEqualsParamsUnique) raidBossesOnRaidsModel() {}
func (p raidBossesOnRaidsWithPrismaRaidEqualsParamsUnique) raidField()              {}

func (raidBossesOnRaidsWithPrismaRaidEqualsParamsUnique) unique() {}
func (raidBossesOnRaidsWithPrismaRaidEqualsParamsUnique) equals() {}

type iRaidBossesOnRaidsWithPrismaRaidIDEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	raidBossesOnRaidsModel()
	raidIDField()
}

type raidBossesOnRaidsWithPrismaRaidIDSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossesOnRaidsWithPrismaRaidIDSetParams) field() builder.Field {
	return p.data
}

func (p raidBossesOnRaidsWithPrismaRaidIDSetParams) getQuery() builder.Query {
	return p.query
}

func (p raidBossesOnRaidsWithPrismaRaidIDSetParams) raidBossesOnRaidsModel() {}

func (p raidBossesOnRaidsWithPrismaRaidIDSetParams) raidIDField() {}

type raidBossesOnRaidsWithPrismaRaidIDEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossesOnRaidsWithPrismaRaidIDEqualsParams) field() builder.Field {
	return p.data
}

func (p raidBossesOnRaidsWithPrismaRaidIDEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p raidBossesOnRaidsWithPrismaRaidIDEqualsParams) raidBossesOnRaidsModel() {}

func (p raidBossesOnRaidsWithPrismaRaidIDEqualsParams) raidIDField() {}

func (raidBossesOnRaidsWithPrismaRaidIDSetParams) settable()  {}
func (raidBossesOnRaidsWithPrismaRaidIDEqualsParams) equals() {}

type raidBossesOnRaidsWithPrismaRaidIDEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossesOnRaidsWithPrismaRaidIDEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p raidBossesOnRaidsWithPrismaRaidIDEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p raidBossesOnRaidsWithPrismaRaidIDEqualsParamsUnique) raidBossesOnRaidsModel() {}
func (p raidBossesOnRaidsWithPrismaRaidIDEqualsParamsUnique) raidIDField()            {}

func (raidBossesOnRaidsWithPrismaRaidIDEqualsParamsUnique) unique() {}
func (raidBossesOnRaidsWithPrismaRaidIDEqualsParamsUnique) equals() {}

type iRaidBossesOnRaidsWithPrismaRaidBossEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	raidBossesOnRaidsModel()
	raidBossField()
}

type raidBossesOnRaidsWithPrismaRaidBossSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossesOnRaidsWithPrismaRaidBossSetParams) field() builder.Field {
	return p.data
}

func (p raidBossesOnRaidsWithPrismaRaidBossSetParams) getQuery() builder.Query {
	return p.query
}

func (p raidBossesOnRaidsWithPrismaRaidBossSetParams) raidBossesOnRaidsModel() {}

func (p raidBossesOnRaidsWithPrismaRaidBossSetParams) raidBossField() {}

type raidBossesOnRaidsWithPrismaRaidBossEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossesOnRaidsWithPrismaRaidBossEqualsParams) field() builder.Field {
	return p.data
}

func (p raidBossesOnRaidsWithPrismaRaidBossEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p raidBossesOnRaidsWithPrismaRaidBossEqualsParams) raidBossesOnRaidsModel() {}

func (p raidBossesOnRaidsWithPrismaRaidBossEqualsParams) raidBossField() {}

func (raidBossesOnRaidsWithPrismaRaidBossSetParams) settable()  {}
func (raidBossesOnRaidsWithPrismaRaidBossEqualsParams) equals() {}

type raidBossesOnRaidsWithPrismaRaidBossEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossesOnRaidsWithPrismaRaidBossEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p raidBossesOnRaidsWithPrismaRaidBossEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p raidBossesOnRaidsWithPrismaRaidBossEqualsParamsUnique) raidBossesOnRaidsModel() {}
func (p raidBossesOnRaidsWithPrismaRaidBossEqualsParamsUnique) raidBossField()          {}

func (raidBossesOnRaidsWithPrismaRaidBossEqualsParamsUnique) unique() {}
func (raidBossesOnRaidsWithPrismaRaidBossEqualsParamsUnique) equals() {}

type iRaidBossesOnRaidsWithPrismaRaidBossIDEqualsParams interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	raidBossesOnRaidsModel()
	raidBossIDField()
}

type raidBossesOnRaidsWithPrismaRaidBossIDSetParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossesOnRaidsWithPrismaRaidBossIDSetParams) field() builder.Field {
	return p.data
}

func (p raidBossesOnRaidsWithPrismaRaidBossIDSetParams) getQuery() builder.Query {
	return p.query
}

func (p raidBossesOnRaidsWithPrismaRaidBossIDSetParams) raidBossesOnRaidsModel() {}

func (p raidBossesOnRaidsWithPrismaRaidBossIDSetParams) raidBossIDField() {}

type raidBossesOnRaidsWithPrismaRaidBossIDEqualsParams struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossesOnRaidsWithPrismaRaidBossIDEqualsParams) field() builder.Field {
	return p.data
}

func (p raidBossesOnRaidsWithPrismaRaidBossIDEqualsParams) getQuery() builder.Query {
	return p.query
}

func (p raidBossesOnRaidsWithPrismaRaidBossIDEqualsParams) raidBossesOnRaidsModel() {}

func (p raidBossesOnRaidsWithPrismaRaidBossIDEqualsParams) raidBossIDField() {}

func (raidBossesOnRaidsWithPrismaRaidBossIDSetParams) settable()  {}
func (raidBossesOnRaidsWithPrismaRaidBossIDEqualsParams) equals() {}

type raidBossesOnRaidsWithPrismaRaidBossIDEqualsParamsUnique struct {
	data  builder.Field
	query builder.Query
}

func (p raidBossesOnRaidsWithPrismaRaidBossIDEqualsParamsUnique) field() builder.Field {
	return p.data
}

func (p raidBossesOnRaidsWithPrismaRaidBossIDEqualsParamsUnique) getQuery() builder.Query {
	return p.query
}

func (p raidBossesOnRaidsWithPrismaRaidBossIDEqualsParamsUnique) raidBossesOnRaidsModel() {}
func (p raidBossesOnRaidsWithPrismaRaidBossIDEqualsParamsUnique) raidBossIDField()        {}

func (raidBossesOnRaidsWithPrismaRaidBossIDEqualsParamsUnique) unique() {}
func (raidBossesOnRaidsWithPrismaRaidBossIDEqualsParamsUnique) equals() {}

// --- template create.gotpl ---

// Creates a single user.
func (r userActions) CreateOne(
	_discordUserID userWithPrismaDiscordUserIDSetParams,
	optional ...userSetParams,
) userCreateOne {
	var v userCreateOne
	v.query = builder.NewQuery()
	v.query.Client = r.client

	v.query.Operation = "mutation"
	v.query.Method = "createOne"
	v.query.Model = "User"
	v.query.Outputs = userOutput

	var fields []builder.Field

	fields = append(fields, _discordUserID.data)

	for _, q := range optional {
		fields = append(fields, q.data)
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

func (r userCreateOne) With(params ...iUserRelationWith) userCreateOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

type userCreateOne struct {
	query builder.Query
}

func (r userCreateOne) Exec(ctx context.Context) (UserModel, error) {
	var v createOneUserResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return UserModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.CreateOneUser, err
}

// Creates a single user.
func (r avatarActions) CreateOne(
	_user avatarWithPrismaUserSetParams,
	optional ...avatarSetParams,
) avatarCreateOne {
	var v avatarCreateOne
	v.query = builder.NewQuery()
	v.query.Client = r.client

	v.query.Operation = "mutation"
	v.query.Method = "createOne"
	v.query.Model = "Avatar"
	v.query.Outputs = avatarOutput

	var fields []builder.Field

	fields = append(fields, _user.data)

	for _, q := range optional {
		fields = append(fields, q.data)
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

func (r avatarCreateOne) With(params ...iAvatarRelationWith) avatarCreateOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

type avatarCreateOne struct {
	query builder.Query
}

func (r avatarCreateOne) Exec(ctx context.Context) (AvatarModel, error) {
	var v createOneAvatarResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return AvatarModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.CreateOneAvatar, err
}

// Creates a single user.
func (r raidActions) CreateOne(

	optional ...raidSetParams,
) raidCreateOne {
	var v raidCreateOne
	v.query = builder.NewQuery()
	v.query.Client = r.client

	v.query.Operation = "mutation"
	v.query.Method = "createOne"
	v.query.Model = "Raid"
	v.query.Outputs = raidOutput

	var fields []builder.Field

	for _, q := range optional {
		fields = append(fields, q.data)
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

func (r raidCreateOne) With(params ...iRaidRelationWith) raidCreateOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

type raidCreateOne struct {
	query builder.Query
}

func (r raidCreateOne) Exec(ctx context.Context) (RaidModel, error) {
	var v createOneRaidResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return RaidModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.CreateOneRaid, err
}

// Creates a single user.
func (r raidBossActions) CreateOne(
	_name raidBossWithPrismaNameSetParams,
	optional ...raidBossSetParams,
) raidBossCreateOne {
	var v raidBossCreateOne
	v.query = builder.NewQuery()
	v.query.Client = r.client

	v.query.Operation = "mutation"
	v.query.Method = "createOne"
	v.query.Model = "RaidBoss"
	v.query.Outputs = raidBossOutput

	var fields []builder.Field

	fields = append(fields, _name.data)

	for _, q := range optional {
		fields = append(fields, q.data)
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

func (r raidBossCreateOne) With(params ...iRaidBossRelationWith) raidBossCreateOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

type raidBossCreateOne struct {
	query builder.Query
}

func (r raidBossCreateOne) Exec(ctx context.Context) (RaidBossModel, error) {
	var v createOneRaidBossResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return RaidBossModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.CreateOneRaidBoss, err
}

// Creates a single user.
func (r raidAttackActions) CreateOne(
	_raid raidAttackWithPrismaRaidSetParams, _avatar raidAttackWithPrismaAvatarSetParams, _raidBoss raidAttackWithPrismaRaidBossSetParams,
	optional ...raidAttackSetParams,
) raidAttackCreateOne {
	var v raidAttackCreateOne
	v.query = builder.NewQuery()
	v.query.Client = r.client

	v.query.Operation = "mutation"
	v.query.Method = "createOne"
	v.query.Model = "RaidAttack"
	v.query.Outputs = raidAttackOutput

	var fields []builder.Field

	fields = append(fields, _raid.data)

	fields = append(fields, _avatar.data)

	fields = append(fields, _raidBoss.data)

	for _, q := range optional {
		fields = append(fields, q.data)
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

func (r raidAttackCreateOne) With(params ...iRaidAttackRelationWith) raidAttackCreateOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

type raidAttackCreateOne struct {
	query builder.Query
}

func (r raidAttackCreateOne) Exec(ctx context.Context) (RaidAttackModel, error) {
	var v createOneRaidAttackResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return RaidAttackModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.CreateOneRaidAttack, err
}

// Creates a single user.
func (r avatarsOnRaidsActions) CreateOne(
	_raid avatarsOnRaidsWithPrismaRaidSetParams, _avatar avatarsOnRaidsWithPrismaAvatarSetParams,
	optional ...avatarsOnRaidsSetParams,
) avatarsOnRaidsCreateOne {
	var v avatarsOnRaidsCreateOne
	v.query = builder.NewQuery()
	v.query.Client = r.client

	v.query.Operation = "mutation"
	v.query.Method = "createOne"
	v.query.Model = "AvatarsOnRaids"
	v.query.Outputs = avatarsOnRaidsOutput

	var fields []builder.Field

	fields = append(fields, _raid.data)

	fields = append(fields, _avatar.data)

	for _, q := range optional {
		fields = append(fields, q.data)
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

func (r avatarsOnRaidsCreateOne) With(params ...iAvatarsOnRaidsRelationWith) avatarsOnRaidsCreateOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

type avatarsOnRaidsCreateOne struct {
	query builder.Query
}

func (r avatarsOnRaidsCreateOne) Exec(ctx context.Context) (AvatarsOnRaidsModel, error) {
	var v createOneAvatarsOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return AvatarsOnRaidsModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.CreateOneAvatarsOnRaids, err
}

// Creates a single user.
func (r raidBossesOnRaidsActions) CreateOne(
	_raid raidBossesOnRaidsWithPrismaRaidSetParams, _raidBoss raidBossesOnRaidsWithPrismaRaidBossSetParams,
	optional ...raidBossesOnRaidsSetParams,
) raidBossesOnRaidsCreateOne {
	var v raidBossesOnRaidsCreateOne
	v.query = builder.NewQuery()
	v.query.Client = r.client

	v.query.Operation = "mutation"
	v.query.Method = "createOne"
	v.query.Model = "RaidBossesOnRaids"
	v.query.Outputs = raidBossesOnRaidsOutput

	var fields []builder.Field

	fields = append(fields, _raid.data)

	fields = append(fields, _raidBoss.data)

	for _, q := range optional {
		fields = append(fields, q.data)
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

func (r raidBossesOnRaidsCreateOne) With(params ...iRaidBossesOnRaidsRelationWith) raidBossesOnRaidsCreateOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

type raidBossesOnRaidsCreateOne struct {
	query builder.Query
}

func (r raidBossesOnRaidsCreateOne) Exec(ctx context.Context) (RaidBossesOnRaidsModel, error) {
	var v createOneRaidBossesOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return RaidBossesOnRaidsModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.CreateOneRaidBossesOnRaids, err
}

// --- template find.gotpl ---

type userToAvatarFindOne struct {
	query builder.Query
}

func (r userToAvatarFindOne) getQuery() builder.Query {
	return r.query
}

func (r userToAvatarFindOne) with()         {}
func (r userToAvatarFindOne) userModel()    {}
func (r userToAvatarFindOne) userRelation() {}

func (r userToAvatarFindOne) With(params ...iAvatarRelationWith) userToAvatarFindOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userToAvatarFindOne) Exec(ctx context.Context) (
	UserModel,
	error,
) {
	var v findOneUserResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return UserModel{}, fmt.Errorf(first.Message)
	}

	if v.Data.FindOneUser == nil {
		return UserModel{}, ErrNotFound
	}

	return *v.Data.FindOneUser, err
}

func (r userToAvatarFindOne) Update(params ...iUserSetParams) userToAvatarUpdateOne {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "User"
	r.query.Outputs = userOutput

	var v userToAvatarUpdateOne
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type userToAvatarUpdateOne struct {
	query builder.Query
}

func (r userToAvatarUpdateOne) Exec(ctx context.Context) (UserModel, error) {
	var v updateOneUserResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return UserModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateOneUser, err
}

func (r userToAvatarFindOne) Delete() userToAvatarDeleteOne {
	var v userToAvatarDeleteOne
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "User"
	v.query.Outputs = userOutput
	return v
}

type userToAvatarDeleteOne struct {
	query builder.Query
}

func (r userToAvatarDeleteOne) Exec(ctx context.Context) (UserModel, error) {
	var v deleteOneUserResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return UserModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteOneUser, err
}

type userToAvatarFindMany struct {
	query builder.Query
}

func (r userToAvatarFindMany) getQuery() builder.Query {
	return r.query
}

func (r userToAvatarFindMany) with()         {}
func (r userToAvatarFindMany) userModel()    {}
func (r userToAvatarFindMany) userRelation() {}

func (r userToAvatarFindMany) With(params ...iAvatarRelationWith) userToAvatarFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userToAvatarFindMany) OrderBy(param iUserOrderByParams) userToAvatarFindMany {
	direction, _ := param.field().Value.(runtime.Direction)
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "orderBy",
		Value: runtime.Direction(param.field().Name + "_" + string(direction)),
	})
	return r
}

func (r userToAvatarFindMany) Skip(count int) userToAvatarFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r userToAvatarFindMany) Take(count int) userToAvatarFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r userToAvatarFindMany) Cursor(cursor iUserCursorParams) userToAvatarFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r userToAvatarFindMany) Exec(ctx context.Context) (
	[]UserModel,
	error,
) {
	var v findManyUserResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return []UserModel{}, fmt.Errorf(first.Message)
	}

	return v.Data.FindManyUser, err
}

func (r userToAvatarFindMany) Update(params ...iUserSetParams) userToAvatarUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "User"
	r.query.Outputs = countOutput

	var v userToAvatarUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type userToAvatarUpdateMany struct {
	query builder.Query
}

func (r userToAvatarUpdateMany) Exec(ctx context.Context) (int, error) {
	var v updateManyUserResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateManyUser.Count, err
}

func (r userToAvatarFindMany) Delete() userToAvatarDeleteMany {
	var v userToAvatarDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "User"
	v.query.Outputs = countOutput
	return v
}

type userToAvatarDeleteMany struct {
	query builder.Query
}

func (r userToAvatarDeleteMany) Exec(ctx context.Context) (int, error) {
	var v deleteManyUserResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteManyUser.Count, err
}

type userFindOne struct {
	query builder.Query
}

func (r userFindOne) getQuery() builder.Query {
	return r.query
}

func (r userFindOne) with()         {}
func (r userFindOne) userModel()    {}
func (r userFindOne) userRelation() {}

func (r userActions) FindOne(

	params iUserEqualsParamsUnique,
) userFindOne {
	var v userFindOne
	v.query = builder.NewQuery()
	v.query.Client = r.client

	v.query.Operation = "query"
	v.query.Method = "findOne"
	v.query.Model = "User"
	v.query.Outputs = userOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: []builder.Field{params.field()},
	})

	return v
}

func (r userFindOne) With(params ...iUserRelationWith) userFindOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userFindOne) Exec(ctx context.Context) (
	UserModel,
	error,
) {
	var v findOneUserResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return UserModel{}, fmt.Errorf(first.Message)
	}

	if v.Data.FindOneUser == nil {
		return UserModel{}, ErrNotFound
	}

	return *v.Data.FindOneUser, err
}

func (r userFindOne) Update(params ...iUserSetParams) userUpdateOne {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "User"
	r.query.Outputs = userOutput

	var v userUpdateOne
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type userUpdateOne struct {
	query builder.Query
}

func (r userUpdateOne) Exec(ctx context.Context) (UserModel, error) {
	var v updateOneUserResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return UserModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateOneUser, err
}

func (r userFindOne) Delete() userDeleteOne {
	var v userDeleteOne
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "User"
	v.query.Outputs = userOutput
	return v
}

type userDeleteOne struct {
	query builder.Query
}

func (r userDeleteOne) Exec(ctx context.Context) (UserModel, error) {
	var v deleteOneUserResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return UserModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteOneUser, err
}

type userFindMany struct {
	query builder.Query
}

func (r userFindMany) getQuery() builder.Query {
	return r.query
}

func (r userFindMany) with()         {}
func (r userFindMany) userModel()    {}
func (r userFindMany) userRelation() {}

func (r userActions) FindMany(

	params ...iUserParams,
) userFindMany {
	var v userFindMany
	v.query = builder.NewQuery()
	v.query.Client = r.client

	v.query.Operation = "query"
	v.query.Method = "findMany"
	v.query.Model = "User"
	v.query.Outputs = userOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r userFindMany) With(params ...iUserRelationWith) userFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userFindMany) OrderBy(param iUserOrderByParams) userFindMany {
	direction, _ := param.field().Value.(runtime.Direction)
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "orderBy",
		Value: runtime.Direction(param.field().Name + "_" + string(direction)),
	})
	return r
}

func (r userFindMany) Skip(count int) userFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r userFindMany) Take(count int) userFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r userFindMany) Cursor(cursor iUserCursorParams) userFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r userFindMany) Exec(ctx context.Context) (
	[]UserModel,
	error,
) {
	var v findManyUserResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return []UserModel{}, fmt.Errorf(first.Message)
	}

	return v.Data.FindManyUser, err
}

func (r userFindMany) Update(params ...iUserSetParams) userUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "User"
	r.query.Outputs = countOutput

	var v userUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type userUpdateMany struct {
	query builder.Query
}

func (r userUpdateMany) Exec(ctx context.Context) (int, error) {
	var v updateManyUserResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateManyUser.Count, err
}

func (r userFindMany) Delete() userDeleteMany {
	var v userDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "User"
	v.query.Outputs = countOutput
	return v
}

type userDeleteMany struct {
	query builder.Query
}

func (r userDeleteMany) Exec(ctx context.Context) (int, error) {
	var v deleteManyUserResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteManyUser.Count, err
}

type avatarToUserFindOne struct {
	query builder.Query
}

func (r avatarToUserFindOne) getQuery() builder.Query {
	return r.query
}

func (r avatarToUserFindOne) with()           {}
func (r avatarToUserFindOne) avatarModel()    {}
func (r avatarToUserFindOne) avatarRelation() {}

func (r avatarToUserFindOne) With(params ...iUserRelationWith) avatarToUserFindOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r avatarToUserFindOne) Exec(ctx context.Context) (
	AvatarModel,
	error,
) {
	var v findOneAvatarResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return AvatarModel{}, fmt.Errorf(first.Message)
	}

	if v.Data.FindOneAvatar == nil {
		return AvatarModel{}, ErrNotFound
	}

	return *v.Data.FindOneAvatar, err
}

func (r avatarToUserFindOne) Update(params ...iAvatarSetParams) avatarToUserUpdateOne {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Avatar"
	r.query.Outputs = avatarOutput

	var v avatarToUserUpdateOne
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type avatarToUserUpdateOne struct {
	query builder.Query
}

func (r avatarToUserUpdateOne) Exec(ctx context.Context) (AvatarModel, error) {
	var v updateOneAvatarResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return AvatarModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateOneAvatar, err
}

func (r avatarToUserFindOne) Delete() avatarToUserDeleteOne {
	var v avatarToUserDeleteOne
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Avatar"
	v.query.Outputs = avatarOutput
	return v
}

type avatarToUserDeleteOne struct {
	query builder.Query
}

func (r avatarToUserDeleteOne) Exec(ctx context.Context) (AvatarModel, error) {
	var v deleteOneAvatarResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return AvatarModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteOneAvatar, err
}

type avatarToUserFindMany struct {
	query builder.Query
}

func (r avatarToUserFindMany) getQuery() builder.Query {
	return r.query
}

func (r avatarToUserFindMany) with()           {}
func (r avatarToUserFindMany) avatarModel()    {}
func (r avatarToUserFindMany) avatarRelation() {}

func (r avatarToUserFindMany) With(params ...iUserRelationWith) avatarToUserFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r avatarToUserFindMany) OrderBy(param iAvatarOrderByParams) avatarToUserFindMany {
	direction, _ := param.field().Value.(runtime.Direction)
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "orderBy",
		Value: runtime.Direction(param.field().Name + "_" + string(direction)),
	})
	return r
}

func (r avatarToUserFindMany) Skip(count int) avatarToUserFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r avatarToUserFindMany) Take(count int) avatarToUserFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r avatarToUserFindMany) Cursor(cursor iAvatarCursorParams) avatarToUserFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r avatarToUserFindMany) Exec(ctx context.Context) (
	[]AvatarModel,
	error,
) {
	var v findManyAvatarResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return []AvatarModel{}, fmt.Errorf(first.Message)
	}

	return v.Data.FindManyAvatar, err
}

func (r avatarToUserFindMany) Update(params ...iAvatarSetParams) avatarToUserUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Avatar"
	r.query.Outputs = countOutput

	var v avatarToUserUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type avatarToUserUpdateMany struct {
	query builder.Query
}

func (r avatarToUserUpdateMany) Exec(ctx context.Context) (int, error) {
	var v updateManyAvatarResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateManyAvatar.Count, err
}

func (r avatarToUserFindMany) Delete() avatarToUserDeleteMany {
	var v avatarToUserDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Avatar"
	v.query.Outputs = countOutput
	return v
}

type avatarToUserDeleteMany struct {
	query builder.Query
}

func (r avatarToUserDeleteMany) Exec(ctx context.Context) (int, error) {
	var v deleteManyAvatarResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteManyAvatar.Count, err
}

type avatarToRaidAttackFindOne struct {
	query builder.Query
}

func (r avatarToRaidAttackFindOne) getQuery() builder.Query {
	return r.query
}

func (r avatarToRaidAttackFindOne) with()           {}
func (r avatarToRaidAttackFindOne) avatarModel()    {}
func (r avatarToRaidAttackFindOne) avatarRelation() {}

func (r avatarToRaidAttackFindOne) With(params ...iRaidAttackRelationWith) avatarToRaidAttackFindOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r avatarToRaidAttackFindOne) Exec(ctx context.Context) (
	AvatarModel,
	error,
) {
	var v findOneAvatarResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return AvatarModel{}, fmt.Errorf(first.Message)
	}

	if v.Data.FindOneAvatar == nil {
		return AvatarModel{}, ErrNotFound
	}

	return *v.Data.FindOneAvatar, err
}

func (r avatarToRaidAttackFindOne) Update(params ...iAvatarSetParams) avatarToRaidAttackUpdateOne {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Avatar"
	r.query.Outputs = avatarOutput

	var v avatarToRaidAttackUpdateOne
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type avatarToRaidAttackUpdateOne struct {
	query builder.Query
}

func (r avatarToRaidAttackUpdateOne) Exec(ctx context.Context) (AvatarModel, error) {
	var v updateOneAvatarResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return AvatarModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateOneAvatar, err
}

func (r avatarToRaidAttackFindOne) Delete() avatarToRaidAttackDeleteOne {
	var v avatarToRaidAttackDeleteOne
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Avatar"
	v.query.Outputs = avatarOutput
	return v
}

type avatarToRaidAttackDeleteOne struct {
	query builder.Query
}

func (r avatarToRaidAttackDeleteOne) Exec(ctx context.Context) (AvatarModel, error) {
	var v deleteOneAvatarResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return AvatarModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteOneAvatar, err
}

type avatarToRaidAttackFindMany struct {
	query builder.Query
}

func (r avatarToRaidAttackFindMany) getQuery() builder.Query {
	return r.query
}

func (r avatarToRaidAttackFindMany) with()           {}
func (r avatarToRaidAttackFindMany) avatarModel()    {}
func (r avatarToRaidAttackFindMany) avatarRelation() {}

func (r avatarToRaidAttackFindMany) With(params ...iRaidAttackRelationWith) avatarToRaidAttackFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r avatarToRaidAttackFindMany) OrderBy(param iAvatarOrderByParams) avatarToRaidAttackFindMany {
	direction, _ := param.field().Value.(runtime.Direction)
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "orderBy",
		Value: runtime.Direction(param.field().Name + "_" + string(direction)),
	})
	return r
}

func (r avatarToRaidAttackFindMany) Skip(count int) avatarToRaidAttackFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r avatarToRaidAttackFindMany) Take(count int) avatarToRaidAttackFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r avatarToRaidAttackFindMany) Cursor(cursor iAvatarCursorParams) avatarToRaidAttackFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r avatarToRaidAttackFindMany) Exec(ctx context.Context) (
	[]AvatarModel,
	error,
) {
	var v findManyAvatarResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return []AvatarModel{}, fmt.Errorf(first.Message)
	}

	return v.Data.FindManyAvatar, err
}

func (r avatarToRaidAttackFindMany) Update(params ...iAvatarSetParams) avatarToRaidAttackUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Avatar"
	r.query.Outputs = countOutput

	var v avatarToRaidAttackUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type avatarToRaidAttackUpdateMany struct {
	query builder.Query
}

func (r avatarToRaidAttackUpdateMany) Exec(ctx context.Context) (int, error) {
	var v updateManyAvatarResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateManyAvatar.Count, err
}

func (r avatarToRaidAttackFindMany) Delete() avatarToRaidAttackDeleteMany {
	var v avatarToRaidAttackDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Avatar"
	v.query.Outputs = countOutput
	return v
}

type avatarToRaidAttackDeleteMany struct {
	query builder.Query
}

func (r avatarToRaidAttackDeleteMany) Exec(ctx context.Context) (int, error) {
	var v deleteManyAvatarResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteManyAvatar.Count, err
}

type avatarToAvatarsOnRaidsFindOne struct {
	query builder.Query
}

func (r avatarToAvatarsOnRaidsFindOne) getQuery() builder.Query {
	return r.query
}

func (r avatarToAvatarsOnRaidsFindOne) with()           {}
func (r avatarToAvatarsOnRaidsFindOne) avatarModel()    {}
func (r avatarToAvatarsOnRaidsFindOne) avatarRelation() {}

func (r avatarToAvatarsOnRaidsFindOne) With(params ...iAvatarsOnRaidsRelationWith) avatarToAvatarsOnRaidsFindOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r avatarToAvatarsOnRaidsFindOne) Exec(ctx context.Context) (
	AvatarModel,
	error,
) {
	var v findOneAvatarResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return AvatarModel{}, fmt.Errorf(first.Message)
	}

	if v.Data.FindOneAvatar == nil {
		return AvatarModel{}, ErrNotFound
	}

	return *v.Data.FindOneAvatar, err
}

func (r avatarToAvatarsOnRaidsFindOne) Update(params ...iAvatarSetParams) avatarToAvatarsOnRaidsUpdateOne {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Avatar"
	r.query.Outputs = avatarOutput

	var v avatarToAvatarsOnRaidsUpdateOne
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type avatarToAvatarsOnRaidsUpdateOne struct {
	query builder.Query
}

func (r avatarToAvatarsOnRaidsUpdateOne) Exec(ctx context.Context) (AvatarModel, error) {
	var v updateOneAvatarResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return AvatarModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateOneAvatar, err
}

func (r avatarToAvatarsOnRaidsFindOne) Delete() avatarToAvatarsOnRaidsDeleteOne {
	var v avatarToAvatarsOnRaidsDeleteOne
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Avatar"
	v.query.Outputs = avatarOutput
	return v
}

type avatarToAvatarsOnRaidsDeleteOne struct {
	query builder.Query
}

func (r avatarToAvatarsOnRaidsDeleteOne) Exec(ctx context.Context) (AvatarModel, error) {
	var v deleteOneAvatarResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return AvatarModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteOneAvatar, err
}

type avatarToAvatarsOnRaidsFindMany struct {
	query builder.Query
}

func (r avatarToAvatarsOnRaidsFindMany) getQuery() builder.Query {
	return r.query
}

func (r avatarToAvatarsOnRaidsFindMany) with()           {}
func (r avatarToAvatarsOnRaidsFindMany) avatarModel()    {}
func (r avatarToAvatarsOnRaidsFindMany) avatarRelation() {}

func (r avatarToAvatarsOnRaidsFindMany) With(params ...iAvatarsOnRaidsRelationWith) avatarToAvatarsOnRaidsFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r avatarToAvatarsOnRaidsFindMany) OrderBy(param iAvatarOrderByParams) avatarToAvatarsOnRaidsFindMany {
	direction, _ := param.field().Value.(runtime.Direction)
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "orderBy",
		Value: runtime.Direction(param.field().Name + "_" + string(direction)),
	})
	return r
}

func (r avatarToAvatarsOnRaidsFindMany) Skip(count int) avatarToAvatarsOnRaidsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r avatarToAvatarsOnRaidsFindMany) Take(count int) avatarToAvatarsOnRaidsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r avatarToAvatarsOnRaidsFindMany) Cursor(cursor iAvatarCursorParams) avatarToAvatarsOnRaidsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r avatarToAvatarsOnRaidsFindMany) Exec(ctx context.Context) (
	[]AvatarModel,
	error,
) {
	var v findManyAvatarResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return []AvatarModel{}, fmt.Errorf(first.Message)
	}

	return v.Data.FindManyAvatar, err
}

func (r avatarToAvatarsOnRaidsFindMany) Update(params ...iAvatarSetParams) avatarToAvatarsOnRaidsUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Avatar"
	r.query.Outputs = countOutput

	var v avatarToAvatarsOnRaidsUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type avatarToAvatarsOnRaidsUpdateMany struct {
	query builder.Query
}

func (r avatarToAvatarsOnRaidsUpdateMany) Exec(ctx context.Context) (int, error) {
	var v updateManyAvatarResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateManyAvatar.Count, err
}

func (r avatarToAvatarsOnRaidsFindMany) Delete() avatarToAvatarsOnRaidsDeleteMany {
	var v avatarToAvatarsOnRaidsDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Avatar"
	v.query.Outputs = countOutput
	return v
}

type avatarToAvatarsOnRaidsDeleteMany struct {
	query builder.Query
}

func (r avatarToAvatarsOnRaidsDeleteMany) Exec(ctx context.Context) (int, error) {
	var v deleteManyAvatarResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteManyAvatar.Count, err
}

type avatarFindOne struct {
	query builder.Query
}

func (r avatarFindOne) getQuery() builder.Query {
	return r.query
}

func (r avatarFindOne) with()           {}
func (r avatarFindOne) avatarModel()    {}
func (r avatarFindOne) avatarRelation() {}

func (r avatarActions) FindOne(

	params iAvatarEqualsParamsUnique,
) avatarFindOne {
	var v avatarFindOne
	v.query = builder.NewQuery()
	v.query.Client = r.client

	v.query.Operation = "query"
	v.query.Method = "findOne"
	v.query.Model = "Avatar"
	v.query.Outputs = avatarOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: []builder.Field{params.field()},
	})

	return v
}

func (r avatarFindOne) With(params ...iAvatarRelationWith) avatarFindOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r avatarFindOne) Exec(ctx context.Context) (
	AvatarModel,
	error,
) {
	var v findOneAvatarResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return AvatarModel{}, fmt.Errorf(first.Message)
	}

	if v.Data.FindOneAvatar == nil {
		return AvatarModel{}, ErrNotFound
	}

	return *v.Data.FindOneAvatar, err
}

func (r avatarFindOne) Update(params ...iAvatarSetParams) avatarUpdateOne {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Avatar"
	r.query.Outputs = avatarOutput

	var v avatarUpdateOne
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type avatarUpdateOne struct {
	query builder.Query
}

func (r avatarUpdateOne) Exec(ctx context.Context) (AvatarModel, error) {
	var v updateOneAvatarResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return AvatarModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateOneAvatar, err
}

func (r avatarFindOne) Delete() avatarDeleteOne {
	var v avatarDeleteOne
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Avatar"
	v.query.Outputs = avatarOutput
	return v
}

type avatarDeleteOne struct {
	query builder.Query
}

func (r avatarDeleteOne) Exec(ctx context.Context) (AvatarModel, error) {
	var v deleteOneAvatarResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return AvatarModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteOneAvatar, err
}

type avatarFindMany struct {
	query builder.Query
}

func (r avatarFindMany) getQuery() builder.Query {
	return r.query
}

func (r avatarFindMany) with()           {}
func (r avatarFindMany) avatarModel()    {}
func (r avatarFindMany) avatarRelation() {}

func (r avatarActions) FindMany(

	params ...iAvatarParams,
) avatarFindMany {
	var v avatarFindMany
	v.query = builder.NewQuery()
	v.query.Client = r.client

	v.query.Operation = "query"
	v.query.Method = "findMany"
	v.query.Model = "Avatar"
	v.query.Outputs = avatarOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r avatarFindMany) With(params ...iAvatarRelationWith) avatarFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r avatarFindMany) OrderBy(param iAvatarOrderByParams) avatarFindMany {
	direction, _ := param.field().Value.(runtime.Direction)
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "orderBy",
		Value: runtime.Direction(param.field().Name + "_" + string(direction)),
	})
	return r
}

func (r avatarFindMany) Skip(count int) avatarFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r avatarFindMany) Take(count int) avatarFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r avatarFindMany) Cursor(cursor iAvatarCursorParams) avatarFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r avatarFindMany) Exec(ctx context.Context) (
	[]AvatarModel,
	error,
) {
	var v findManyAvatarResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return []AvatarModel{}, fmt.Errorf(first.Message)
	}

	return v.Data.FindManyAvatar, err
}

func (r avatarFindMany) Update(params ...iAvatarSetParams) avatarUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Avatar"
	r.query.Outputs = countOutput

	var v avatarUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type avatarUpdateMany struct {
	query builder.Query
}

func (r avatarUpdateMany) Exec(ctx context.Context) (int, error) {
	var v updateManyAvatarResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateManyAvatar.Count, err
}

func (r avatarFindMany) Delete() avatarDeleteMany {
	var v avatarDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Avatar"
	v.query.Outputs = countOutput
	return v
}

type avatarDeleteMany struct {
	query builder.Query
}

func (r avatarDeleteMany) Exec(ctx context.Context) (int, error) {
	var v deleteManyAvatarResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteManyAvatar.Count, err
}

type raidToRaidAttackFindOne struct {
	query builder.Query
}

func (r raidToRaidAttackFindOne) getQuery() builder.Query {
	return r.query
}

func (r raidToRaidAttackFindOne) with()         {}
func (r raidToRaidAttackFindOne) raidModel()    {}
func (r raidToRaidAttackFindOne) raidRelation() {}

func (r raidToRaidAttackFindOne) With(params ...iRaidAttackRelationWith) raidToRaidAttackFindOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r raidToRaidAttackFindOne) Exec(ctx context.Context) (
	RaidModel,
	error,
) {
	var v findOneRaidResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return RaidModel{}, fmt.Errorf(first.Message)
	}

	if v.Data.FindOneRaid == nil {
		return RaidModel{}, ErrNotFound
	}

	return *v.Data.FindOneRaid, err
}

func (r raidToRaidAttackFindOne) Update(params ...iRaidSetParams) raidToRaidAttackUpdateOne {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Raid"
	r.query.Outputs = raidOutput

	var v raidToRaidAttackUpdateOne
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type raidToRaidAttackUpdateOne struct {
	query builder.Query
}

func (r raidToRaidAttackUpdateOne) Exec(ctx context.Context) (RaidModel, error) {
	var v updateOneRaidResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return RaidModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateOneRaid, err
}

func (r raidToRaidAttackFindOne) Delete() raidToRaidAttackDeleteOne {
	var v raidToRaidAttackDeleteOne
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Raid"
	v.query.Outputs = raidOutput
	return v
}

type raidToRaidAttackDeleteOne struct {
	query builder.Query
}

func (r raidToRaidAttackDeleteOne) Exec(ctx context.Context) (RaidModel, error) {
	var v deleteOneRaidResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return RaidModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteOneRaid, err
}

type raidToRaidAttackFindMany struct {
	query builder.Query
}

func (r raidToRaidAttackFindMany) getQuery() builder.Query {
	return r.query
}

func (r raidToRaidAttackFindMany) with()         {}
func (r raidToRaidAttackFindMany) raidModel()    {}
func (r raidToRaidAttackFindMany) raidRelation() {}

func (r raidToRaidAttackFindMany) With(params ...iRaidAttackRelationWith) raidToRaidAttackFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r raidToRaidAttackFindMany) OrderBy(param iRaidOrderByParams) raidToRaidAttackFindMany {
	direction, _ := param.field().Value.(runtime.Direction)
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "orderBy",
		Value: runtime.Direction(param.field().Name + "_" + string(direction)),
	})
	return r
}

func (r raidToRaidAttackFindMany) Skip(count int) raidToRaidAttackFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r raidToRaidAttackFindMany) Take(count int) raidToRaidAttackFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r raidToRaidAttackFindMany) Cursor(cursor iRaidCursorParams) raidToRaidAttackFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r raidToRaidAttackFindMany) Exec(ctx context.Context) (
	[]RaidModel,
	error,
) {
	var v findManyRaidResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return []RaidModel{}, fmt.Errorf(first.Message)
	}

	return v.Data.FindManyRaid, err
}

func (r raidToRaidAttackFindMany) Update(params ...iRaidSetParams) raidToRaidAttackUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Raid"
	r.query.Outputs = countOutput

	var v raidToRaidAttackUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type raidToRaidAttackUpdateMany struct {
	query builder.Query
}

func (r raidToRaidAttackUpdateMany) Exec(ctx context.Context) (int, error) {
	var v updateManyRaidResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateManyRaid.Count, err
}

func (r raidToRaidAttackFindMany) Delete() raidToRaidAttackDeleteMany {
	var v raidToRaidAttackDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Raid"
	v.query.Outputs = countOutput
	return v
}

type raidToRaidAttackDeleteMany struct {
	query builder.Query
}

func (r raidToRaidAttackDeleteMany) Exec(ctx context.Context) (int, error) {
	var v deleteManyRaidResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteManyRaid.Count, err
}

type raidToAvatarsOnRaidsFindOne struct {
	query builder.Query
}

func (r raidToAvatarsOnRaidsFindOne) getQuery() builder.Query {
	return r.query
}

func (r raidToAvatarsOnRaidsFindOne) with()         {}
func (r raidToAvatarsOnRaidsFindOne) raidModel()    {}
func (r raidToAvatarsOnRaidsFindOne) raidRelation() {}

func (r raidToAvatarsOnRaidsFindOne) With(params ...iAvatarsOnRaidsRelationWith) raidToAvatarsOnRaidsFindOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r raidToAvatarsOnRaidsFindOne) Exec(ctx context.Context) (
	RaidModel,
	error,
) {
	var v findOneRaidResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return RaidModel{}, fmt.Errorf(first.Message)
	}

	if v.Data.FindOneRaid == nil {
		return RaidModel{}, ErrNotFound
	}

	return *v.Data.FindOneRaid, err
}

func (r raidToAvatarsOnRaidsFindOne) Update(params ...iRaidSetParams) raidToAvatarsOnRaidsUpdateOne {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Raid"
	r.query.Outputs = raidOutput

	var v raidToAvatarsOnRaidsUpdateOne
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type raidToAvatarsOnRaidsUpdateOne struct {
	query builder.Query
}

func (r raidToAvatarsOnRaidsUpdateOne) Exec(ctx context.Context) (RaidModel, error) {
	var v updateOneRaidResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return RaidModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateOneRaid, err
}

func (r raidToAvatarsOnRaidsFindOne) Delete() raidToAvatarsOnRaidsDeleteOne {
	var v raidToAvatarsOnRaidsDeleteOne
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Raid"
	v.query.Outputs = raidOutput
	return v
}

type raidToAvatarsOnRaidsDeleteOne struct {
	query builder.Query
}

func (r raidToAvatarsOnRaidsDeleteOne) Exec(ctx context.Context) (RaidModel, error) {
	var v deleteOneRaidResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return RaidModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteOneRaid, err
}

type raidToAvatarsOnRaidsFindMany struct {
	query builder.Query
}

func (r raidToAvatarsOnRaidsFindMany) getQuery() builder.Query {
	return r.query
}

func (r raidToAvatarsOnRaidsFindMany) with()         {}
func (r raidToAvatarsOnRaidsFindMany) raidModel()    {}
func (r raidToAvatarsOnRaidsFindMany) raidRelation() {}

func (r raidToAvatarsOnRaidsFindMany) With(params ...iAvatarsOnRaidsRelationWith) raidToAvatarsOnRaidsFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r raidToAvatarsOnRaidsFindMany) OrderBy(param iRaidOrderByParams) raidToAvatarsOnRaidsFindMany {
	direction, _ := param.field().Value.(runtime.Direction)
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "orderBy",
		Value: runtime.Direction(param.field().Name + "_" + string(direction)),
	})
	return r
}

func (r raidToAvatarsOnRaidsFindMany) Skip(count int) raidToAvatarsOnRaidsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r raidToAvatarsOnRaidsFindMany) Take(count int) raidToAvatarsOnRaidsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r raidToAvatarsOnRaidsFindMany) Cursor(cursor iRaidCursorParams) raidToAvatarsOnRaidsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r raidToAvatarsOnRaidsFindMany) Exec(ctx context.Context) (
	[]RaidModel,
	error,
) {
	var v findManyRaidResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return []RaidModel{}, fmt.Errorf(first.Message)
	}

	return v.Data.FindManyRaid, err
}

func (r raidToAvatarsOnRaidsFindMany) Update(params ...iRaidSetParams) raidToAvatarsOnRaidsUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Raid"
	r.query.Outputs = countOutput

	var v raidToAvatarsOnRaidsUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type raidToAvatarsOnRaidsUpdateMany struct {
	query builder.Query
}

func (r raidToAvatarsOnRaidsUpdateMany) Exec(ctx context.Context) (int, error) {
	var v updateManyRaidResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateManyRaid.Count, err
}

func (r raidToAvatarsOnRaidsFindMany) Delete() raidToAvatarsOnRaidsDeleteMany {
	var v raidToAvatarsOnRaidsDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Raid"
	v.query.Outputs = countOutput
	return v
}

type raidToAvatarsOnRaidsDeleteMany struct {
	query builder.Query
}

func (r raidToAvatarsOnRaidsDeleteMany) Exec(ctx context.Context) (int, error) {
	var v deleteManyRaidResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteManyRaid.Count, err
}

type raidToRaidBossesOnRaidsFindOne struct {
	query builder.Query
}

func (r raidToRaidBossesOnRaidsFindOne) getQuery() builder.Query {
	return r.query
}

func (r raidToRaidBossesOnRaidsFindOne) with()         {}
func (r raidToRaidBossesOnRaidsFindOne) raidModel()    {}
func (r raidToRaidBossesOnRaidsFindOne) raidRelation() {}

func (r raidToRaidBossesOnRaidsFindOne) With(params ...iRaidBossesOnRaidsRelationWith) raidToRaidBossesOnRaidsFindOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r raidToRaidBossesOnRaidsFindOne) Exec(ctx context.Context) (
	RaidModel,
	error,
) {
	var v findOneRaidResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return RaidModel{}, fmt.Errorf(first.Message)
	}

	if v.Data.FindOneRaid == nil {
		return RaidModel{}, ErrNotFound
	}

	return *v.Data.FindOneRaid, err
}

func (r raidToRaidBossesOnRaidsFindOne) Update(params ...iRaidSetParams) raidToRaidBossesOnRaidsUpdateOne {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Raid"
	r.query.Outputs = raidOutput

	var v raidToRaidBossesOnRaidsUpdateOne
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type raidToRaidBossesOnRaidsUpdateOne struct {
	query builder.Query
}

func (r raidToRaidBossesOnRaidsUpdateOne) Exec(ctx context.Context) (RaidModel, error) {
	var v updateOneRaidResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return RaidModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateOneRaid, err
}

func (r raidToRaidBossesOnRaidsFindOne) Delete() raidToRaidBossesOnRaidsDeleteOne {
	var v raidToRaidBossesOnRaidsDeleteOne
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Raid"
	v.query.Outputs = raidOutput
	return v
}

type raidToRaidBossesOnRaidsDeleteOne struct {
	query builder.Query
}

func (r raidToRaidBossesOnRaidsDeleteOne) Exec(ctx context.Context) (RaidModel, error) {
	var v deleteOneRaidResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return RaidModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteOneRaid, err
}

type raidToRaidBossesOnRaidsFindMany struct {
	query builder.Query
}

func (r raidToRaidBossesOnRaidsFindMany) getQuery() builder.Query {
	return r.query
}

func (r raidToRaidBossesOnRaidsFindMany) with()         {}
func (r raidToRaidBossesOnRaidsFindMany) raidModel()    {}
func (r raidToRaidBossesOnRaidsFindMany) raidRelation() {}

func (r raidToRaidBossesOnRaidsFindMany) With(params ...iRaidBossesOnRaidsRelationWith) raidToRaidBossesOnRaidsFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r raidToRaidBossesOnRaidsFindMany) OrderBy(param iRaidOrderByParams) raidToRaidBossesOnRaidsFindMany {
	direction, _ := param.field().Value.(runtime.Direction)
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "orderBy",
		Value: runtime.Direction(param.field().Name + "_" + string(direction)),
	})
	return r
}

func (r raidToRaidBossesOnRaidsFindMany) Skip(count int) raidToRaidBossesOnRaidsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r raidToRaidBossesOnRaidsFindMany) Take(count int) raidToRaidBossesOnRaidsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r raidToRaidBossesOnRaidsFindMany) Cursor(cursor iRaidCursorParams) raidToRaidBossesOnRaidsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r raidToRaidBossesOnRaidsFindMany) Exec(ctx context.Context) (
	[]RaidModel,
	error,
) {
	var v findManyRaidResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return []RaidModel{}, fmt.Errorf(first.Message)
	}

	return v.Data.FindManyRaid, err
}

func (r raidToRaidBossesOnRaidsFindMany) Update(params ...iRaidSetParams) raidToRaidBossesOnRaidsUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Raid"
	r.query.Outputs = countOutput

	var v raidToRaidBossesOnRaidsUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type raidToRaidBossesOnRaidsUpdateMany struct {
	query builder.Query
}

func (r raidToRaidBossesOnRaidsUpdateMany) Exec(ctx context.Context) (int, error) {
	var v updateManyRaidResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateManyRaid.Count, err
}

func (r raidToRaidBossesOnRaidsFindMany) Delete() raidToRaidBossesOnRaidsDeleteMany {
	var v raidToRaidBossesOnRaidsDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Raid"
	v.query.Outputs = countOutput
	return v
}

type raidToRaidBossesOnRaidsDeleteMany struct {
	query builder.Query
}

func (r raidToRaidBossesOnRaidsDeleteMany) Exec(ctx context.Context) (int, error) {
	var v deleteManyRaidResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteManyRaid.Count, err
}

type raidFindOne struct {
	query builder.Query
}

func (r raidFindOne) getQuery() builder.Query {
	return r.query
}

func (r raidFindOne) with()         {}
func (r raidFindOne) raidModel()    {}
func (r raidFindOne) raidRelation() {}

func (r raidActions) FindOne(

	params iRaidEqualsParamsUnique,
) raidFindOne {
	var v raidFindOne
	v.query = builder.NewQuery()
	v.query.Client = r.client

	v.query.Operation = "query"
	v.query.Method = "findOne"
	v.query.Model = "Raid"
	v.query.Outputs = raidOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: []builder.Field{params.field()},
	})

	return v
}

func (r raidFindOne) With(params ...iRaidRelationWith) raidFindOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r raidFindOne) Exec(ctx context.Context) (
	RaidModel,
	error,
) {
	var v findOneRaidResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return RaidModel{}, fmt.Errorf(first.Message)
	}

	if v.Data.FindOneRaid == nil {
		return RaidModel{}, ErrNotFound
	}

	return *v.Data.FindOneRaid, err
}

func (r raidFindOne) Update(params ...iRaidSetParams) raidUpdateOne {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Raid"
	r.query.Outputs = raidOutput

	var v raidUpdateOne
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type raidUpdateOne struct {
	query builder.Query
}

func (r raidUpdateOne) Exec(ctx context.Context) (RaidModel, error) {
	var v updateOneRaidResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return RaidModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateOneRaid, err
}

func (r raidFindOne) Delete() raidDeleteOne {
	var v raidDeleteOne
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Raid"
	v.query.Outputs = raidOutput
	return v
}

type raidDeleteOne struct {
	query builder.Query
}

func (r raidDeleteOne) Exec(ctx context.Context) (RaidModel, error) {
	var v deleteOneRaidResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return RaidModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteOneRaid, err
}

type raidFindMany struct {
	query builder.Query
}

func (r raidFindMany) getQuery() builder.Query {
	return r.query
}

func (r raidFindMany) with()         {}
func (r raidFindMany) raidModel()    {}
func (r raidFindMany) raidRelation() {}

func (r raidActions) FindMany(

	params ...iRaidParams,
) raidFindMany {
	var v raidFindMany
	v.query = builder.NewQuery()
	v.query.Client = r.client

	v.query.Operation = "query"
	v.query.Method = "findMany"
	v.query.Model = "Raid"
	v.query.Outputs = raidOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r raidFindMany) With(params ...iRaidRelationWith) raidFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r raidFindMany) OrderBy(param iRaidOrderByParams) raidFindMany {
	direction, _ := param.field().Value.(runtime.Direction)
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "orderBy",
		Value: runtime.Direction(param.field().Name + "_" + string(direction)),
	})
	return r
}

func (r raidFindMany) Skip(count int) raidFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r raidFindMany) Take(count int) raidFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r raidFindMany) Cursor(cursor iRaidCursorParams) raidFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r raidFindMany) Exec(ctx context.Context) (
	[]RaidModel,
	error,
) {
	var v findManyRaidResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return []RaidModel{}, fmt.Errorf(first.Message)
	}

	return v.Data.FindManyRaid, err
}

func (r raidFindMany) Update(params ...iRaidSetParams) raidUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Raid"
	r.query.Outputs = countOutput

	var v raidUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type raidUpdateMany struct {
	query builder.Query
}

func (r raidUpdateMany) Exec(ctx context.Context) (int, error) {
	var v updateManyRaidResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateManyRaid.Count, err
}

func (r raidFindMany) Delete() raidDeleteMany {
	var v raidDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Raid"
	v.query.Outputs = countOutput
	return v
}

type raidDeleteMany struct {
	query builder.Query
}

func (r raidDeleteMany) Exec(ctx context.Context) (int, error) {
	var v deleteManyRaidResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteManyRaid.Count, err
}

type raidBossToRaidBossesOnRaidsFindOne struct {
	query builder.Query
}

func (r raidBossToRaidBossesOnRaidsFindOne) getQuery() builder.Query {
	return r.query
}

func (r raidBossToRaidBossesOnRaidsFindOne) with()             {}
func (r raidBossToRaidBossesOnRaidsFindOne) raidBossModel()    {}
func (r raidBossToRaidBossesOnRaidsFindOne) raidBossRelation() {}

func (r raidBossToRaidBossesOnRaidsFindOne) With(params ...iRaidBossesOnRaidsRelationWith) raidBossToRaidBossesOnRaidsFindOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r raidBossToRaidBossesOnRaidsFindOne) Exec(ctx context.Context) (
	RaidBossModel,
	error,
) {
	var v findOneRaidBossResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return RaidBossModel{}, fmt.Errorf(first.Message)
	}

	if v.Data.FindOneRaidBoss == nil {
		return RaidBossModel{}, ErrNotFound
	}

	return *v.Data.FindOneRaidBoss, err
}

func (r raidBossToRaidBossesOnRaidsFindOne) Update(params ...iRaidBossSetParams) raidBossToRaidBossesOnRaidsUpdateOne {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "RaidBoss"
	r.query.Outputs = raidBossOutput

	var v raidBossToRaidBossesOnRaidsUpdateOne
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type raidBossToRaidBossesOnRaidsUpdateOne struct {
	query builder.Query
}

func (r raidBossToRaidBossesOnRaidsUpdateOne) Exec(ctx context.Context) (RaidBossModel, error) {
	var v updateOneRaidBossResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return RaidBossModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateOneRaidBoss, err
}

func (r raidBossToRaidBossesOnRaidsFindOne) Delete() raidBossToRaidBossesOnRaidsDeleteOne {
	var v raidBossToRaidBossesOnRaidsDeleteOne
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "RaidBoss"
	v.query.Outputs = raidBossOutput
	return v
}

type raidBossToRaidBossesOnRaidsDeleteOne struct {
	query builder.Query
}

func (r raidBossToRaidBossesOnRaidsDeleteOne) Exec(ctx context.Context) (RaidBossModel, error) {
	var v deleteOneRaidBossResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return RaidBossModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteOneRaidBoss, err
}

type raidBossToRaidBossesOnRaidsFindMany struct {
	query builder.Query
}

func (r raidBossToRaidBossesOnRaidsFindMany) getQuery() builder.Query {
	return r.query
}

func (r raidBossToRaidBossesOnRaidsFindMany) with()             {}
func (r raidBossToRaidBossesOnRaidsFindMany) raidBossModel()    {}
func (r raidBossToRaidBossesOnRaidsFindMany) raidBossRelation() {}

func (r raidBossToRaidBossesOnRaidsFindMany) With(params ...iRaidBossesOnRaidsRelationWith) raidBossToRaidBossesOnRaidsFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r raidBossToRaidBossesOnRaidsFindMany) OrderBy(param iRaidBossOrderByParams) raidBossToRaidBossesOnRaidsFindMany {
	direction, _ := param.field().Value.(runtime.Direction)
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "orderBy",
		Value: runtime.Direction(param.field().Name + "_" + string(direction)),
	})
	return r
}

func (r raidBossToRaidBossesOnRaidsFindMany) Skip(count int) raidBossToRaidBossesOnRaidsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r raidBossToRaidBossesOnRaidsFindMany) Take(count int) raidBossToRaidBossesOnRaidsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r raidBossToRaidBossesOnRaidsFindMany) Cursor(cursor iRaidBossCursorParams) raidBossToRaidBossesOnRaidsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r raidBossToRaidBossesOnRaidsFindMany) Exec(ctx context.Context) (
	[]RaidBossModel,
	error,
) {
	var v findManyRaidBossResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return []RaidBossModel{}, fmt.Errorf(first.Message)
	}

	return v.Data.FindManyRaidBoss, err
}

func (r raidBossToRaidBossesOnRaidsFindMany) Update(params ...iRaidBossSetParams) raidBossToRaidBossesOnRaidsUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "RaidBoss"
	r.query.Outputs = countOutput

	var v raidBossToRaidBossesOnRaidsUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type raidBossToRaidBossesOnRaidsUpdateMany struct {
	query builder.Query
}

func (r raidBossToRaidBossesOnRaidsUpdateMany) Exec(ctx context.Context) (int, error) {
	var v updateManyRaidBossResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateManyRaidBoss.Count, err
}

func (r raidBossToRaidBossesOnRaidsFindMany) Delete() raidBossToRaidBossesOnRaidsDeleteMany {
	var v raidBossToRaidBossesOnRaidsDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "RaidBoss"
	v.query.Outputs = countOutput
	return v
}

type raidBossToRaidBossesOnRaidsDeleteMany struct {
	query builder.Query
}

func (r raidBossToRaidBossesOnRaidsDeleteMany) Exec(ctx context.Context) (int, error) {
	var v deleteManyRaidBossResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteManyRaidBoss.Count, err
}

type raidBossToRaidAttackFindOne struct {
	query builder.Query
}

func (r raidBossToRaidAttackFindOne) getQuery() builder.Query {
	return r.query
}

func (r raidBossToRaidAttackFindOne) with()             {}
func (r raidBossToRaidAttackFindOne) raidBossModel()    {}
func (r raidBossToRaidAttackFindOne) raidBossRelation() {}

func (r raidBossToRaidAttackFindOne) With(params ...iRaidAttackRelationWith) raidBossToRaidAttackFindOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r raidBossToRaidAttackFindOne) Exec(ctx context.Context) (
	RaidBossModel,
	error,
) {
	var v findOneRaidBossResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return RaidBossModel{}, fmt.Errorf(first.Message)
	}

	if v.Data.FindOneRaidBoss == nil {
		return RaidBossModel{}, ErrNotFound
	}

	return *v.Data.FindOneRaidBoss, err
}

func (r raidBossToRaidAttackFindOne) Update(params ...iRaidBossSetParams) raidBossToRaidAttackUpdateOne {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "RaidBoss"
	r.query.Outputs = raidBossOutput

	var v raidBossToRaidAttackUpdateOne
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type raidBossToRaidAttackUpdateOne struct {
	query builder.Query
}

func (r raidBossToRaidAttackUpdateOne) Exec(ctx context.Context) (RaidBossModel, error) {
	var v updateOneRaidBossResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return RaidBossModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateOneRaidBoss, err
}

func (r raidBossToRaidAttackFindOne) Delete() raidBossToRaidAttackDeleteOne {
	var v raidBossToRaidAttackDeleteOne
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "RaidBoss"
	v.query.Outputs = raidBossOutput
	return v
}

type raidBossToRaidAttackDeleteOne struct {
	query builder.Query
}

func (r raidBossToRaidAttackDeleteOne) Exec(ctx context.Context) (RaidBossModel, error) {
	var v deleteOneRaidBossResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return RaidBossModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteOneRaidBoss, err
}

type raidBossToRaidAttackFindMany struct {
	query builder.Query
}

func (r raidBossToRaidAttackFindMany) getQuery() builder.Query {
	return r.query
}

func (r raidBossToRaidAttackFindMany) with()             {}
func (r raidBossToRaidAttackFindMany) raidBossModel()    {}
func (r raidBossToRaidAttackFindMany) raidBossRelation() {}

func (r raidBossToRaidAttackFindMany) With(params ...iRaidAttackRelationWith) raidBossToRaidAttackFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r raidBossToRaidAttackFindMany) OrderBy(param iRaidBossOrderByParams) raidBossToRaidAttackFindMany {
	direction, _ := param.field().Value.(runtime.Direction)
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "orderBy",
		Value: runtime.Direction(param.field().Name + "_" + string(direction)),
	})
	return r
}

func (r raidBossToRaidAttackFindMany) Skip(count int) raidBossToRaidAttackFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r raidBossToRaidAttackFindMany) Take(count int) raidBossToRaidAttackFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r raidBossToRaidAttackFindMany) Cursor(cursor iRaidBossCursorParams) raidBossToRaidAttackFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r raidBossToRaidAttackFindMany) Exec(ctx context.Context) (
	[]RaidBossModel,
	error,
) {
	var v findManyRaidBossResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return []RaidBossModel{}, fmt.Errorf(first.Message)
	}

	return v.Data.FindManyRaidBoss, err
}

func (r raidBossToRaidAttackFindMany) Update(params ...iRaidBossSetParams) raidBossToRaidAttackUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "RaidBoss"
	r.query.Outputs = countOutput

	var v raidBossToRaidAttackUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type raidBossToRaidAttackUpdateMany struct {
	query builder.Query
}

func (r raidBossToRaidAttackUpdateMany) Exec(ctx context.Context) (int, error) {
	var v updateManyRaidBossResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateManyRaidBoss.Count, err
}

func (r raidBossToRaidAttackFindMany) Delete() raidBossToRaidAttackDeleteMany {
	var v raidBossToRaidAttackDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "RaidBoss"
	v.query.Outputs = countOutput
	return v
}

type raidBossToRaidAttackDeleteMany struct {
	query builder.Query
}

func (r raidBossToRaidAttackDeleteMany) Exec(ctx context.Context) (int, error) {
	var v deleteManyRaidBossResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteManyRaidBoss.Count, err
}

type raidBossFindOne struct {
	query builder.Query
}

func (r raidBossFindOne) getQuery() builder.Query {
	return r.query
}

func (r raidBossFindOne) with()             {}
func (r raidBossFindOne) raidBossModel()    {}
func (r raidBossFindOne) raidBossRelation() {}

func (r raidBossActions) FindOne(

	params iRaidBossEqualsParamsUnique,
) raidBossFindOne {
	var v raidBossFindOne
	v.query = builder.NewQuery()
	v.query.Client = r.client

	v.query.Operation = "query"
	v.query.Method = "findOne"
	v.query.Model = "RaidBoss"
	v.query.Outputs = raidBossOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: []builder.Field{params.field()},
	})

	return v
}

func (r raidBossFindOne) With(params ...iRaidBossRelationWith) raidBossFindOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r raidBossFindOne) Exec(ctx context.Context) (
	RaidBossModel,
	error,
) {
	var v findOneRaidBossResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return RaidBossModel{}, fmt.Errorf(first.Message)
	}

	if v.Data.FindOneRaidBoss == nil {
		return RaidBossModel{}, ErrNotFound
	}

	return *v.Data.FindOneRaidBoss, err
}

func (r raidBossFindOne) Update(params ...iRaidBossSetParams) raidBossUpdateOne {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "RaidBoss"
	r.query.Outputs = raidBossOutput

	var v raidBossUpdateOne
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type raidBossUpdateOne struct {
	query builder.Query
}

func (r raidBossUpdateOne) Exec(ctx context.Context) (RaidBossModel, error) {
	var v updateOneRaidBossResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return RaidBossModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateOneRaidBoss, err
}

func (r raidBossFindOne) Delete() raidBossDeleteOne {
	var v raidBossDeleteOne
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "RaidBoss"
	v.query.Outputs = raidBossOutput
	return v
}

type raidBossDeleteOne struct {
	query builder.Query
}

func (r raidBossDeleteOne) Exec(ctx context.Context) (RaidBossModel, error) {
	var v deleteOneRaidBossResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return RaidBossModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteOneRaidBoss, err
}

type raidBossFindMany struct {
	query builder.Query
}

func (r raidBossFindMany) getQuery() builder.Query {
	return r.query
}

func (r raidBossFindMany) with()             {}
func (r raidBossFindMany) raidBossModel()    {}
func (r raidBossFindMany) raidBossRelation() {}

func (r raidBossActions) FindMany(

	params ...iRaidBossParams,
) raidBossFindMany {
	var v raidBossFindMany
	v.query = builder.NewQuery()
	v.query.Client = r.client

	v.query.Operation = "query"
	v.query.Method = "findMany"
	v.query.Model = "RaidBoss"
	v.query.Outputs = raidBossOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r raidBossFindMany) With(params ...iRaidBossRelationWith) raidBossFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r raidBossFindMany) OrderBy(param iRaidBossOrderByParams) raidBossFindMany {
	direction, _ := param.field().Value.(runtime.Direction)
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "orderBy",
		Value: runtime.Direction(param.field().Name + "_" + string(direction)),
	})
	return r
}

func (r raidBossFindMany) Skip(count int) raidBossFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r raidBossFindMany) Take(count int) raidBossFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r raidBossFindMany) Cursor(cursor iRaidBossCursorParams) raidBossFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r raidBossFindMany) Exec(ctx context.Context) (
	[]RaidBossModel,
	error,
) {
	var v findManyRaidBossResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return []RaidBossModel{}, fmt.Errorf(first.Message)
	}

	return v.Data.FindManyRaidBoss, err
}

func (r raidBossFindMany) Update(params ...iRaidBossSetParams) raidBossUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "RaidBoss"
	r.query.Outputs = countOutput

	var v raidBossUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type raidBossUpdateMany struct {
	query builder.Query
}

func (r raidBossUpdateMany) Exec(ctx context.Context) (int, error) {
	var v updateManyRaidBossResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateManyRaidBoss.Count, err
}

func (r raidBossFindMany) Delete() raidBossDeleteMany {
	var v raidBossDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "RaidBoss"
	v.query.Outputs = countOutput
	return v
}

type raidBossDeleteMany struct {
	query builder.Query
}

func (r raidBossDeleteMany) Exec(ctx context.Context) (int, error) {
	var v deleteManyRaidBossResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteManyRaidBoss.Count, err
}

type raidAttackToRaidFindOne struct {
	query builder.Query
}

func (r raidAttackToRaidFindOne) getQuery() builder.Query {
	return r.query
}

func (r raidAttackToRaidFindOne) with()               {}
func (r raidAttackToRaidFindOne) raidAttackModel()    {}
func (r raidAttackToRaidFindOne) raidAttackRelation() {}

func (r raidAttackToRaidFindOne) With(params ...iRaidRelationWith) raidAttackToRaidFindOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r raidAttackToRaidFindOne) Exec(ctx context.Context) (
	RaidAttackModel,
	error,
) {
	var v findOneRaidAttackResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return RaidAttackModel{}, fmt.Errorf(first.Message)
	}

	if v.Data.FindOneRaidAttack == nil {
		return RaidAttackModel{}, ErrNotFound
	}

	return *v.Data.FindOneRaidAttack, err
}

func (r raidAttackToRaidFindOne) Update(params ...iRaidAttackSetParams) raidAttackToRaidUpdateOne {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "RaidAttack"
	r.query.Outputs = raidAttackOutput

	var v raidAttackToRaidUpdateOne
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type raidAttackToRaidUpdateOne struct {
	query builder.Query
}

func (r raidAttackToRaidUpdateOne) Exec(ctx context.Context) (RaidAttackModel, error) {
	var v updateOneRaidAttackResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return RaidAttackModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateOneRaidAttack, err
}

func (r raidAttackToRaidFindOne) Delete() raidAttackToRaidDeleteOne {
	var v raidAttackToRaidDeleteOne
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "RaidAttack"
	v.query.Outputs = raidAttackOutput
	return v
}

type raidAttackToRaidDeleteOne struct {
	query builder.Query
}

func (r raidAttackToRaidDeleteOne) Exec(ctx context.Context) (RaidAttackModel, error) {
	var v deleteOneRaidAttackResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return RaidAttackModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteOneRaidAttack, err
}

type raidAttackToRaidFindMany struct {
	query builder.Query
}

func (r raidAttackToRaidFindMany) getQuery() builder.Query {
	return r.query
}

func (r raidAttackToRaidFindMany) with()               {}
func (r raidAttackToRaidFindMany) raidAttackModel()    {}
func (r raidAttackToRaidFindMany) raidAttackRelation() {}

func (r raidAttackToRaidFindMany) With(params ...iRaidRelationWith) raidAttackToRaidFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r raidAttackToRaidFindMany) OrderBy(param iRaidAttackOrderByParams) raidAttackToRaidFindMany {
	direction, _ := param.field().Value.(runtime.Direction)
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "orderBy",
		Value: runtime.Direction(param.field().Name + "_" + string(direction)),
	})
	return r
}

func (r raidAttackToRaidFindMany) Skip(count int) raidAttackToRaidFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r raidAttackToRaidFindMany) Take(count int) raidAttackToRaidFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r raidAttackToRaidFindMany) Cursor(cursor iRaidAttackCursorParams) raidAttackToRaidFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r raidAttackToRaidFindMany) Exec(ctx context.Context) (
	[]RaidAttackModel,
	error,
) {
	var v findManyRaidAttackResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return []RaidAttackModel{}, fmt.Errorf(first.Message)
	}

	return v.Data.FindManyRaidAttack, err
}

func (r raidAttackToRaidFindMany) Update(params ...iRaidAttackSetParams) raidAttackToRaidUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "RaidAttack"
	r.query.Outputs = countOutput

	var v raidAttackToRaidUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type raidAttackToRaidUpdateMany struct {
	query builder.Query
}

func (r raidAttackToRaidUpdateMany) Exec(ctx context.Context) (int, error) {
	var v updateManyRaidAttackResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateManyRaidAttack.Count, err
}

func (r raidAttackToRaidFindMany) Delete() raidAttackToRaidDeleteMany {
	var v raidAttackToRaidDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "RaidAttack"
	v.query.Outputs = countOutput
	return v
}

type raidAttackToRaidDeleteMany struct {
	query builder.Query
}

func (r raidAttackToRaidDeleteMany) Exec(ctx context.Context) (int, error) {
	var v deleteManyRaidAttackResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteManyRaidAttack.Count, err
}

type raidAttackToAvatarFindOne struct {
	query builder.Query
}

func (r raidAttackToAvatarFindOne) getQuery() builder.Query {
	return r.query
}

func (r raidAttackToAvatarFindOne) with()               {}
func (r raidAttackToAvatarFindOne) raidAttackModel()    {}
func (r raidAttackToAvatarFindOne) raidAttackRelation() {}

func (r raidAttackToAvatarFindOne) With(params ...iAvatarRelationWith) raidAttackToAvatarFindOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r raidAttackToAvatarFindOne) Exec(ctx context.Context) (
	RaidAttackModel,
	error,
) {
	var v findOneRaidAttackResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return RaidAttackModel{}, fmt.Errorf(first.Message)
	}

	if v.Data.FindOneRaidAttack == nil {
		return RaidAttackModel{}, ErrNotFound
	}

	return *v.Data.FindOneRaidAttack, err
}

func (r raidAttackToAvatarFindOne) Update(params ...iRaidAttackSetParams) raidAttackToAvatarUpdateOne {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "RaidAttack"
	r.query.Outputs = raidAttackOutput

	var v raidAttackToAvatarUpdateOne
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type raidAttackToAvatarUpdateOne struct {
	query builder.Query
}

func (r raidAttackToAvatarUpdateOne) Exec(ctx context.Context) (RaidAttackModel, error) {
	var v updateOneRaidAttackResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return RaidAttackModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateOneRaidAttack, err
}

func (r raidAttackToAvatarFindOne) Delete() raidAttackToAvatarDeleteOne {
	var v raidAttackToAvatarDeleteOne
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "RaidAttack"
	v.query.Outputs = raidAttackOutput
	return v
}

type raidAttackToAvatarDeleteOne struct {
	query builder.Query
}

func (r raidAttackToAvatarDeleteOne) Exec(ctx context.Context) (RaidAttackModel, error) {
	var v deleteOneRaidAttackResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return RaidAttackModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteOneRaidAttack, err
}

type raidAttackToAvatarFindMany struct {
	query builder.Query
}

func (r raidAttackToAvatarFindMany) getQuery() builder.Query {
	return r.query
}

func (r raidAttackToAvatarFindMany) with()               {}
func (r raidAttackToAvatarFindMany) raidAttackModel()    {}
func (r raidAttackToAvatarFindMany) raidAttackRelation() {}

func (r raidAttackToAvatarFindMany) With(params ...iAvatarRelationWith) raidAttackToAvatarFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r raidAttackToAvatarFindMany) OrderBy(param iRaidAttackOrderByParams) raidAttackToAvatarFindMany {
	direction, _ := param.field().Value.(runtime.Direction)
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "orderBy",
		Value: runtime.Direction(param.field().Name + "_" + string(direction)),
	})
	return r
}

func (r raidAttackToAvatarFindMany) Skip(count int) raidAttackToAvatarFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r raidAttackToAvatarFindMany) Take(count int) raidAttackToAvatarFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r raidAttackToAvatarFindMany) Cursor(cursor iRaidAttackCursorParams) raidAttackToAvatarFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r raidAttackToAvatarFindMany) Exec(ctx context.Context) (
	[]RaidAttackModel,
	error,
) {
	var v findManyRaidAttackResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return []RaidAttackModel{}, fmt.Errorf(first.Message)
	}

	return v.Data.FindManyRaidAttack, err
}

func (r raidAttackToAvatarFindMany) Update(params ...iRaidAttackSetParams) raidAttackToAvatarUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "RaidAttack"
	r.query.Outputs = countOutput

	var v raidAttackToAvatarUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type raidAttackToAvatarUpdateMany struct {
	query builder.Query
}

func (r raidAttackToAvatarUpdateMany) Exec(ctx context.Context) (int, error) {
	var v updateManyRaidAttackResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateManyRaidAttack.Count, err
}

func (r raidAttackToAvatarFindMany) Delete() raidAttackToAvatarDeleteMany {
	var v raidAttackToAvatarDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "RaidAttack"
	v.query.Outputs = countOutput
	return v
}

type raidAttackToAvatarDeleteMany struct {
	query builder.Query
}

func (r raidAttackToAvatarDeleteMany) Exec(ctx context.Context) (int, error) {
	var v deleteManyRaidAttackResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteManyRaidAttack.Count, err
}

type raidAttackToRaidBossFindOne struct {
	query builder.Query
}

func (r raidAttackToRaidBossFindOne) getQuery() builder.Query {
	return r.query
}

func (r raidAttackToRaidBossFindOne) with()               {}
func (r raidAttackToRaidBossFindOne) raidAttackModel()    {}
func (r raidAttackToRaidBossFindOne) raidAttackRelation() {}

func (r raidAttackToRaidBossFindOne) With(params ...iRaidBossRelationWith) raidAttackToRaidBossFindOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r raidAttackToRaidBossFindOne) Exec(ctx context.Context) (
	RaidAttackModel,
	error,
) {
	var v findOneRaidAttackResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return RaidAttackModel{}, fmt.Errorf(first.Message)
	}

	if v.Data.FindOneRaidAttack == nil {
		return RaidAttackModel{}, ErrNotFound
	}

	return *v.Data.FindOneRaidAttack, err
}

func (r raidAttackToRaidBossFindOne) Update(params ...iRaidAttackSetParams) raidAttackToRaidBossUpdateOne {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "RaidAttack"
	r.query.Outputs = raidAttackOutput

	var v raidAttackToRaidBossUpdateOne
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type raidAttackToRaidBossUpdateOne struct {
	query builder.Query
}

func (r raidAttackToRaidBossUpdateOne) Exec(ctx context.Context) (RaidAttackModel, error) {
	var v updateOneRaidAttackResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return RaidAttackModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateOneRaidAttack, err
}

func (r raidAttackToRaidBossFindOne) Delete() raidAttackToRaidBossDeleteOne {
	var v raidAttackToRaidBossDeleteOne
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "RaidAttack"
	v.query.Outputs = raidAttackOutput
	return v
}

type raidAttackToRaidBossDeleteOne struct {
	query builder.Query
}

func (r raidAttackToRaidBossDeleteOne) Exec(ctx context.Context) (RaidAttackModel, error) {
	var v deleteOneRaidAttackResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return RaidAttackModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteOneRaidAttack, err
}

type raidAttackToRaidBossFindMany struct {
	query builder.Query
}

func (r raidAttackToRaidBossFindMany) getQuery() builder.Query {
	return r.query
}

func (r raidAttackToRaidBossFindMany) with()               {}
func (r raidAttackToRaidBossFindMany) raidAttackModel()    {}
func (r raidAttackToRaidBossFindMany) raidAttackRelation() {}

func (r raidAttackToRaidBossFindMany) With(params ...iRaidBossRelationWith) raidAttackToRaidBossFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r raidAttackToRaidBossFindMany) OrderBy(param iRaidAttackOrderByParams) raidAttackToRaidBossFindMany {
	direction, _ := param.field().Value.(runtime.Direction)
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "orderBy",
		Value: runtime.Direction(param.field().Name + "_" + string(direction)),
	})
	return r
}

func (r raidAttackToRaidBossFindMany) Skip(count int) raidAttackToRaidBossFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r raidAttackToRaidBossFindMany) Take(count int) raidAttackToRaidBossFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r raidAttackToRaidBossFindMany) Cursor(cursor iRaidAttackCursorParams) raidAttackToRaidBossFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r raidAttackToRaidBossFindMany) Exec(ctx context.Context) (
	[]RaidAttackModel,
	error,
) {
	var v findManyRaidAttackResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return []RaidAttackModel{}, fmt.Errorf(first.Message)
	}

	return v.Data.FindManyRaidAttack, err
}

func (r raidAttackToRaidBossFindMany) Update(params ...iRaidAttackSetParams) raidAttackToRaidBossUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "RaidAttack"
	r.query.Outputs = countOutput

	var v raidAttackToRaidBossUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type raidAttackToRaidBossUpdateMany struct {
	query builder.Query
}

func (r raidAttackToRaidBossUpdateMany) Exec(ctx context.Context) (int, error) {
	var v updateManyRaidAttackResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateManyRaidAttack.Count, err
}

func (r raidAttackToRaidBossFindMany) Delete() raidAttackToRaidBossDeleteMany {
	var v raidAttackToRaidBossDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "RaidAttack"
	v.query.Outputs = countOutput
	return v
}

type raidAttackToRaidBossDeleteMany struct {
	query builder.Query
}

func (r raidAttackToRaidBossDeleteMany) Exec(ctx context.Context) (int, error) {
	var v deleteManyRaidAttackResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteManyRaidAttack.Count, err
}

type raidAttackFindOne struct {
	query builder.Query
}

func (r raidAttackFindOne) getQuery() builder.Query {
	return r.query
}

func (r raidAttackFindOne) with()               {}
func (r raidAttackFindOne) raidAttackModel()    {}
func (r raidAttackFindOne) raidAttackRelation() {}

func (r raidAttackActions) FindOne(

	params iRaidAttackEqualsParamsUnique,
) raidAttackFindOne {
	var v raidAttackFindOne
	v.query = builder.NewQuery()
	v.query.Client = r.client

	v.query.Operation = "query"
	v.query.Method = "findOne"
	v.query.Model = "RaidAttack"
	v.query.Outputs = raidAttackOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: []builder.Field{params.field()},
	})

	return v
}

func (r raidAttackFindOne) With(params ...iRaidAttackRelationWith) raidAttackFindOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r raidAttackFindOne) Exec(ctx context.Context) (
	RaidAttackModel,
	error,
) {
	var v findOneRaidAttackResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return RaidAttackModel{}, fmt.Errorf(first.Message)
	}

	if v.Data.FindOneRaidAttack == nil {
		return RaidAttackModel{}, ErrNotFound
	}

	return *v.Data.FindOneRaidAttack, err
}

func (r raidAttackFindOne) Update(params ...iRaidAttackSetParams) raidAttackUpdateOne {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "RaidAttack"
	r.query.Outputs = raidAttackOutput

	var v raidAttackUpdateOne
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type raidAttackUpdateOne struct {
	query builder.Query
}

func (r raidAttackUpdateOne) Exec(ctx context.Context) (RaidAttackModel, error) {
	var v updateOneRaidAttackResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return RaidAttackModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateOneRaidAttack, err
}

func (r raidAttackFindOne) Delete() raidAttackDeleteOne {
	var v raidAttackDeleteOne
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "RaidAttack"
	v.query.Outputs = raidAttackOutput
	return v
}

type raidAttackDeleteOne struct {
	query builder.Query
}

func (r raidAttackDeleteOne) Exec(ctx context.Context) (RaidAttackModel, error) {
	var v deleteOneRaidAttackResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return RaidAttackModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteOneRaidAttack, err
}

type raidAttackFindMany struct {
	query builder.Query
}

func (r raidAttackFindMany) getQuery() builder.Query {
	return r.query
}

func (r raidAttackFindMany) with()               {}
func (r raidAttackFindMany) raidAttackModel()    {}
func (r raidAttackFindMany) raidAttackRelation() {}

func (r raidAttackActions) FindMany(

	params ...iRaidAttackParams,
) raidAttackFindMany {
	var v raidAttackFindMany
	v.query = builder.NewQuery()
	v.query.Client = r.client

	v.query.Operation = "query"
	v.query.Method = "findMany"
	v.query.Model = "RaidAttack"
	v.query.Outputs = raidAttackOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r raidAttackFindMany) With(params ...iRaidAttackRelationWith) raidAttackFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r raidAttackFindMany) OrderBy(param iRaidAttackOrderByParams) raidAttackFindMany {
	direction, _ := param.field().Value.(runtime.Direction)
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "orderBy",
		Value: runtime.Direction(param.field().Name + "_" + string(direction)),
	})
	return r
}

func (r raidAttackFindMany) Skip(count int) raidAttackFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r raidAttackFindMany) Take(count int) raidAttackFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r raidAttackFindMany) Cursor(cursor iRaidAttackCursorParams) raidAttackFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r raidAttackFindMany) Exec(ctx context.Context) (
	[]RaidAttackModel,
	error,
) {
	var v findManyRaidAttackResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return []RaidAttackModel{}, fmt.Errorf(first.Message)
	}

	return v.Data.FindManyRaidAttack, err
}

func (r raidAttackFindMany) Update(params ...iRaidAttackSetParams) raidAttackUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "RaidAttack"
	r.query.Outputs = countOutput

	var v raidAttackUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type raidAttackUpdateMany struct {
	query builder.Query
}

func (r raidAttackUpdateMany) Exec(ctx context.Context) (int, error) {
	var v updateManyRaidAttackResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateManyRaidAttack.Count, err
}

func (r raidAttackFindMany) Delete() raidAttackDeleteMany {
	var v raidAttackDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "RaidAttack"
	v.query.Outputs = countOutput
	return v
}

type raidAttackDeleteMany struct {
	query builder.Query
}

func (r raidAttackDeleteMany) Exec(ctx context.Context) (int, error) {
	var v deleteManyRaidAttackResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteManyRaidAttack.Count, err
}

type avatarsOnRaidsToRaidFindOne struct {
	query builder.Query
}

func (r avatarsOnRaidsToRaidFindOne) getQuery() builder.Query {
	return r.query
}

func (r avatarsOnRaidsToRaidFindOne) with()                   {}
func (r avatarsOnRaidsToRaidFindOne) avatarsOnRaidsModel()    {}
func (r avatarsOnRaidsToRaidFindOne) avatarsOnRaidsRelation() {}

func (r avatarsOnRaidsToRaidFindOne) With(params ...iRaidRelationWith) avatarsOnRaidsToRaidFindOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r avatarsOnRaidsToRaidFindOne) Exec(ctx context.Context) (
	AvatarsOnRaidsModel,
	error,
) {
	var v findOneAvatarsOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return AvatarsOnRaidsModel{}, fmt.Errorf(first.Message)
	}

	if v.Data.FindOneAvatarsOnRaids == nil {
		return AvatarsOnRaidsModel{}, ErrNotFound
	}

	return *v.Data.FindOneAvatarsOnRaids, err
}

func (r avatarsOnRaidsToRaidFindOne) Update(params ...iAvatarsOnRaidsSetParams) avatarsOnRaidsToRaidUpdateOne {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "AvatarsOnRaids"
	r.query.Outputs = avatarsOnRaidsOutput

	var v avatarsOnRaidsToRaidUpdateOne
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type avatarsOnRaidsToRaidUpdateOne struct {
	query builder.Query
}

func (r avatarsOnRaidsToRaidUpdateOne) Exec(ctx context.Context) (AvatarsOnRaidsModel, error) {
	var v updateOneAvatarsOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return AvatarsOnRaidsModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateOneAvatarsOnRaids, err
}

func (r avatarsOnRaidsToRaidFindOne) Delete() avatarsOnRaidsToRaidDeleteOne {
	var v avatarsOnRaidsToRaidDeleteOne
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "AvatarsOnRaids"
	v.query.Outputs = avatarsOnRaidsOutput
	return v
}

type avatarsOnRaidsToRaidDeleteOne struct {
	query builder.Query
}

func (r avatarsOnRaidsToRaidDeleteOne) Exec(ctx context.Context) (AvatarsOnRaidsModel, error) {
	var v deleteOneAvatarsOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return AvatarsOnRaidsModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteOneAvatarsOnRaids, err
}

type avatarsOnRaidsToRaidFindMany struct {
	query builder.Query
}

func (r avatarsOnRaidsToRaidFindMany) getQuery() builder.Query {
	return r.query
}

func (r avatarsOnRaidsToRaidFindMany) with()                   {}
func (r avatarsOnRaidsToRaidFindMany) avatarsOnRaidsModel()    {}
func (r avatarsOnRaidsToRaidFindMany) avatarsOnRaidsRelation() {}

func (r avatarsOnRaidsToRaidFindMany) With(params ...iRaidRelationWith) avatarsOnRaidsToRaidFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r avatarsOnRaidsToRaidFindMany) OrderBy(param iAvatarsOnRaidsOrderByParams) avatarsOnRaidsToRaidFindMany {
	direction, _ := param.field().Value.(runtime.Direction)
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "orderBy",
		Value: runtime.Direction(param.field().Name + "_" + string(direction)),
	})
	return r
}

func (r avatarsOnRaidsToRaidFindMany) Skip(count int) avatarsOnRaidsToRaidFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r avatarsOnRaidsToRaidFindMany) Take(count int) avatarsOnRaidsToRaidFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r avatarsOnRaidsToRaidFindMany) Cursor(cursor iAvatarsOnRaidsCursorParams) avatarsOnRaidsToRaidFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r avatarsOnRaidsToRaidFindMany) Exec(ctx context.Context) (
	[]AvatarsOnRaidsModel,
	error,
) {
	var v findManyAvatarsOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return []AvatarsOnRaidsModel{}, fmt.Errorf(first.Message)
	}

	return v.Data.FindManyAvatarsOnRaids, err
}

func (r avatarsOnRaidsToRaidFindMany) Update(params ...iAvatarsOnRaidsSetParams) avatarsOnRaidsToRaidUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "AvatarsOnRaids"
	r.query.Outputs = countOutput

	var v avatarsOnRaidsToRaidUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type avatarsOnRaidsToRaidUpdateMany struct {
	query builder.Query
}

func (r avatarsOnRaidsToRaidUpdateMany) Exec(ctx context.Context) (int, error) {
	var v updateManyAvatarsOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateManyAvatarsOnRaids.Count, err
}

func (r avatarsOnRaidsToRaidFindMany) Delete() avatarsOnRaidsToRaidDeleteMany {
	var v avatarsOnRaidsToRaidDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "AvatarsOnRaids"
	v.query.Outputs = countOutput
	return v
}

type avatarsOnRaidsToRaidDeleteMany struct {
	query builder.Query
}

func (r avatarsOnRaidsToRaidDeleteMany) Exec(ctx context.Context) (int, error) {
	var v deleteManyAvatarsOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteManyAvatarsOnRaids.Count, err
}

type avatarsOnRaidsToAvatarFindOne struct {
	query builder.Query
}

func (r avatarsOnRaidsToAvatarFindOne) getQuery() builder.Query {
	return r.query
}

func (r avatarsOnRaidsToAvatarFindOne) with()                   {}
func (r avatarsOnRaidsToAvatarFindOne) avatarsOnRaidsModel()    {}
func (r avatarsOnRaidsToAvatarFindOne) avatarsOnRaidsRelation() {}

func (r avatarsOnRaidsToAvatarFindOne) With(params ...iAvatarRelationWith) avatarsOnRaidsToAvatarFindOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r avatarsOnRaidsToAvatarFindOne) Exec(ctx context.Context) (
	AvatarsOnRaidsModel,
	error,
) {
	var v findOneAvatarsOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return AvatarsOnRaidsModel{}, fmt.Errorf(first.Message)
	}

	if v.Data.FindOneAvatarsOnRaids == nil {
		return AvatarsOnRaidsModel{}, ErrNotFound
	}

	return *v.Data.FindOneAvatarsOnRaids, err
}

func (r avatarsOnRaidsToAvatarFindOne) Update(params ...iAvatarsOnRaidsSetParams) avatarsOnRaidsToAvatarUpdateOne {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "AvatarsOnRaids"
	r.query.Outputs = avatarsOnRaidsOutput

	var v avatarsOnRaidsToAvatarUpdateOne
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type avatarsOnRaidsToAvatarUpdateOne struct {
	query builder.Query
}

func (r avatarsOnRaidsToAvatarUpdateOne) Exec(ctx context.Context) (AvatarsOnRaidsModel, error) {
	var v updateOneAvatarsOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return AvatarsOnRaidsModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateOneAvatarsOnRaids, err
}

func (r avatarsOnRaidsToAvatarFindOne) Delete() avatarsOnRaidsToAvatarDeleteOne {
	var v avatarsOnRaidsToAvatarDeleteOne
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "AvatarsOnRaids"
	v.query.Outputs = avatarsOnRaidsOutput
	return v
}

type avatarsOnRaidsToAvatarDeleteOne struct {
	query builder.Query
}

func (r avatarsOnRaidsToAvatarDeleteOne) Exec(ctx context.Context) (AvatarsOnRaidsModel, error) {
	var v deleteOneAvatarsOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return AvatarsOnRaidsModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteOneAvatarsOnRaids, err
}

type avatarsOnRaidsToAvatarFindMany struct {
	query builder.Query
}

func (r avatarsOnRaidsToAvatarFindMany) getQuery() builder.Query {
	return r.query
}

func (r avatarsOnRaidsToAvatarFindMany) with()                   {}
func (r avatarsOnRaidsToAvatarFindMany) avatarsOnRaidsModel()    {}
func (r avatarsOnRaidsToAvatarFindMany) avatarsOnRaidsRelation() {}

func (r avatarsOnRaidsToAvatarFindMany) With(params ...iAvatarRelationWith) avatarsOnRaidsToAvatarFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r avatarsOnRaidsToAvatarFindMany) OrderBy(param iAvatarsOnRaidsOrderByParams) avatarsOnRaidsToAvatarFindMany {
	direction, _ := param.field().Value.(runtime.Direction)
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "orderBy",
		Value: runtime.Direction(param.field().Name + "_" + string(direction)),
	})
	return r
}

func (r avatarsOnRaidsToAvatarFindMany) Skip(count int) avatarsOnRaidsToAvatarFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r avatarsOnRaidsToAvatarFindMany) Take(count int) avatarsOnRaidsToAvatarFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r avatarsOnRaidsToAvatarFindMany) Cursor(cursor iAvatarsOnRaidsCursorParams) avatarsOnRaidsToAvatarFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r avatarsOnRaidsToAvatarFindMany) Exec(ctx context.Context) (
	[]AvatarsOnRaidsModel,
	error,
) {
	var v findManyAvatarsOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return []AvatarsOnRaidsModel{}, fmt.Errorf(first.Message)
	}

	return v.Data.FindManyAvatarsOnRaids, err
}

func (r avatarsOnRaidsToAvatarFindMany) Update(params ...iAvatarsOnRaidsSetParams) avatarsOnRaidsToAvatarUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "AvatarsOnRaids"
	r.query.Outputs = countOutput

	var v avatarsOnRaidsToAvatarUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type avatarsOnRaidsToAvatarUpdateMany struct {
	query builder.Query
}

func (r avatarsOnRaidsToAvatarUpdateMany) Exec(ctx context.Context) (int, error) {
	var v updateManyAvatarsOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateManyAvatarsOnRaids.Count, err
}

func (r avatarsOnRaidsToAvatarFindMany) Delete() avatarsOnRaidsToAvatarDeleteMany {
	var v avatarsOnRaidsToAvatarDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "AvatarsOnRaids"
	v.query.Outputs = countOutput
	return v
}

type avatarsOnRaidsToAvatarDeleteMany struct {
	query builder.Query
}

func (r avatarsOnRaidsToAvatarDeleteMany) Exec(ctx context.Context) (int, error) {
	var v deleteManyAvatarsOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteManyAvatarsOnRaids.Count, err
}

type avatarsOnRaidsFindOne struct {
	query builder.Query
}

func (r avatarsOnRaidsFindOne) getQuery() builder.Query {
	return r.query
}

func (r avatarsOnRaidsFindOne) with()                   {}
func (r avatarsOnRaidsFindOne) avatarsOnRaidsModel()    {}
func (r avatarsOnRaidsFindOne) avatarsOnRaidsRelation() {}

func (r avatarsOnRaidsActions) FindOne(

	params iAvatarsOnRaidsEqualsParamsUnique,
) avatarsOnRaidsFindOne {
	var v avatarsOnRaidsFindOne
	v.query = builder.NewQuery()
	v.query.Client = r.client

	v.query.Operation = "query"
	v.query.Method = "findOne"
	v.query.Model = "AvatarsOnRaids"
	v.query.Outputs = avatarsOnRaidsOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: []builder.Field{params.field()},
	})

	return v
}

func (r avatarsOnRaidsFindOne) With(params ...iAvatarsOnRaidsRelationWith) avatarsOnRaidsFindOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r avatarsOnRaidsFindOne) Exec(ctx context.Context) (
	AvatarsOnRaidsModel,
	error,
) {
	var v findOneAvatarsOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return AvatarsOnRaidsModel{}, fmt.Errorf(first.Message)
	}

	if v.Data.FindOneAvatarsOnRaids == nil {
		return AvatarsOnRaidsModel{}, ErrNotFound
	}

	return *v.Data.FindOneAvatarsOnRaids, err
}

func (r avatarsOnRaidsFindOne) Update(params ...iAvatarsOnRaidsSetParams) avatarsOnRaidsUpdateOne {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "AvatarsOnRaids"
	r.query.Outputs = avatarsOnRaidsOutput

	var v avatarsOnRaidsUpdateOne
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type avatarsOnRaidsUpdateOne struct {
	query builder.Query
}

func (r avatarsOnRaidsUpdateOne) Exec(ctx context.Context) (AvatarsOnRaidsModel, error) {
	var v updateOneAvatarsOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return AvatarsOnRaidsModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateOneAvatarsOnRaids, err
}

func (r avatarsOnRaidsFindOne) Delete() avatarsOnRaidsDeleteOne {
	var v avatarsOnRaidsDeleteOne
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "AvatarsOnRaids"
	v.query.Outputs = avatarsOnRaidsOutput
	return v
}

type avatarsOnRaidsDeleteOne struct {
	query builder.Query
}

func (r avatarsOnRaidsDeleteOne) Exec(ctx context.Context) (AvatarsOnRaidsModel, error) {
	var v deleteOneAvatarsOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return AvatarsOnRaidsModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteOneAvatarsOnRaids, err
}

type avatarsOnRaidsFindMany struct {
	query builder.Query
}

func (r avatarsOnRaidsFindMany) getQuery() builder.Query {
	return r.query
}

func (r avatarsOnRaidsFindMany) with()                   {}
func (r avatarsOnRaidsFindMany) avatarsOnRaidsModel()    {}
func (r avatarsOnRaidsFindMany) avatarsOnRaidsRelation() {}

func (r avatarsOnRaidsActions) FindMany(

	params ...iAvatarsOnRaidsParams,
) avatarsOnRaidsFindMany {
	var v avatarsOnRaidsFindMany
	v.query = builder.NewQuery()
	v.query.Client = r.client

	v.query.Operation = "query"
	v.query.Method = "findMany"
	v.query.Model = "AvatarsOnRaids"
	v.query.Outputs = avatarsOnRaidsOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r avatarsOnRaidsFindMany) With(params ...iAvatarsOnRaidsRelationWith) avatarsOnRaidsFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r avatarsOnRaidsFindMany) OrderBy(param iAvatarsOnRaidsOrderByParams) avatarsOnRaidsFindMany {
	direction, _ := param.field().Value.(runtime.Direction)
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "orderBy",
		Value: runtime.Direction(param.field().Name + "_" + string(direction)),
	})
	return r
}

func (r avatarsOnRaidsFindMany) Skip(count int) avatarsOnRaidsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r avatarsOnRaidsFindMany) Take(count int) avatarsOnRaidsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r avatarsOnRaidsFindMany) Cursor(cursor iAvatarsOnRaidsCursorParams) avatarsOnRaidsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r avatarsOnRaidsFindMany) Exec(ctx context.Context) (
	[]AvatarsOnRaidsModel,
	error,
) {
	var v findManyAvatarsOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return []AvatarsOnRaidsModel{}, fmt.Errorf(first.Message)
	}

	return v.Data.FindManyAvatarsOnRaids, err
}

func (r avatarsOnRaidsFindMany) Update(params ...iAvatarsOnRaidsSetParams) avatarsOnRaidsUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "AvatarsOnRaids"
	r.query.Outputs = countOutput

	var v avatarsOnRaidsUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type avatarsOnRaidsUpdateMany struct {
	query builder.Query
}

func (r avatarsOnRaidsUpdateMany) Exec(ctx context.Context) (int, error) {
	var v updateManyAvatarsOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateManyAvatarsOnRaids.Count, err
}

func (r avatarsOnRaidsFindMany) Delete() avatarsOnRaidsDeleteMany {
	var v avatarsOnRaidsDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "AvatarsOnRaids"
	v.query.Outputs = countOutput
	return v
}

type avatarsOnRaidsDeleteMany struct {
	query builder.Query
}

func (r avatarsOnRaidsDeleteMany) Exec(ctx context.Context) (int, error) {
	var v deleteManyAvatarsOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteManyAvatarsOnRaids.Count, err
}

type raidBossesOnRaidsToRaidFindOne struct {
	query builder.Query
}

func (r raidBossesOnRaidsToRaidFindOne) getQuery() builder.Query {
	return r.query
}

func (r raidBossesOnRaidsToRaidFindOne) with()                      {}
func (r raidBossesOnRaidsToRaidFindOne) raidBossesOnRaidsModel()    {}
func (r raidBossesOnRaidsToRaidFindOne) raidBossesOnRaidsRelation() {}

func (r raidBossesOnRaidsToRaidFindOne) With(params ...iRaidRelationWith) raidBossesOnRaidsToRaidFindOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r raidBossesOnRaidsToRaidFindOne) Exec(ctx context.Context) (
	RaidBossesOnRaidsModel,
	error,
) {
	var v findOneRaidBossesOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return RaidBossesOnRaidsModel{}, fmt.Errorf(first.Message)
	}

	if v.Data.FindOneRaidBossesOnRaids == nil {
		return RaidBossesOnRaidsModel{}, ErrNotFound
	}

	return *v.Data.FindOneRaidBossesOnRaids, err
}

func (r raidBossesOnRaidsToRaidFindOne) Update(params ...iRaidBossesOnRaidsSetParams) raidBossesOnRaidsToRaidUpdateOne {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "RaidBossesOnRaids"
	r.query.Outputs = raidBossesOnRaidsOutput

	var v raidBossesOnRaidsToRaidUpdateOne
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type raidBossesOnRaidsToRaidUpdateOne struct {
	query builder.Query
}

func (r raidBossesOnRaidsToRaidUpdateOne) Exec(ctx context.Context) (RaidBossesOnRaidsModel, error) {
	var v updateOneRaidBossesOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return RaidBossesOnRaidsModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateOneRaidBossesOnRaids, err
}

func (r raidBossesOnRaidsToRaidFindOne) Delete() raidBossesOnRaidsToRaidDeleteOne {
	var v raidBossesOnRaidsToRaidDeleteOne
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "RaidBossesOnRaids"
	v.query.Outputs = raidBossesOnRaidsOutput
	return v
}

type raidBossesOnRaidsToRaidDeleteOne struct {
	query builder.Query
}

func (r raidBossesOnRaidsToRaidDeleteOne) Exec(ctx context.Context) (RaidBossesOnRaidsModel, error) {
	var v deleteOneRaidBossesOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return RaidBossesOnRaidsModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteOneRaidBossesOnRaids, err
}

type raidBossesOnRaidsToRaidFindMany struct {
	query builder.Query
}

func (r raidBossesOnRaidsToRaidFindMany) getQuery() builder.Query {
	return r.query
}

func (r raidBossesOnRaidsToRaidFindMany) with()                      {}
func (r raidBossesOnRaidsToRaidFindMany) raidBossesOnRaidsModel()    {}
func (r raidBossesOnRaidsToRaidFindMany) raidBossesOnRaidsRelation() {}

func (r raidBossesOnRaidsToRaidFindMany) With(params ...iRaidRelationWith) raidBossesOnRaidsToRaidFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r raidBossesOnRaidsToRaidFindMany) OrderBy(param iRaidBossesOnRaidsOrderByParams) raidBossesOnRaidsToRaidFindMany {
	direction, _ := param.field().Value.(runtime.Direction)
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "orderBy",
		Value: runtime.Direction(param.field().Name + "_" + string(direction)),
	})
	return r
}

func (r raidBossesOnRaidsToRaidFindMany) Skip(count int) raidBossesOnRaidsToRaidFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r raidBossesOnRaidsToRaidFindMany) Take(count int) raidBossesOnRaidsToRaidFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r raidBossesOnRaidsToRaidFindMany) Cursor(cursor iRaidBossesOnRaidsCursorParams) raidBossesOnRaidsToRaidFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r raidBossesOnRaidsToRaidFindMany) Exec(ctx context.Context) (
	[]RaidBossesOnRaidsModel,
	error,
) {
	var v findManyRaidBossesOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return []RaidBossesOnRaidsModel{}, fmt.Errorf(first.Message)
	}

	return v.Data.FindManyRaidBossesOnRaids, err
}

func (r raidBossesOnRaidsToRaidFindMany) Update(params ...iRaidBossesOnRaidsSetParams) raidBossesOnRaidsToRaidUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "RaidBossesOnRaids"
	r.query.Outputs = countOutput

	var v raidBossesOnRaidsToRaidUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type raidBossesOnRaidsToRaidUpdateMany struct {
	query builder.Query
}

func (r raidBossesOnRaidsToRaidUpdateMany) Exec(ctx context.Context) (int, error) {
	var v updateManyRaidBossesOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateManyRaidBossesOnRaids.Count, err
}

func (r raidBossesOnRaidsToRaidFindMany) Delete() raidBossesOnRaidsToRaidDeleteMany {
	var v raidBossesOnRaidsToRaidDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "RaidBossesOnRaids"
	v.query.Outputs = countOutput
	return v
}

type raidBossesOnRaidsToRaidDeleteMany struct {
	query builder.Query
}

func (r raidBossesOnRaidsToRaidDeleteMany) Exec(ctx context.Context) (int, error) {
	var v deleteManyRaidBossesOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteManyRaidBossesOnRaids.Count, err
}

type raidBossesOnRaidsToRaidBossFindOne struct {
	query builder.Query
}

func (r raidBossesOnRaidsToRaidBossFindOne) getQuery() builder.Query {
	return r.query
}

func (r raidBossesOnRaidsToRaidBossFindOne) with()                      {}
func (r raidBossesOnRaidsToRaidBossFindOne) raidBossesOnRaidsModel()    {}
func (r raidBossesOnRaidsToRaidBossFindOne) raidBossesOnRaidsRelation() {}

func (r raidBossesOnRaidsToRaidBossFindOne) With(params ...iRaidBossRelationWith) raidBossesOnRaidsToRaidBossFindOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r raidBossesOnRaidsToRaidBossFindOne) Exec(ctx context.Context) (
	RaidBossesOnRaidsModel,
	error,
) {
	var v findOneRaidBossesOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return RaidBossesOnRaidsModel{}, fmt.Errorf(first.Message)
	}

	if v.Data.FindOneRaidBossesOnRaids == nil {
		return RaidBossesOnRaidsModel{}, ErrNotFound
	}

	return *v.Data.FindOneRaidBossesOnRaids, err
}

func (r raidBossesOnRaidsToRaidBossFindOne) Update(params ...iRaidBossesOnRaidsSetParams) raidBossesOnRaidsToRaidBossUpdateOne {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "RaidBossesOnRaids"
	r.query.Outputs = raidBossesOnRaidsOutput

	var v raidBossesOnRaidsToRaidBossUpdateOne
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type raidBossesOnRaidsToRaidBossUpdateOne struct {
	query builder.Query
}

func (r raidBossesOnRaidsToRaidBossUpdateOne) Exec(ctx context.Context) (RaidBossesOnRaidsModel, error) {
	var v updateOneRaidBossesOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return RaidBossesOnRaidsModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateOneRaidBossesOnRaids, err
}

func (r raidBossesOnRaidsToRaidBossFindOne) Delete() raidBossesOnRaidsToRaidBossDeleteOne {
	var v raidBossesOnRaidsToRaidBossDeleteOne
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "RaidBossesOnRaids"
	v.query.Outputs = raidBossesOnRaidsOutput
	return v
}

type raidBossesOnRaidsToRaidBossDeleteOne struct {
	query builder.Query
}

func (r raidBossesOnRaidsToRaidBossDeleteOne) Exec(ctx context.Context) (RaidBossesOnRaidsModel, error) {
	var v deleteOneRaidBossesOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return RaidBossesOnRaidsModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteOneRaidBossesOnRaids, err
}

type raidBossesOnRaidsToRaidBossFindMany struct {
	query builder.Query
}

func (r raidBossesOnRaidsToRaidBossFindMany) getQuery() builder.Query {
	return r.query
}

func (r raidBossesOnRaidsToRaidBossFindMany) with()                      {}
func (r raidBossesOnRaidsToRaidBossFindMany) raidBossesOnRaidsModel()    {}
func (r raidBossesOnRaidsToRaidBossFindMany) raidBossesOnRaidsRelation() {}

func (r raidBossesOnRaidsToRaidBossFindMany) With(params ...iRaidBossRelationWith) raidBossesOnRaidsToRaidBossFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r raidBossesOnRaidsToRaidBossFindMany) OrderBy(param iRaidBossesOnRaidsOrderByParams) raidBossesOnRaidsToRaidBossFindMany {
	direction, _ := param.field().Value.(runtime.Direction)
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "orderBy",
		Value: runtime.Direction(param.field().Name + "_" + string(direction)),
	})
	return r
}

func (r raidBossesOnRaidsToRaidBossFindMany) Skip(count int) raidBossesOnRaidsToRaidBossFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r raidBossesOnRaidsToRaidBossFindMany) Take(count int) raidBossesOnRaidsToRaidBossFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r raidBossesOnRaidsToRaidBossFindMany) Cursor(cursor iRaidBossesOnRaidsCursorParams) raidBossesOnRaidsToRaidBossFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r raidBossesOnRaidsToRaidBossFindMany) Exec(ctx context.Context) (
	[]RaidBossesOnRaidsModel,
	error,
) {
	var v findManyRaidBossesOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return []RaidBossesOnRaidsModel{}, fmt.Errorf(first.Message)
	}

	return v.Data.FindManyRaidBossesOnRaids, err
}

func (r raidBossesOnRaidsToRaidBossFindMany) Update(params ...iRaidBossesOnRaidsSetParams) raidBossesOnRaidsToRaidBossUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "RaidBossesOnRaids"
	r.query.Outputs = countOutput

	var v raidBossesOnRaidsToRaidBossUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type raidBossesOnRaidsToRaidBossUpdateMany struct {
	query builder.Query
}

func (r raidBossesOnRaidsToRaidBossUpdateMany) Exec(ctx context.Context) (int, error) {
	var v updateManyRaidBossesOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateManyRaidBossesOnRaids.Count, err
}

func (r raidBossesOnRaidsToRaidBossFindMany) Delete() raidBossesOnRaidsToRaidBossDeleteMany {
	var v raidBossesOnRaidsToRaidBossDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "RaidBossesOnRaids"
	v.query.Outputs = countOutput
	return v
}

type raidBossesOnRaidsToRaidBossDeleteMany struct {
	query builder.Query
}

func (r raidBossesOnRaidsToRaidBossDeleteMany) Exec(ctx context.Context) (int, error) {
	var v deleteManyRaidBossesOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteManyRaidBossesOnRaids.Count, err
}

type raidBossesOnRaidsFindOne struct {
	query builder.Query
}

func (r raidBossesOnRaidsFindOne) getQuery() builder.Query {
	return r.query
}

func (r raidBossesOnRaidsFindOne) with()                      {}
func (r raidBossesOnRaidsFindOne) raidBossesOnRaidsModel()    {}
func (r raidBossesOnRaidsFindOne) raidBossesOnRaidsRelation() {}

func (r raidBossesOnRaidsActions) FindOne(

	params iRaidBossesOnRaidsEqualsParamsUnique,
) raidBossesOnRaidsFindOne {
	var v raidBossesOnRaidsFindOne
	v.query = builder.NewQuery()
	v.query.Client = r.client

	v.query.Operation = "query"
	v.query.Method = "findOne"
	v.query.Model = "RaidBossesOnRaids"
	v.query.Outputs = raidBossesOnRaidsOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: []builder.Field{params.field()},
	})

	return v
}

func (r raidBossesOnRaidsFindOne) With(params ...iRaidBossesOnRaidsRelationWith) raidBossesOnRaidsFindOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r raidBossesOnRaidsFindOne) Exec(ctx context.Context) (
	RaidBossesOnRaidsModel,
	error,
) {
	var v findOneRaidBossesOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return RaidBossesOnRaidsModel{}, fmt.Errorf(first.Message)
	}

	if v.Data.FindOneRaidBossesOnRaids == nil {
		return RaidBossesOnRaidsModel{}, ErrNotFound
	}

	return *v.Data.FindOneRaidBossesOnRaids, err
}

func (r raidBossesOnRaidsFindOne) Update(params ...iRaidBossesOnRaidsSetParams) raidBossesOnRaidsUpdateOne {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "RaidBossesOnRaids"
	r.query.Outputs = raidBossesOnRaidsOutput

	var v raidBossesOnRaidsUpdateOne
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type raidBossesOnRaidsUpdateOne struct {
	query builder.Query
}

func (r raidBossesOnRaidsUpdateOne) Exec(ctx context.Context) (RaidBossesOnRaidsModel, error) {
	var v updateOneRaidBossesOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return RaidBossesOnRaidsModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateOneRaidBossesOnRaids, err
}

func (r raidBossesOnRaidsFindOne) Delete() raidBossesOnRaidsDeleteOne {
	var v raidBossesOnRaidsDeleteOne
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "RaidBossesOnRaids"
	v.query.Outputs = raidBossesOnRaidsOutput
	return v
}

type raidBossesOnRaidsDeleteOne struct {
	query builder.Query
}

func (r raidBossesOnRaidsDeleteOne) Exec(ctx context.Context) (RaidBossesOnRaidsModel, error) {
	var v deleteOneRaidBossesOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return RaidBossesOnRaidsModel{}, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteOneRaidBossesOnRaids, err
}

type raidBossesOnRaidsFindMany struct {
	query builder.Query
}

func (r raidBossesOnRaidsFindMany) getQuery() builder.Query {
	return r.query
}

func (r raidBossesOnRaidsFindMany) with()                      {}
func (r raidBossesOnRaidsFindMany) raidBossesOnRaidsModel()    {}
func (r raidBossesOnRaidsFindMany) raidBossesOnRaidsRelation() {}

func (r raidBossesOnRaidsActions) FindMany(

	params ...iRaidBossesOnRaidsParams,
) raidBossesOnRaidsFindMany {
	var v raidBossesOnRaidsFindMany
	v.query = builder.NewQuery()
	v.query.Client = r.client

	v.query.Operation = "query"
	v.query.Method = "findMany"
	v.query.Model = "RaidBossesOnRaids"
	v.query.Outputs = raidBossesOnRaidsOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r raidBossesOnRaidsFindMany) With(params ...iRaidBossesOnRaidsRelationWith) raidBossesOnRaidsFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r raidBossesOnRaidsFindMany) OrderBy(param iRaidBossesOnRaidsOrderByParams) raidBossesOnRaidsFindMany {
	direction, _ := param.field().Value.(runtime.Direction)
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "orderBy",
		Value: runtime.Direction(param.field().Name + "_" + string(direction)),
	})
	return r
}

func (r raidBossesOnRaidsFindMany) Skip(count int) raidBossesOnRaidsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r raidBossesOnRaidsFindMany) Take(count int) raidBossesOnRaidsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r raidBossesOnRaidsFindMany) Cursor(cursor iRaidBossesOnRaidsCursorParams) raidBossesOnRaidsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r raidBossesOnRaidsFindMany) Exec(ctx context.Context) (
	[]RaidBossesOnRaidsModel,
	error,
) {
	var v findManyRaidBossesOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return []RaidBossesOnRaidsModel{}, fmt.Errorf(first.Message)
	}

	return v.Data.FindManyRaidBossesOnRaids, err
}

func (r raidBossesOnRaidsFindMany) Update(params ...iRaidBossesOnRaidsSetParams) raidBossesOnRaidsUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "RaidBossesOnRaids"
	r.query.Outputs = countOutput

	var v raidBossesOnRaidsUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type raidBossesOnRaidsUpdateMany struct {
	query builder.Query
}

func (r raidBossesOnRaidsUpdateMany) Exec(ctx context.Context) (int, error) {
	var v updateManyRaidBossesOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.UpdateManyRaidBossesOnRaids.Count, err
}

func (r raidBossesOnRaidsFindMany) Delete() raidBossesOnRaidsDeleteMany {
	var v raidBossesOnRaidsDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "RaidBossesOnRaids"
	v.query.Outputs = countOutput
	return v
}

type raidBossesOnRaidsDeleteMany struct {
	query builder.Query
}

func (r raidBossesOnRaidsDeleteMany) Exec(ctx context.Context) (int, error) {
	var v deleteManyRaidBossesOnRaidsResponse
	err := r.query.Exec(ctx, &v)
	if v.Errors != nil {
		first := v.Errors[0]
		return -1, fmt.Errorf(first.Message)
	}
	return v.Data.DeleteManyRaidBossesOnRaids.Count, err
}

// --- template structs.gotpl ---

type findOneUserResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		FindOneUser *UserModel `json:"findOneUser"`
	} `json:"data"`
}

type findOneUserResult struct {
	Count int `json:"count"`
}

type findManyUserResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		FindManyUser []UserModel `json:"findManyUser"`
	} `json:"data"`
}

type findManyUserResult struct {
	Count int `json:"count"`
}

type createOneUserResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		CreateOneUser UserModel `json:"createOneUser"`
	} `json:"data"`
}

type createOneUserResult struct {
	Count int `json:"count"`
}

type createManyUserResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		CreateManyUser createManyUserResult `json:"createManyUser"`
	} `json:"data"`
}

type createManyUserResult struct {
	Count int `json:"count"`
}

type updateOneUserResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		UpdateOneUser UserModel `json:"updateOneUser"`
	} `json:"data"`
}

type updateOneUserResult struct {
	Count int `json:"count"`
}

type updateManyUserResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		UpdateManyUser updateManyUserResult `json:"updateManyUser"`
	} `json:"data"`
}

type updateManyUserResult struct {
	Count int `json:"count"`
}

type deleteOneUserResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		DeleteOneUser UserModel `json:"deleteOneUser"`
	} `json:"data"`
}

type deleteOneUserResult struct {
	Count int `json:"count"`
}

type deleteManyUserResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		DeleteManyUser deleteManyUserResult `json:"deleteManyUser"`
	} `json:"data"`
}

type deleteManyUserResult struct {
	Count int `json:"count"`
}

type findOneAvatarResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		FindOneAvatar *AvatarModel `json:"findOneAvatar"`
	} `json:"data"`
}

type findOneAvatarResult struct {
	Count int `json:"count"`
}

type findManyAvatarResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		FindManyAvatar []AvatarModel `json:"findManyAvatar"`
	} `json:"data"`
}

type findManyAvatarResult struct {
	Count int `json:"count"`
}

type createOneAvatarResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		CreateOneAvatar AvatarModel `json:"createOneAvatar"`
	} `json:"data"`
}

type createOneAvatarResult struct {
	Count int `json:"count"`
}

type createManyAvatarResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		CreateManyAvatar createManyAvatarResult `json:"createManyAvatar"`
	} `json:"data"`
}

type createManyAvatarResult struct {
	Count int `json:"count"`
}

type updateOneAvatarResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		UpdateOneAvatar AvatarModel `json:"updateOneAvatar"`
	} `json:"data"`
}

type updateOneAvatarResult struct {
	Count int `json:"count"`
}

type updateManyAvatarResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		UpdateManyAvatar updateManyAvatarResult `json:"updateManyAvatar"`
	} `json:"data"`
}

type updateManyAvatarResult struct {
	Count int `json:"count"`
}

type deleteOneAvatarResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		DeleteOneAvatar AvatarModel `json:"deleteOneAvatar"`
	} `json:"data"`
}

type deleteOneAvatarResult struct {
	Count int `json:"count"`
}

type deleteManyAvatarResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		DeleteManyAvatar deleteManyAvatarResult `json:"deleteManyAvatar"`
	} `json:"data"`
}

type deleteManyAvatarResult struct {
	Count int `json:"count"`
}

type findOneRaidResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		FindOneRaid *RaidModel `json:"findOneRaid"`
	} `json:"data"`
}

type findOneRaidResult struct {
	Count int `json:"count"`
}

type findManyRaidResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		FindManyRaid []RaidModel `json:"findManyRaid"`
	} `json:"data"`
}

type findManyRaidResult struct {
	Count int `json:"count"`
}

type createOneRaidResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		CreateOneRaid RaidModel `json:"createOneRaid"`
	} `json:"data"`
}

type createOneRaidResult struct {
	Count int `json:"count"`
}

type createManyRaidResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		CreateManyRaid createManyRaidResult `json:"createManyRaid"`
	} `json:"data"`
}

type createManyRaidResult struct {
	Count int `json:"count"`
}

type updateOneRaidResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		UpdateOneRaid RaidModel `json:"updateOneRaid"`
	} `json:"data"`
}

type updateOneRaidResult struct {
	Count int `json:"count"`
}

type updateManyRaidResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		UpdateManyRaid updateManyRaidResult `json:"updateManyRaid"`
	} `json:"data"`
}

type updateManyRaidResult struct {
	Count int `json:"count"`
}

type deleteOneRaidResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		DeleteOneRaid RaidModel `json:"deleteOneRaid"`
	} `json:"data"`
}

type deleteOneRaidResult struct {
	Count int `json:"count"`
}

type deleteManyRaidResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		DeleteManyRaid deleteManyRaidResult `json:"deleteManyRaid"`
	} `json:"data"`
}

type deleteManyRaidResult struct {
	Count int `json:"count"`
}

type findOneRaidBossResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		FindOneRaidBoss *RaidBossModel `json:"findOneRaidBoss"`
	} `json:"data"`
}

type findOneRaidBossResult struct {
	Count int `json:"count"`
}

type findManyRaidBossResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		FindManyRaidBoss []RaidBossModel `json:"findManyRaidBoss"`
	} `json:"data"`
}

type findManyRaidBossResult struct {
	Count int `json:"count"`
}

type createOneRaidBossResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		CreateOneRaidBoss RaidBossModel `json:"createOneRaidBoss"`
	} `json:"data"`
}

type createOneRaidBossResult struct {
	Count int `json:"count"`
}

type createManyRaidBossResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		CreateManyRaidBoss createManyRaidBossResult `json:"createManyRaidBoss"`
	} `json:"data"`
}

type createManyRaidBossResult struct {
	Count int `json:"count"`
}

type updateOneRaidBossResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		UpdateOneRaidBoss RaidBossModel `json:"updateOneRaidBoss"`
	} `json:"data"`
}

type updateOneRaidBossResult struct {
	Count int `json:"count"`
}

type updateManyRaidBossResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		UpdateManyRaidBoss updateManyRaidBossResult `json:"updateManyRaidBoss"`
	} `json:"data"`
}

type updateManyRaidBossResult struct {
	Count int `json:"count"`
}

type deleteOneRaidBossResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		DeleteOneRaidBoss RaidBossModel `json:"deleteOneRaidBoss"`
	} `json:"data"`
}

type deleteOneRaidBossResult struct {
	Count int `json:"count"`
}

type deleteManyRaidBossResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		DeleteManyRaidBoss deleteManyRaidBossResult `json:"deleteManyRaidBoss"`
	} `json:"data"`
}

type deleteManyRaidBossResult struct {
	Count int `json:"count"`
}

type findOneRaidAttackResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		FindOneRaidAttack *RaidAttackModel `json:"findOneRaidAttack"`
	} `json:"data"`
}

type findOneRaidAttackResult struct {
	Count int `json:"count"`
}

type findManyRaidAttackResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		FindManyRaidAttack []RaidAttackModel `json:"findManyRaidAttack"`
	} `json:"data"`
}

type findManyRaidAttackResult struct {
	Count int `json:"count"`
}

type createOneRaidAttackResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		CreateOneRaidAttack RaidAttackModel `json:"createOneRaidAttack"`
	} `json:"data"`
}

type createOneRaidAttackResult struct {
	Count int `json:"count"`
}

type createManyRaidAttackResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		CreateManyRaidAttack createManyRaidAttackResult `json:"createManyRaidAttack"`
	} `json:"data"`
}

type createManyRaidAttackResult struct {
	Count int `json:"count"`
}

type updateOneRaidAttackResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		UpdateOneRaidAttack RaidAttackModel `json:"updateOneRaidAttack"`
	} `json:"data"`
}

type updateOneRaidAttackResult struct {
	Count int `json:"count"`
}

type updateManyRaidAttackResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		UpdateManyRaidAttack updateManyRaidAttackResult `json:"updateManyRaidAttack"`
	} `json:"data"`
}

type updateManyRaidAttackResult struct {
	Count int `json:"count"`
}

type deleteOneRaidAttackResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		DeleteOneRaidAttack RaidAttackModel `json:"deleteOneRaidAttack"`
	} `json:"data"`
}

type deleteOneRaidAttackResult struct {
	Count int `json:"count"`
}

type deleteManyRaidAttackResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		DeleteManyRaidAttack deleteManyRaidAttackResult `json:"deleteManyRaidAttack"`
	} `json:"data"`
}

type deleteManyRaidAttackResult struct {
	Count int `json:"count"`
}

type findOneAvatarsOnRaidsResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		FindOneAvatarsOnRaids *AvatarsOnRaidsModel `json:"findOneAvatarsOnRaids"`
	} `json:"data"`
}

type findOneAvatarsOnRaidsResult struct {
	Count int `json:"count"`
}

type findManyAvatarsOnRaidsResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		FindManyAvatarsOnRaids []AvatarsOnRaidsModel `json:"findManyAvatarsOnRaids"`
	} `json:"data"`
}

type findManyAvatarsOnRaidsResult struct {
	Count int `json:"count"`
}

type createOneAvatarsOnRaidsResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		CreateOneAvatarsOnRaids AvatarsOnRaidsModel `json:"createOneAvatarsOnRaids"`
	} `json:"data"`
}

type createOneAvatarsOnRaidsResult struct {
	Count int `json:"count"`
}

type createManyAvatarsOnRaidsResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		CreateManyAvatarsOnRaids createManyAvatarsOnRaidsResult `json:"createManyAvatarsOnRaids"`
	} `json:"data"`
}

type createManyAvatarsOnRaidsResult struct {
	Count int `json:"count"`
}

type updateOneAvatarsOnRaidsResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		UpdateOneAvatarsOnRaids AvatarsOnRaidsModel `json:"updateOneAvatarsOnRaids"`
	} `json:"data"`
}

type updateOneAvatarsOnRaidsResult struct {
	Count int `json:"count"`
}

type updateManyAvatarsOnRaidsResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		UpdateManyAvatarsOnRaids updateManyAvatarsOnRaidsResult `json:"updateManyAvatarsOnRaids"`
	} `json:"data"`
}

type updateManyAvatarsOnRaidsResult struct {
	Count int `json:"count"`
}

type deleteOneAvatarsOnRaidsResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		DeleteOneAvatarsOnRaids AvatarsOnRaidsModel `json:"deleteOneAvatarsOnRaids"`
	} `json:"data"`
}

type deleteOneAvatarsOnRaidsResult struct {
	Count int `json:"count"`
}

type deleteManyAvatarsOnRaidsResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		DeleteManyAvatarsOnRaids deleteManyAvatarsOnRaidsResult `json:"deleteManyAvatarsOnRaids"`
	} `json:"data"`
}

type deleteManyAvatarsOnRaidsResult struct {
	Count int `json:"count"`
}

type findOneRaidBossesOnRaidsResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		FindOneRaidBossesOnRaids *RaidBossesOnRaidsModel `json:"findOneRaidBossesOnRaids"`
	} `json:"data"`
}

type findOneRaidBossesOnRaidsResult struct {
	Count int `json:"count"`
}

type findManyRaidBossesOnRaidsResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		FindManyRaidBossesOnRaids []RaidBossesOnRaidsModel `json:"findManyRaidBossesOnRaids"`
	} `json:"data"`
}

type findManyRaidBossesOnRaidsResult struct {
	Count int `json:"count"`
}

type createOneRaidBossesOnRaidsResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		CreateOneRaidBossesOnRaids RaidBossesOnRaidsModel `json:"createOneRaidBossesOnRaids"`
	} `json:"data"`
}

type createOneRaidBossesOnRaidsResult struct {
	Count int `json:"count"`
}

type createManyRaidBossesOnRaidsResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		CreateManyRaidBossesOnRaids createManyRaidBossesOnRaidsResult `json:"createManyRaidBossesOnRaids"`
	} `json:"data"`
}

type createManyRaidBossesOnRaidsResult struct {
	Count int `json:"count"`
}

type updateOneRaidBossesOnRaidsResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		UpdateOneRaidBossesOnRaids RaidBossesOnRaidsModel `json:"updateOneRaidBossesOnRaids"`
	} `json:"data"`
}

type updateOneRaidBossesOnRaidsResult struct {
	Count int `json:"count"`
}

type updateManyRaidBossesOnRaidsResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		UpdateManyRaidBossesOnRaids updateManyRaidBossesOnRaidsResult `json:"updateManyRaidBossesOnRaids"`
	} `json:"data"`
}

type updateManyRaidBossesOnRaidsResult struct {
	Count int `json:"count"`
}

type deleteOneRaidBossesOnRaidsResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		DeleteOneRaidBossesOnRaids RaidBossesOnRaidsModel `json:"deleteOneRaidBossesOnRaids"`
	} `json:"data"`
}

type deleteOneRaidBossesOnRaidsResult struct {
	Count int `json:"count"`
}

type deleteManyRaidBossesOnRaidsResponse struct {
	Errors []engine.GQLError `json:"errors"`
	Data   struct {
		DeleteManyRaidBossesOnRaids deleteManyRaidBossesOnRaidsResult `json:"deleteManyRaidBossesOnRaids"`
	} `json:"data"`
}

type deleteManyRaidBossesOnRaidsResult struct {
	Count int `json:"count"`
}

// --- template client.gotpl ---
const schema = `datasource db {
    provider = "postgresql"
    url      = "postgresql://postgres:postgres@localhost:5432/crossing_dev"
}

generator db {
    provider = "go run github.com/prisma/prisma-client-go"
}

model User {
    id              Int       @default(autoincrement()) @id
    createdAt       DateTime  @default(now())
    deletedAt       DateTime?
    updatedAt       DateTime  @updatedAt
    discordUserId   String    @unique
    email           String?   @unique
    discordUsername String?   @unique
    firstName       String?
    lastName        String?
    avatar          Avatar?
}

model Avatar {
    id             Int              @default(autoincrement()) @id
    createdAt      DateTime         @default(now())
    deletedAt      DateTime?
    updatedAt      DateTime         @updatedAt
    User           User             @relation(fields: [userId], references: [id])
    userId         Int
    RaidAttack     RaidAttack[]
    AvatarsOnRaids AvatarsOnRaids[]
}

model Raid {
    id                 Int                 @default(autoincrement()) @id
    createdAt          DateTime            @default(now())
    deletedAt          DateTime?
    updatedAt          DateTime            @updatedAt
    startTime          DateTime            @default(now())
    endTime            DateTime?
    completionProgress Float               @default(0)
    active             Boolean             @default(false)
    playerLimit        Int                 @default(10)
    RaidAttack         RaidAttack[]
    AvatarsOnRaids     AvatarsOnRaids[]
    RaidBossesOnRaids  RaidBossesOnRaids[]
}

model RaidBoss {
    id                Int                 @default(autoincrement()) @id
    createdAt         DateTime            @default(now())
    deletedAt         DateTime?
    updatedAt         DateTime            @updatedAt
    name              String              @unique
    image             String?
    RaidBossesOnRaids RaidBossesOnRaids[]
    RaidAttack        RaidAttack[]
}

model RaidAttack {
    createdAt  DateTime  @default(now())
    deletedAt  DateTime?
    updatedAt  DateTime  @updatedAt
    raid       Raid      @relation(fields: [raidId], references: [id])
    raidId     Int
    avatar     Avatar    @relation(fields: [avatarId], references: [id])
    avatarId   Int
    RaidBoss   RaidBoss  @relation(fields: [raidBossId], references: [id])
    raidBossId Int

    @@id([raidId, avatarId, raidBossId])
}

model AvatarsOnRaids {
    createdAt DateTime  @default(now())
    deletedAt DateTime?
    updatedAt DateTime  @updatedAt
    raid      Raid      @relation(fields: [raidId], references: [id])
    raidId    Int
    avatar    Avatar    @relation(fields: [avatarId], references: [id])
    avatarId  Int

    @@id([raidId, avatarId])
}

model RaidBossesOnRaids {
    createdAt  DateTime  @default(now())
    deletedAt  DateTime?
    updatedAt  DateTime  @updatedAt
    raid       Raid      @relation(fields: [raidId], references: [id])
    raidId     Int
    raidBoss   RaidBoss  @relation(fields: [raidBossId], references: [id])
    raidBossId Int

    @@id([raidId, raidBossId])
}
`

// hasBinaryTargets is true when binaryTargets are provided on generation time
var hasBinaryTargets = false

// NewClient creates a new Prisma Client Go client.
// The client is not connected to the Prisma engine yet.
//
// Example:
//
//   client := db.NewClient()
//   err := client.Connect()
//   if err != nil {
//     handle(err)
//   }
//
//   defer func() {
//     err := client.Disconnect()
//     if err != nil {
//       panic(fmt.Errorf("could not disconnect: %w", err))
//     }
//   }()
func NewClient() *PrismaClient {
	c := &PrismaClient{}

	c.Engine = engine.NewEngine(schema, hasBinaryTargets)
	c.User = userActions{client: c}
	c.Avatar = avatarActions{client: c}
	c.Raid = raidActions{client: c}
	c.RaidBoss = raidBossActions{client: c}
	c.RaidAttack = raidAttackActions{client: c}
	c.AvatarsOnRaids = avatarsOnRaidsActions{client: c}
	c.RaidBossesOnRaids = raidBossesOnRaidsActions{client: c}

	c.Actions = &raw.Actions{Client: c}

	return c
}

// PrismaClient is the instance of the Prisma Client Go client.
type PrismaClient struct {
	// engine spawns and manages the binary
	*engine.Engine

	*raw.Actions

	// User provides access to CRUD methods.
	User userActions
	// Avatar provides access to CRUD methods.
	Avatar avatarActions
	// Raid provides access to CRUD methods.
	Raid raidActions
	// RaidBoss provides access to CRUD methods.
	RaidBoss raidBossActions
	// RaidAttack provides access to CRUD methods.
	RaidAttack raidAttackActions
	// AvatarsOnRaids provides access to CRUD methods.
	AvatarsOnRaids avatarsOnRaidsActions
	// RaidBossesOnRaids provides access to CRUD methods.
	RaidBossesOnRaids raidBossesOnRaidsActions
}

// Connects to the Prisma query engine. Required to call before accessing data.
// It is recommended to immediately defer calling Disconnect.
//
// Example:
//
//   err := client.Connect()
//   if err != nil {
//     handle(err)
//   }
//
//   defer func() {
//     err := client.Disconnect()
//     if err != nil {
//       panic(fmt.Errorf("could not disconnect: %w", err))
//     }
//   }()
func (c *PrismaClient) Connect() error {
	return c.Engine.Connect()
}

// Disconnects from the Prisma query engine.
// This is usually invoked on kill signals in long running applications (like webservers),
// or when no database access is needed anymore (like after executing a CLI command).
//
// Should be usually invoked directly after calling client.Connect(), for example as follows:
//
//   // after client.Connect()
//
//   defer func() {
//     err := client.Disconnect()
//     if err != nil {
//       panic(fmt.Errorf("could not disconnect: %w", err))
//     }
//   }()
func (c *PrismaClient) Disconnect() error {
	return c.Engine.Disconnect()
}

// --- template enums.gotpl ---

// --- template errors.gotpl ---
// ErrNotFound gets returned when a database record does not exist
var ErrNotFound = errors.New("ErrNotFound")

// --- template models.gotpl ---

// UserModel represents the `json:"User"` model and is a wrapper for accessing fields and methods
type UserModel struct {
	InternalUser
	RelationsUser
}

// InternalUser holds the actual data
type InternalUser struct {
	ID              int       `json:"id"`
	CreatedAt       DateTime  `json:"createdAt"`
	DeletedAt       *DateTime `json:"deletedAt"`
	UpdatedAt       DateTime  `json:"updatedAt"`
	DiscordUserID   string    `json:"discordUserId"`
	Email           *string   `json:"email"`
	DiscordUsername *string   `json:"discordUsername"`
	FirstName       *string   `json:"firstName"`
	LastName        *string   `json:"lastName"`
}

// RelationsUser holds the relation data separately
type RelationsUser struct {
	Avatar *AvatarModel `json:"avatar"`
}

func (r UserModel) DeletedAt() (value DateTime, ok bool) {
	if r.InternalUser.DeletedAt == nil {
		return value, false
	}
	return *r.InternalUser.DeletedAt, true
}

func (r UserModel) Email() (value string, ok bool) {
	if r.InternalUser.Email == nil {
		return value, false
	}
	return *r.InternalUser.Email, true
}

func (r UserModel) DiscordUsername() (value string, ok bool) {
	if r.InternalUser.DiscordUsername == nil {
		return value, false
	}
	return *r.InternalUser.DiscordUsername, true
}

func (r UserModel) FirstName() (value string, ok bool) {
	if r.InternalUser.FirstName == nil {
		return value, false
	}
	return *r.InternalUser.FirstName, true
}

func (r UserModel) LastName() (value string, ok bool) {
	if r.InternalUser.LastName == nil {
		return value, false
	}
	return *r.InternalUser.LastName, true
}

func (r UserModel) Avatar() (value AvatarModel, ok bool) {
	if r.RelationsUser.Avatar == nil {
		return value, false
	}
	return *r.RelationsUser.Avatar, true
}

// AvatarModel represents the `json:"Avatar"` model and is a wrapper for accessing fields and methods
type AvatarModel struct {
	InternalAvatar
	RelationsAvatar
}

// InternalAvatar holds the actual data
type InternalAvatar struct {
	ID        int       `json:"id"`
	CreatedAt DateTime  `json:"createdAt"`
	DeletedAt *DateTime `json:"deletedAt"`
	UpdatedAt DateTime  `json:"updatedAt"`
	UserID    int       `json:"userId"`
}

// RelationsAvatar holds the relation data separately
type RelationsAvatar struct {
	User           *UserModel            `json:"User"`
	RaidAttack     []RaidAttackModel     `json:"RaidAttack"`
	AvatarsOnRaids []AvatarsOnRaidsModel `json:"AvatarsOnRaids"`
}

func (r AvatarModel) DeletedAt() (value DateTime, ok bool) {
	if r.InternalAvatar.DeletedAt == nil {
		return value, false
	}
	return *r.InternalAvatar.DeletedAt, true
}

func (r AvatarModel) User() (value UserModel) {
	if r.RelationsAvatar.User == nil {
		panic("attempted to access user but did not fetch it using the .With() syntax")
	}
	return *r.RelationsAvatar.User
}

func (r AvatarModel) RaidAttack() (value []RaidAttackModel) {
	if r.RelationsAvatar.RaidAttack == nil {
		return value
	}
	return r.RelationsAvatar.RaidAttack
}

func (r AvatarModel) AvatarsOnRaids() (value []AvatarsOnRaidsModel) {
	if r.RelationsAvatar.AvatarsOnRaids == nil {
		return value
	}
	return r.RelationsAvatar.AvatarsOnRaids
}

// RaidModel represents the `json:"Raid"` model and is a wrapper for accessing fields and methods
type RaidModel struct {
	InternalRaid
	RelationsRaid
}

// InternalRaid holds the actual data
type InternalRaid struct {
	ID                 int       `json:"id"`
	CreatedAt          DateTime  `json:"createdAt"`
	DeletedAt          *DateTime `json:"deletedAt"`
	UpdatedAt          DateTime  `json:"updatedAt"`
	StartTime          DateTime  `json:"startTime"`
	EndTime            *DateTime `json:"endTime"`
	CompletionProgress float64   `json:"completionProgress"`
	Active             bool      `json:"active"`
	PlayerLimit        int       `json:"playerLimit"`
}

// RelationsRaid holds the relation data separately
type RelationsRaid struct {
	RaidAttack        []RaidAttackModel        `json:"RaidAttack"`
	AvatarsOnRaids    []AvatarsOnRaidsModel    `json:"AvatarsOnRaids"`
	RaidBossesOnRaids []RaidBossesOnRaidsModel `json:"RaidBossesOnRaids"`
}

func (r RaidModel) DeletedAt() (value DateTime, ok bool) {
	if r.InternalRaid.DeletedAt == nil {
		return value, false
	}
	return *r.InternalRaid.DeletedAt, true
}

func (r RaidModel) EndTime() (value DateTime, ok bool) {
	if r.InternalRaid.EndTime == nil {
		return value, false
	}
	return *r.InternalRaid.EndTime, true
}

func (r RaidModel) RaidAttack() (value []RaidAttackModel) {
	if r.RelationsRaid.RaidAttack == nil {
		return value
	}
	return r.RelationsRaid.RaidAttack
}

func (r RaidModel) AvatarsOnRaids() (value []AvatarsOnRaidsModel) {
	if r.RelationsRaid.AvatarsOnRaids == nil {
		return value
	}
	return r.RelationsRaid.AvatarsOnRaids
}

func (r RaidModel) RaidBossesOnRaids() (value []RaidBossesOnRaidsModel) {
	if r.RelationsRaid.RaidBossesOnRaids == nil {
		return value
	}
	return r.RelationsRaid.RaidBossesOnRaids
}

// RaidBossModel represents the `json:"RaidBoss"` model and is a wrapper for accessing fields and methods
type RaidBossModel struct {
	InternalRaidBoss
	RelationsRaidBoss
}

// InternalRaidBoss holds the actual data
type InternalRaidBoss struct {
	ID        int       `json:"id"`
	CreatedAt DateTime  `json:"createdAt"`
	DeletedAt *DateTime `json:"deletedAt"`
	UpdatedAt DateTime  `json:"updatedAt"`
	Name      string    `json:"name"`
	Image     *string   `json:"image"`
}

// RelationsRaidBoss holds the relation data separately
type RelationsRaidBoss struct {
	RaidBossesOnRaids []RaidBossesOnRaidsModel `json:"RaidBossesOnRaids"`
	RaidAttack        []RaidAttackModel        `json:"RaidAttack"`
}

func (r RaidBossModel) DeletedAt() (value DateTime, ok bool) {
	if r.InternalRaidBoss.DeletedAt == nil {
		return value, false
	}
	return *r.InternalRaidBoss.DeletedAt, true
}

func (r RaidBossModel) Image() (value string, ok bool) {
	if r.InternalRaidBoss.Image == nil {
		return value, false
	}
	return *r.InternalRaidBoss.Image, true
}

func (r RaidBossModel) RaidBossesOnRaids() (value []RaidBossesOnRaidsModel) {
	if r.RelationsRaidBoss.RaidBossesOnRaids == nil {
		return value
	}
	return r.RelationsRaidBoss.RaidBossesOnRaids
}

func (r RaidBossModel) RaidAttack() (value []RaidAttackModel) {
	if r.RelationsRaidBoss.RaidAttack == nil {
		return value
	}
	return r.RelationsRaidBoss.RaidAttack
}

// RaidAttackModel represents the `json:"RaidAttack"` model and is a wrapper for accessing fields and methods
type RaidAttackModel struct {
	InternalRaidAttack
	RelationsRaidAttack
}

// InternalRaidAttack holds the actual data
type InternalRaidAttack struct {
	CreatedAt  DateTime  `json:"createdAt"`
	DeletedAt  *DateTime `json:"deletedAt"`
	UpdatedAt  DateTime  `json:"updatedAt"`
	RaidID     int       `json:"raidId"`
	AvatarID   int       `json:"avatarId"`
	RaidBossID int       `json:"raidBossId"`
}

// RelationsRaidAttack holds the relation data separately
type RelationsRaidAttack struct {
	Raid     *RaidModel     `json:"raid"`
	Avatar   *AvatarModel   `json:"avatar"`
	RaidBoss *RaidBossModel `json:"RaidBoss"`
}

func (r RaidAttackModel) DeletedAt() (value DateTime, ok bool) {
	if r.InternalRaidAttack.DeletedAt == nil {
		return value, false
	}
	return *r.InternalRaidAttack.DeletedAt, true
}

func (r RaidAttackModel) Raid() (value RaidModel) {
	if r.RelationsRaidAttack.Raid == nil {
		panic("attempted to access raid but did not fetch it using the .With() syntax")
	}
	return *r.RelationsRaidAttack.Raid
}

func (r RaidAttackModel) Avatar() (value AvatarModel) {
	if r.RelationsRaidAttack.Avatar == nil {
		panic("attempted to access avatar but did not fetch it using the .With() syntax")
	}
	return *r.RelationsRaidAttack.Avatar
}

func (r RaidAttackModel) RaidBoss() (value RaidBossModel) {
	if r.RelationsRaidAttack.RaidBoss == nil {
		panic("attempted to access raidBoss but did not fetch it using the .With() syntax")
	}
	return *r.RelationsRaidAttack.RaidBoss
}

// AvatarsOnRaidsModel represents the `json:"AvatarsOnRaids"` model and is a wrapper for accessing fields and methods
type AvatarsOnRaidsModel struct {
	InternalAvatarsOnRaids
	RelationsAvatarsOnRaids
}

// InternalAvatarsOnRaids holds the actual data
type InternalAvatarsOnRaids struct {
	CreatedAt DateTime  `json:"createdAt"`
	DeletedAt *DateTime `json:"deletedAt"`
	UpdatedAt DateTime  `json:"updatedAt"`
	RaidID    int       `json:"raidId"`
	AvatarID  int       `json:"avatarId"`
}

// RelationsAvatarsOnRaids holds the relation data separately
type RelationsAvatarsOnRaids struct {
	Raid   *RaidModel   `json:"raid"`
	Avatar *AvatarModel `json:"avatar"`
}

func (r AvatarsOnRaidsModel) DeletedAt() (value DateTime, ok bool) {
	if r.InternalAvatarsOnRaids.DeletedAt == nil {
		return value, false
	}
	return *r.InternalAvatarsOnRaids.DeletedAt, true
}

func (r AvatarsOnRaidsModel) Raid() (value RaidModel) {
	if r.RelationsAvatarsOnRaids.Raid == nil {
		panic("attempted to access raid but did not fetch it using the .With() syntax")
	}
	return *r.RelationsAvatarsOnRaids.Raid
}

func (r AvatarsOnRaidsModel) Avatar() (value AvatarModel) {
	if r.RelationsAvatarsOnRaids.Avatar == nil {
		panic("attempted to access avatar but did not fetch it using the .With() syntax")
	}
	return *r.RelationsAvatarsOnRaids.Avatar
}

// RaidBossesOnRaidsModel represents the `json:"RaidBossesOnRaids"` model and is a wrapper for accessing fields and methods
type RaidBossesOnRaidsModel struct {
	InternalRaidBossesOnRaids
	RelationsRaidBossesOnRaids
}

// InternalRaidBossesOnRaids holds the actual data
type InternalRaidBossesOnRaids struct {
	CreatedAt  DateTime  `json:"createdAt"`
	DeletedAt  *DateTime `json:"deletedAt"`
	UpdatedAt  DateTime  `json:"updatedAt"`
	RaidID     int       `json:"raidId"`
	RaidBossID int       `json:"raidBossId"`
}

// RelationsRaidBossesOnRaids holds the relation data separately
type RelationsRaidBossesOnRaids struct {
	Raid     *RaidModel     `json:"raid"`
	RaidBoss *RaidBossModel `json:"raidBoss"`
}

func (r RaidBossesOnRaidsModel) DeletedAt() (value DateTime, ok bool) {
	if r.InternalRaidBossesOnRaids.DeletedAt == nil {
		return value, false
	}
	return *r.InternalRaidBossesOnRaids.DeletedAt, true
}

func (r RaidBossesOnRaidsModel) Raid() (value RaidModel) {
	if r.RelationsRaidBossesOnRaids.Raid == nil {
		panic("attempted to access raid but did not fetch it using the .With() syntax")
	}
	return *r.RelationsRaidBossesOnRaids.Raid
}

func (r RaidBossesOnRaidsModel) RaidBoss() (value RaidBossModel) {
	if r.RelationsRaidBossesOnRaids.RaidBoss == nil {
		panic("attempted to access raidBoss but did not fetch it using the .With() syntax")
	}
	return *r.RelationsRaidBossesOnRaids.RaidBoss
}

// --- template query.gotpl ---

// User acts as a namespaces to access query methods for the User model
var User = userQuery{}

// userQuery exposes query functions for the user model
type userQuery struct {
	// ID
	//
	// @required
	ID userQueryIDInt

	// CreatedAt
	//
	// @required
	CreatedAt userQueryCreatedAtDateTime

	// DeletedAt
	//
	// @optional
	DeletedAt userQueryDeletedAtDateTime

	// UpdatedAt
	//
	// @required
	UpdatedAt userQueryUpdatedAtDateTime

	// DiscordUserID
	//
	// @required
	// @unique
	DiscordUserID userQueryDiscordUserIDString

	// Email
	//
	// @optional
	// @unique
	Email userQueryEmailString

	// DiscordUsername
	//
	// @optional
	// @unique
	DiscordUsername userQueryDiscordUsernameString

	// FirstName
	//
	// @optional
	FirstName userQueryFirstNameString

	// LastName
	//
	// @optional
	LastName userQueryLastNameString

	Avatar userQueryAvatarRelations
}

func (userQuery) Not(params ...iUserParams) userParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userParams{
		data: builder.Field{
			Name:     "NOT",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (userQuery) Or(params ...iUserParams) userParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userParams{
		data: builder.Field{
			Name:     "OR",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

// searched for field raidId_avatarId_raidBossId
// type: RaidIdAvatarIdRaidBossIdCompoundUniqueInput

// searched for field raidId_avatarId
// type: RaidIdAvatarIdCompoundUniqueInput

// searched for field raidId_raidBossId
// type: RaidIdRaidBossIdCompoundUniqueInput

// base struct
type userQueryIDInt struct{}

// Set the required value of ID
func (r userQueryIDInt) Set(value int) userSetParams {

	return userSetParams{
		data: builder.Field{
			Name:  "id",
			Value: value,
		},
	}

}

func (r userQueryIDInt) Equals(value int) userWithPrismaIDEqualsParamsUnique {
	return userWithPrismaIDEqualsParamsUnique{
		data: builder.Field{
			Name:  "id",
			Value: value,
		},
	}
}

func (r userQueryIDInt) In(values []int) userParamsUnique {
	f := builder.Field{
		Name:   "id",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return userParamsUnique{
		data: f,
	}
}

func (r userQueryIDInt) Order(direction runtime.Direction) userParams {
	return userParams{
		data: builder.Field{
			Name:  "id",
			Value: direction,
		},
	}
}

func (r userQueryIDInt) Cursor(cursor string) userCursorParams {
	return userCursorParams{
		data: builder.Field{
			Name:  "id",
			Value: cursor,
		},
	}
}

func (r userQueryIDInt) LT(value int) userParamsUnique {
	return userParamsUnique{
		data: builder.Field{
			Action: "lt",
			Name:   "id",
			Value:  value,
		},
	}
}

func (r userQueryIDInt) GT(value int) userParamsUnique {
	return userParamsUnique{
		data: builder.Field{
			Action: "gt",
			Name:   "id",
			Value:  value,
		},
	}
}

func (r userQueryIDInt) LTE(value int) userParamsUnique {
	return userParamsUnique{
		data: builder.Field{
			Action: "lte",
			Name:   "id",
			Value:  value,
		},
	}
}

func (r userQueryIDInt) GTE(value int) userParamsUnique {
	return userParamsUnique{
		data: builder.Field{
			Action: "gte",
			Name:   "id",
			Value:  value,
		},
	}
}

// base struct
type userQueryCreatedAtDateTime struct{}

// Set the required value of CreatedAt
func (r userQueryCreatedAtDateTime) Set(value DateTime) userSetParams {

	return userSetParams{
		data: builder.Field{
			Name:  "createdAt",
			Value: value,
		},
	}

}

func (r userQueryCreatedAtDateTime) Equals(value DateTime) userWithPrismaCreatedAtEqualsParams {
	return userWithPrismaCreatedAtEqualsParams{
		data: builder.Field{
			Name:  "createdAt",
			Value: value,
		},
	}
}

func (r userQueryCreatedAtDateTime) In(values []DateTime) userParams {
	f := builder.Field{
		Name:   "createdAt",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return userParams{
		data: f,
	}
}

func (r userQueryCreatedAtDateTime) Order(direction runtime.Direction) userParams {
	return userParams{
		data: builder.Field{
			Name:  "createdAt",
			Value: direction,
		},
	}
}

func (r userQueryCreatedAtDateTime) Before(value DateTime) userParams {
	return userParams{
		data: builder.Field{
			Action: "lt",
			Name:   "createdAt",
			Value:  value,
		},
	}
}

func (r userQueryCreatedAtDateTime) After(value DateTime) userParams {
	return userParams{
		data: builder.Field{
			Action: "gt",
			Name:   "createdAt",
			Value:  value,
		},
	}
}

func (r userQueryCreatedAtDateTime) BeforeEquals(value DateTime) userParams {
	return userParams{
		data: builder.Field{
			Action: "lte",
			Name:   "createdAt",
			Value:  value,
		},
	}
}

func (r userQueryCreatedAtDateTime) AfterEquals(value DateTime) userParams {
	return userParams{
		data: builder.Field{
			Action: "gte",
			Name:   "createdAt",
			Value:  value,
		},
	}
}

// base struct
type userQueryDeletedAtDateTime struct{}

// Set the optional value of DeletedAt
func (r userQueryDeletedAtDateTime) Set(value DateTime) userSetParams {

	return userSetParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: value,
		},
	}

}

// Set the optional value of DeletedAt dynamically
func (r userQueryDeletedAtDateTime) SetOptional(value *DateTime) userSetParams {
	if value == nil {

		var v *DateTime
		return userSetParams{
			data: builder.Field{
				Name:  "deletedAt",
				Value: v,
			},
		}
	}

	return r.Set(*value)
}

func (r userQueryDeletedAtDateTime) Equals(value DateTime) userWithPrismaDeletedAtEqualsParams {
	return userWithPrismaDeletedAtEqualsParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: value,
		},
	}
}

func (r userQueryDeletedAtDateTime) In(values []DateTime) userParams {
	f := builder.Field{
		Name:   "deletedAt",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return userParams{
		data: f,
	}
}

func (r userQueryDeletedAtDateTime) EqualsOptional(value *DateTime) userParams {
	return userParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: value,
		},
	}
}

func (r userQueryDeletedAtDateTime) IsNull() userParams {
	var str *string = nil
	return userParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: str,
		},
	}
}

func (r userQueryDeletedAtDateTime) Order(direction runtime.Direction) userParams {
	return userParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: direction,
		},
	}
}

func (r userQueryDeletedAtDateTime) Before(value DateTime) userParams {
	return userParams{
		data: builder.Field{
			Action: "lt",
			Name:   "deletedAt",
			Value:  value,
		},
	}
}

func (r userQueryDeletedAtDateTime) After(value DateTime) userParams {
	return userParams{
		data: builder.Field{
			Action: "gt",
			Name:   "deletedAt",
			Value:  value,
		},
	}
}

func (r userQueryDeletedAtDateTime) BeforeEquals(value DateTime) userParams {
	return userParams{
		data: builder.Field{
			Action: "lte",
			Name:   "deletedAt",
			Value:  value,
		},
	}
}

func (r userQueryDeletedAtDateTime) AfterEquals(value DateTime) userParams {
	return userParams{
		data: builder.Field{
			Action: "gte",
			Name:   "deletedAt",
			Value:  value,
		},
	}
}

// base struct
type userQueryUpdatedAtDateTime struct{}

// Set the required value of UpdatedAt
func (r userQueryUpdatedAtDateTime) Set(value DateTime) userSetParams {

	return userSetParams{
		data: builder.Field{
			Name:  "updatedAt",
			Value: value,
		},
	}

}

func (r userQueryUpdatedAtDateTime) Equals(value DateTime) userWithPrismaUpdatedAtEqualsParams {
	return userWithPrismaUpdatedAtEqualsParams{
		data: builder.Field{
			Name:  "updatedAt",
			Value: value,
		},
	}
}

func (r userQueryUpdatedAtDateTime) In(values []DateTime) userParams {
	f := builder.Field{
		Name:   "updatedAt",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return userParams{
		data: f,
	}
}

func (r userQueryUpdatedAtDateTime) Order(direction runtime.Direction) userParams {
	return userParams{
		data: builder.Field{
			Name:  "updatedAt",
			Value: direction,
		},
	}
}

func (r userQueryUpdatedAtDateTime) Before(value DateTime) userParams {
	return userParams{
		data: builder.Field{
			Action: "lt",
			Name:   "updatedAt",
			Value:  value,
		},
	}
}

func (r userQueryUpdatedAtDateTime) After(value DateTime) userParams {
	return userParams{
		data: builder.Field{
			Action: "gt",
			Name:   "updatedAt",
			Value:  value,
		},
	}
}

func (r userQueryUpdatedAtDateTime) BeforeEquals(value DateTime) userParams {
	return userParams{
		data: builder.Field{
			Action: "lte",
			Name:   "updatedAt",
			Value:  value,
		},
	}
}

func (r userQueryUpdatedAtDateTime) AfterEquals(value DateTime) userParams {
	return userParams{
		data: builder.Field{
			Action: "gte",
			Name:   "updatedAt",
			Value:  value,
		},
	}
}

// base struct
type userQueryDiscordUserIDString struct{}

// Set the required value of DiscordUserID
func (r userQueryDiscordUserIDString) Set(value string) userWithPrismaDiscordUserIDSetParams {

	return userWithPrismaDiscordUserIDSetParams{
		data: builder.Field{
			Name:  "discordUserId",
			Value: value,
		},
	}

}

func (r userQueryDiscordUserIDString) Equals(value string) userWithPrismaDiscordUserIDEqualsParamsUnique {
	return userWithPrismaDiscordUserIDEqualsParamsUnique{
		data: builder.Field{
			Name:  "discordUserId",
			Value: value,
		},
	}
}

func (r userQueryDiscordUserIDString) In(values []string) userParamsUnique {
	f := builder.Field{
		Name:   "discordUserId",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return userParamsUnique{
		data: f,
	}
}

func (r userQueryDiscordUserIDString) Order(direction runtime.Direction) userParams {
	return userParams{
		data: builder.Field{
			Name:  "discordUserId",
			Value: direction,
		},
	}
}

func (r userQueryDiscordUserIDString) Cursor(cursor string) userCursorParams {
	return userCursorParams{
		data: builder.Field{
			Name:  "discordUserId",
			Value: cursor,
		},
	}
}

func (r userQueryDiscordUserIDString) Contains(value string) userParamsUnique {
	return userParamsUnique{
		data: builder.Field{
			Action: "contains",
			Name:   "discordUserId",
			Value:  value,
		},
	}
}

func (r userQueryDiscordUserIDString) HasPrefix(value string) userParamsUnique {
	return userParamsUnique{
		data: builder.Field{
			Action: "starts_with",
			Name:   "discordUserId",
			Value:  value,
		},
	}
}

func (r userQueryDiscordUserIDString) HasSuffix(value string) userParamsUnique {
	return userParamsUnique{
		data: builder.Field{
			Action: "ends_with",
			Name:   "discordUserId",
			Value:  value,
		},
	}
}

// base struct
type userQueryEmailString struct{}

// Set the optional value of Email
func (r userQueryEmailString) Set(value string) userSetParams {

	return userSetParams{
		data: builder.Field{
			Name:  "email",
			Value: value,
		},
	}

}

// Set the optional value of Email dynamically
func (r userQueryEmailString) SetOptional(value *string) userSetParams {
	if value == nil {

		var v *string
		return userSetParams{
			data: builder.Field{
				Name:  "email",
				Value: v,
			},
		}
	}

	return r.Set(*value)
}

func (r userQueryEmailString) Equals(value string) userWithPrismaEmailEqualsParamsUnique {
	return userWithPrismaEmailEqualsParamsUnique{
		data: builder.Field{
			Name:  "email",
			Value: value,
		},
	}
}

func (r userQueryEmailString) In(values []string) userParamsUnique {
	f := builder.Field{
		Name:   "email",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return userParamsUnique{
		data: f,
	}
}

func (r userQueryEmailString) EqualsOptional(value *string) userParamsUnique {
	return userParamsUnique{
		data: builder.Field{
			Name:  "email",
			Value: value,
		},
	}
}

func (r userQueryEmailString) IsNull() userParamsUnique {
	var str *string = nil
	return userParamsUnique{
		data: builder.Field{
			Name:  "email",
			Value: str,
		},
	}
}

func (r userQueryEmailString) Order(direction runtime.Direction) userParams {
	return userParams{
		data: builder.Field{
			Name:  "email",
			Value: direction,
		},
	}
}

func (r userQueryEmailString) Cursor(cursor string) userCursorParams {
	return userCursorParams{
		data: builder.Field{
			Name:  "email",
			Value: cursor,
		},
	}
}

func (r userQueryEmailString) Contains(value string) userParamsUnique {
	return userParamsUnique{
		data: builder.Field{
			Action: "contains",
			Name:   "email",
			Value:  value,
		},
	}
}

func (r userQueryEmailString) HasPrefix(value string) userParamsUnique {
	return userParamsUnique{
		data: builder.Field{
			Action: "starts_with",
			Name:   "email",
			Value:  value,
		},
	}
}

func (r userQueryEmailString) HasSuffix(value string) userParamsUnique {
	return userParamsUnique{
		data: builder.Field{
			Action: "ends_with",
			Name:   "email",
			Value:  value,
		},
	}
}

// base struct
type userQueryDiscordUsernameString struct{}

// Set the optional value of DiscordUsername
func (r userQueryDiscordUsernameString) Set(value string) userSetParams {

	return userSetParams{
		data: builder.Field{
			Name:  "discordUsername",
			Value: value,
		},
	}

}

// Set the optional value of DiscordUsername dynamically
func (r userQueryDiscordUsernameString) SetOptional(value *string) userSetParams {
	if value == nil {

		var v *string
		return userSetParams{
			data: builder.Field{
				Name:  "discordUsername",
				Value: v,
			},
		}
	}

	return r.Set(*value)
}

func (r userQueryDiscordUsernameString) Equals(value string) userWithPrismaDiscordUsernameEqualsParamsUnique {
	return userWithPrismaDiscordUsernameEqualsParamsUnique{
		data: builder.Field{
			Name:  "discordUsername",
			Value: value,
		},
	}
}

func (r userQueryDiscordUsernameString) In(values []string) userParamsUnique {
	f := builder.Field{
		Name:   "discordUsername",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return userParamsUnique{
		data: f,
	}
}

func (r userQueryDiscordUsernameString) EqualsOptional(value *string) userParamsUnique {
	return userParamsUnique{
		data: builder.Field{
			Name:  "discordUsername",
			Value: value,
		},
	}
}

func (r userQueryDiscordUsernameString) IsNull() userParamsUnique {
	var str *string = nil
	return userParamsUnique{
		data: builder.Field{
			Name:  "discordUsername",
			Value: str,
		},
	}
}

func (r userQueryDiscordUsernameString) Order(direction runtime.Direction) userParams {
	return userParams{
		data: builder.Field{
			Name:  "discordUsername",
			Value: direction,
		},
	}
}

func (r userQueryDiscordUsernameString) Cursor(cursor string) userCursorParams {
	return userCursorParams{
		data: builder.Field{
			Name:  "discordUsername",
			Value: cursor,
		},
	}
}

func (r userQueryDiscordUsernameString) Contains(value string) userParamsUnique {
	return userParamsUnique{
		data: builder.Field{
			Action: "contains",
			Name:   "discordUsername",
			Value:  value,
		},
	}
}

func (r userQueryDiscordUsernameString) HasPrefix(value string) userParamsUnique {
	return userParamsUnique{
		data: builder.Field{
			Action: "starts_with",
			Name:   "discordUsername",
			Value:  value,
		},
	}
}

func (r userQueryDiscordUsernameString) HasSuffix(value string) userParamsUnique {
	return userParamsUnique{
		data: builder.Field{
			Action: "ends_with",
			Name:   "discordUsername",
			Value:  value,
		},
	}
}

// base struct
type userQueryFirstNameString struct{}

// Set the optional value of FirstName
func (r userQueryFirstNameString) Set(value string) userSetParams {

	return userSetParams{
		data: builder.Field{
			Name:  "firstName",
			Value: value,
		},
	}

}

// Set the optional value of FirstName dynamically
func (r userQueryFirstNameString) SetOptional(value *string) userSetParams {
	if value == nil {

		var v *string
		return userSetParams{
			data: builder.Field{
				Name:  "firstName",
				Value: v,
			},
		}
	}

	return r.Set(*value)
}

func (r userQueryFirstNameString) Equals(value string) userWithPrismaFirstNameEqualsParams {
	return userWithPrismaFirstNameEqualsParams{
		data: builder.Field{
			Name:  "firstName",
			Value: value,
		},
	}
}

func (r userQueryFirstNameString) In(values []string) userParams {
	f := builder.Field{
		Name:   "firstName",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return userParams{
		data: f,
	}
}

func (r userQueryFirstNameString) EqualsOptional(value *string) userParams {
	return userParams{
		data: builder.Field{
			Name:  "firstName",
			Value: value,
		},
	}
}

func (r userQueryFirstNameString) IsNull() userParams {
	var str *string = nil
	return userParams{
		data: builder.Field{
			Name:  "firstName",
			Value: str,
		},
	}
}

func (r userQueryFirstNameString) Order(direction runtime.Direction) userParams {
	return userParams{
		data: builder.Field{
			Name:  "firstName",
			Value: direction,
		},
	}
}

func (r userQueryFirstNameString) Contains(value string) userParams {
	return userParams{
		data: builder.Field{
			Action: "contains",
			Name:   "firstName",
			Value:  value,
		},
	}
}

func (r userQueryFirstNameString) HasPrefix(value string) userParams {
	return userParams{
		data: builder.Field{
			Action: "starts_with",
			Name:   "firstName",
			Value:  value,
		},
	}
}

func (r userQueryFirstNameString) HasSuffix(value string) userParams {
	return userParams{
		data: builder.Field{
			Action: "ends_with",
			Name:   "firstName",
			Value:  value,
		},
	}
}

// base struct
type userQueryLastNameString struct{}

// Set the optional value of LastName
func (r userQueryLastNameString) Set(value string) userSetParams {

	return userSetParams{
		data: builder.Field{
			Name:  "lastName",
			Value: value,
		},
	}

}

// Set the optional value of LastName dynamically
func (r userQueryLastNameString) SetOptional(value *string) userSetParams {
	if value == nil {

		var v *string
		return userSetParams{
			data: builder.Field{
				Name:  "lastName",
				Value: v,
			},
		}
	}

	return r.Set(*value)
}

func (r userQueryLastNameString) Equals(value string) userWithPrismaLastNameEqualsParams {
	return userWithPrismaLastNameEqualsParams{
		data: builder.Field{
			Name:  "lastName",
			Value: value,
		},
	}
}

func (r userQueryLastNameString) In(values []string) userParams {
	f := builder.Field{
		Name:   "lastName",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return userParams{
		data: f,
	}
}

func (r userQueryLastNameString) EqualsOptional(value *string) userParams {
	return userParams{
		data: builder.Field{
			Name:  "lastName",
			Value: value,
		},
	}
}

func (r userQueryLastNameString) IsNull() userParams {
	var str *string = nil
	return userParams{
		data: builder.Field{
			Name:  "lastName",
			Value: str,
		},
	}
}

func (r userQueryLastNameString) Order(direction runtime.Direction) userParams {
	return userParams{
		data: builder.Field{
			Name:  "lastName",
			Value: direction,
		},
	}
}

func (r userQueryLastNameString) Contains(value string) userParams {
	return userParams{
		data: builder.Field{
			Action: "contains",
			Name:   "lastName",
			Value:  value,
		},
	}
}

func (r userQueryLastNameString) HasPrefix(value string) userParams {
	return userParams{
		data: builder.Field{
			Action: "starts_with",
			Name:   "lastName",
			Value:  value,
		},
	}
}

func (r userQueryLastNameString) HasSuffix(value string) userParams {
	return userParams{
		data: builder.Field{
			Action: "ends_with",
			Name:   "lastName",
			Value:  value,
		},
	}
}

// base struct
type userQueryAvatarAvatar struct{}

type userQueryAvatarRelations struct{}

// User -> Avatar
//
// @relation
// @optional
func (userQueryAvatarRelations) Where(
	params ...iAvatarParams,
) userParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userParams{
		data: builder.Field{
			Name:   "avatar",
			Action: "",
			Fields: fields,
		},
	}
}

func (userQueryAvatarRelations) Fetch() userToAvatarFindOne {
	var v userToAvatarFindOne

	v.query.Operation = "query"
	v.query.Method = "avatar"
	v.query.Outputs = avatarOutput

	return v
}

func (r userQueryAvatarRelations) Link(
	params ...iAvatarParams,
) userSetParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userSetParams{
		data: builder.Field{
			Name: "avatar",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: fields,
				},
			},
		},
	}
}

func (r userQueryAvatarRelations) Unlink() userSetParams {
	return userSetParams{
		data: builder.Field{
			Name: "avatar",
			Fields: []builder.Field{
				{
					Name:  "disconnect",
					Value: true,
				},
			},
		},
	}
}

// Avatar acts as a namespaces to access query methods for the Avatar model
var Avatar = avatarQuery{}

// avatarQuery exposes query functions for the avatar model
type avatarQuery struct {
	// ID
	//
	// @required
	ID avatarQueryIDInt

	// CreatedAt
	//
	// @required
	CreatedAt avatarQueryCreatedAtDateTime

	// DeletedAt
	//
	// @optional
	DeletedAt avatarQueryDeletedAtDateTime

	// UpdatedAt
	//
	// @required
	UpdatedAt avatarQueryUpdatedAtDateTime

	User avatarQueryUserRelations

	// UserID
	//
	// @required
	UserID avatarQueryUserIDInt

	RaidAttack avatarQueryRaidAttackRelations

	AvatarsOnRaids avatarQueryAvatarsOnRaidsRelations
}

func (avatarQuery) Not(params ...iAvatarParams) avatarParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return avatarParams{
		data: builder.Field{
			Name:     "NOT",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (avatarQuery) Or(params ...iAvatarParams) avatarParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return avatarParams{
		data: builder.Field{
			Name:     "OR",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

// searched for field raidId_avatarId_raidBossId
// type: RaidIdAvatarIdRaidBossIdCompoundUniqueInput

// searched for field raidId_avatarId
// type: RaidIdAvatarIdCompoundUniqueInput

// searched for field raidId_raidBossId
// type: RaidIdRaidBossIdCompoundUniqueInput

// base struct
type avatarQueryIDInt struct{}

// Set the required value of ID
func (r avatarQueryIDInt) Set(value int) avatarSetParams {

	return avatarSetParams{
		data: builder.Field{
			Name:  "id",
			Value: value,
		},
	}

}

func (r avatarQueryIDInt) Equals(value int) avatarWithPrismaIDEqualsParamsUnique {
	return avatarWithPrismaIDEqualsParamsUnique{
		data: builder.Field{
			Name:  "id",
			Value: value,
		},
	}
}

func (r avatarQueryIDInt) In(values []int) avatarParamsUnique {
	f := builder.Field{
		Name:   "id",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return avatarParamsUnique{
		data: f,
	}
}

func (r avatarQueryIDInt) Order(direction runtime.Direction) avatarParams {
	return avatarParams{
		data: builder.Field{
			Name:  "id",
			Value: direction,
		},
	}
}

func (r avatarQueryIDInt) Cursor(cursor string) avatarCursorParams {
	return avatarCursorParams{
		data: builder.Field{
			Name:  "id",
			Value: cursor,
		},
	}
}

func (r avatarQueryIDInt) LT(value int) avatarParamsUnique {
	return avatarParamsUnique{
		data: builder.Field{
			Action: "lt",
			Name:   "id",
			Value:  value,
		},
	}
}

func (r avatarQueryIDInt) GT(value int) avatarParamsUnique {
	return avatarParamsUnique{
		data: builder.Field{
			Action: "gt",
			Name:   "id",
			Value:  value,
		},
	}
}

func (r avatarQueryIDInt) LTE(value int) avatarParamsUnique {
	return avatarParamsUnique{
		data: builder.Field{
			Action: "lte",
			Name:   "id",
			Value:  value,
		},
	}
}

func (r avatarQueryIDInt) GTE(value int) avatarParamsUnique {
	return avatarParamsUnique{
		data: builder.Field{
			Action: "gte",
			Name:   "id",
			Value:  value,
		},
	}
}

// base struct
type avatarQueryCreatedAtDateTime struct{}

// Set the required value of CreatedAt
func (r avatarQueryCreatedAtDateTime) Set(value DateTime) avatarSetParams {

	return avatarSetParams{
		data: builder.Field{
			Name:  "createdAt",
			Value: value,
		},
	}

}

func (r avatarQueryCreatedAtDateTime) Equals(value DateTime) avatarWithPrismaCreatedAtEqualsParams {
	return avatarWithPrismaCreatedAtEqualsParams{
		data: builder.Field{
			Name:  "createdAt",
			Value: value,
		},
	}
}

func (r avatarQueryCreatedAtDateTime) In(values []DateTime) avatarParams {
	f := builder.Field{
		Name:   "createdAt",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return avatarParams{
		data: f,
	}
}

func (r avatarQueryCreatedAtDateTime) Order(direction runtime.Direction) avatarParams {
	return avatarParams{
		data: builder.Field{
			Name:  "createdAt",
			Value: direction,
		},
	}
}

func (r avatarQueryCreatedAtDateTime) Before(value DateTime) avatarParams {
	return avatarParams{
		data: builder.Field{
			Action: "lt",
			Name:   "createdAt",
			Value:  value,
		},
	}
}

func (r avatarQueryCreatedAtDateTime) After(value DateTime) avatarParams {
	return avatarParams{
		data: builder.Field{
			Action: "gt",
			Name:   "createdAt",
			Value:  value,
		},
	}
}

func (r avatarQueryCreatedAtDateTime) BeforeEquals(value DateTime) avatarParams {
	return avatarParams{
		data: builder.Field{
			Action: "lte",
			Name:   "createdAt",
			Value:  value,
		},
	}
}

func (r avatarQueryCreatedAtDateTime) AfterEquals(value DateTime) avatarParams {
	return avatarParams{
		data: builder.Field{
			Action: "gte",
			Name:   "createdAt",
			Value:  value,
		},
	}
}

// base struct
type avatarQueryDeletedAtDateTime struct{}

// Set the optional value of DeletedAt
func (r avatarQueryDeletedAtDateTime) Set(value DateTime) avatarSetParams {

	return avatarSetParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: value,
		},
	}

}

// Set the optional value of DeletedAt dynamically
func (r avatarQueryDeletedAtDateTime) SetOptional(value *DateTime) avatarSetParams {
	if value == nil {

		var v *DateTime
		return avatarSetParams{
			data: builder.Field{
				Name:  "deletedAt",
				Value: v,
			},
		}
	}

	return r.Set(*value)
}

func (r avatarQueryDeletedAtDateTime) Equals(value DateTime) avatarWithPrismaDeletedAtEqualsParams {
	return avatarWithPrismaDeletedAtEqualsParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: value,
		},
	}
}

func (r avatarQueryDeletedAtDateTime) In(values []DateTime) avatarParams {
	f := builder.Field{
		Name:   "deletedAt",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return avatarParams{
		data: f,
	}
}

func (r avatarQueryDeletedAtDateTime) EqualsOptional(value *DateTime) avatarParams {
	return avatarParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: value,
		},
	}
}

func (r avatarQueryDeletedAtDateTime) IsNull() avatarParams {
	var str *string = nil
	return avatarParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: str,
		},
	}
}

func (r avatarQueryDeletedAtDateTime) Order(direction runtime.Direction) avatarParams {
	return avatarParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: direction,
		},
	}
}

func (r avatarQueryDeletedAtDateTime) Before(value DateTime) avatarParams {
	return avatarParams{
		data: builder.Field{
			Action: "lt",
			Name:   "deletedAt",
			Value:  value,
		},
	}
}

func (r avatarQueryDeletedAtDateTime) After(value DateTime) avatarParams {
	return avatarParams{
		data: builder.Field{
			Action: "gt",
			Name:   "deletedAt",
			Value:  value,
		},
	}
}

func (r avatarQueryDeletedAtDateTime) BeforeEquals(value DateTime) avatarParams {
	return avatarParams{
		data: builder.Field{
			Action: "lte",
			Name:   "deletedAt",
			Value:  value,
		},
	}
}

func (r avatarQueryDeletedAtDateTime) AfterEquals(value DateTime) avatarParams {
	return avatarParams{
		data: builder.Field{
			Action: "gte",
			Name:   "deletedAt",
			Value:  value,
		},
	}
}

// base struct
type avatarQueryUpdatedAtDateTime struct{}

// Set the required value of UpdatedAt
func (r avatarQueryUpdatedAtDateTime) Set(value DateTime) avatarSetParams {

	return avatarSetParams{
		data: builder.Field{
			Name:  "updatedAt",
			Value: value,
		},
	}

}

func (r avatarQueryUpdatedAtDateTime) Equals(value DateTime) avatarWithPrismaUpdatedAtEqualsParams {
	return avatarWithPrismaUpdatedAtEqualsParams{
		data: builder.Field{
			Name:  "updatedAt",
			Value: value,
		},
	}
}

func (r avatarQueryUpdatedAtDateTime) In(values []DateTime) avatarParams {
	f := builder.Field{
		Name:   "updatedAt",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return avatarParams{
		data: f,
	}
}

func (r avatarQueryUpdatedAtDateTime) Order(direction runtime.Direction) avatarParams {
	return avatarParams{
		data: builder.Field{
			Name:  "updatedAt",
			Value: direction,
		},
	}
}

func (r avatarQueryUpdatedAtDateTime) Before(value DateTime) avatarParams {
	return avatarParams{
		data: builder.Field{
			Action: "lt",
			Name:   "updatedAt",
			Value:  value,
		},
	}
}

func (r avatarQueryUpdatedAtDateTime) After(value DateTime) avatarParams {
	return avatarParams{
		data: builder.Field{
			Action: "gt",
			Name:   "updatedAt",
			Value:  value,
		},
	}
}

func (r avatarQueryUpdatedAtDateTime) BeforeEquals(value DateTime) avatarParams {
	return avatarParams{
		data: builder.Field{
			Action: "lte",
			Name:   "updatedAt",
			Value:  value,
		},
	}
}

func (r avatarQueryUpdatedAtDateTime) AfterEquals(value DateTime) avatarParams {
	return avatarParams{
		data: builder.Field{
			Action: "gte",
			Name:   "updatedAt",
			Value:  value,
		},
	}
}

// base struct
type avatarQueryUserUser struct{}

type avatarQueryUserRelations struct{}

// Avatar -> User
//
// @relation
// @required
func (avatarQueryUserRelations) Where(
	params ...iUserParams,
) avatarParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return avatarParams{
		data: builder.Field{
			Name:   "User",
			Action: "",
			Fields: fields,
		},
	}
}

func (avatarQueryUserRelations) Fetch() avatarToUserFindOne {
	var v avatarToUserFindOne

	v.query.Operation = "query"
	v.query.Method = "User"
	v.query.Outputs = userOutput

	return v
}

func (r avatarQueryUserRelations) Link(
	params ...iUserParams,
) avatarWithPrismaUserSetParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return avatarWithPrismaUserSetParams{
		data: builder.Field{
			Name: "User",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: fields,
				},
			},
		},
	}
}

// base struct
type avatarQueryUserIDInt struct{}

// Set the required value of UserID
func (r avatarQueryUserIDInt) Set(value int) avatarWithPrismaUserIDSetParams {

	return avatarWithPrismaUserIDSetParams{
		data: builder.Field{
			Name:  "userId",
			Value: value,
		},
	}

}

func (r avatarQueryUserIDInt) Equals(value int) avatarWithPrismaUserIDEqualsParams {
	return avatarWithPrismaUserIDEqualsParams{
		data: builder.Field{
			Name:  "userId",
			Value: value,
		},
	}
}

func (r avatarQueryUserIDInt) In(values []int) avatarParams {
	f := builder.Field{
		Name:   "userId",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return avatarParams{
		data: f,
	}
}

func (r avatarQueryUserIDInt) Order(direction runtime.Direction) avatarParams {
	return avatarParams{
		data: builder.Field{
			Name:  "userId",
			Value: direction,
		},
	}
}

func (r avatarQueryUserIDInt) LT(value int) avatarParams {
	return avatarParams{
		data: builder.Field{
			Action: "lt",
			Name:   "userId",
			Value:  value,
		},
	}
}

func (r avatarQueryUserIDInt) GT(value int) avatarParams {
	return avatarParams{
		data: builder.Field{
			Action: "gt",
			Name:   "userId",
			Value:  value,
		},
	}
}

func (r avatarQueryUserIDInt) LTE(value int) avatarParams {
	return avatarParams{
		data: builder.Field{
			Action: "lte",
			Name:   "userId",
			Value:  value,
		},
	}
}

func (r avatarQueryUserIDInt) GTE(value int) avatarParams {
	return avatarParams{
		data: builder.Field{
			Action: "gte",
			Name:   "userId",
			Value:  value,
		},
	}
}

// base struct
type avatarQueryRaidAttackRaidAttack struct{}

type avatarQueryRaidAttackRelations struct{}

// Avatar -> RaidAttack
//
// @relation
// @optional
func (avatarQueryRaidAttackRelations) Some(
	params ...iRaidAttackParams,
) avatarParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return avatarParams{
		data: builder.Field{
			Name:   "RaidAttack",
			Action: "some",
			Fields: fields,
		},
	}
}

// Avatar -> RaidAttack
//
// @relation
// @optional
func (avatarQueryRaidAttackRelations) Every(
	params ...iRaidAttackParams,
) avatarParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return avatarParams{
		data: builder.Field{
			Name:   "RaidAttack",
			Action: "every",
			Fields: fields,
		},
	}
}

func (avatarQueryRaidAttackRelations) Fetch(

	params ...iRaidAttackParams,

) avatarToRaidAttackFindMany {
	var v avatarToRaidAttackFindMany

	v.query.Operation = "query"
	v.query.Method = "RaidAttack"
	v.query.Outputs = raidAttackOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r avatarQueryRaidAttackRelations) Link(
	params ...iRaidAttackParams,
) avatarSetParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return avatarSetParams{
		data: builder.Field{
			Name: "RaidAttack",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: fields,
				},
			},
		},
	}
}

func (r avatarQueryRaidAttackRelations) Unlink() avatarSetParams {
	return avatarSetParams{
		data: builder.Field{
			Name: "RaidAttack",
			Fields: []builder.Field{
				{
					Name:  "disconnect",
					Value: true,
				},
			},
		},
	}
}

// base struct
type avatarQueryAvatarsOnRaidsAvatarsOnRaids struct{}

type avatarQueryAvatarsOnRaidsRelations struct{}

// Avatar -> AvatarsOnRaids
//
// @relation
// @optional
func (avatarQueryAvatarsOnRaidsRelations) Some(
	params ...iAvatarsOnRaidsParams,
) avatarParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return avatarParams{
		data: builder.Field{
			Name:   "AvatarsOnRaids",
			Action: "some",
			Fields: fields,
		},
	}
}

// Avatar -> AvatarsOnRaids
//
// @relation
// @optional
func (avatarQueryAvatarsOnRaidsRelations) Every(
	params ...iAvatarsOnRaidsParams,
) avatarParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return avatarParams{
		data: builder.Field{
			Name:   "AvatarsOnRaids",
			Action: "every",
			Fields: fields,
		},
	}
}

func (avatarQueryAvatarsOnRaidsRelations) Fetch(

	params ...iAvatarsOnRaidsParams,

) avatarToAvatarsOnRaidsFindMany {
	var v avatarToAvatarsOnRaidsFindMany

	v.query.Operation = "query"
	v.query.Method = "AvatarsOnRaids"
	v.query.Outputs = avatarsOnRaidsOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r avatarQueryAvatarsOnRaidsRelations) Link(
	params ...iAvatarsOnRaidsParams,
) avatarSetParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return avatarSetParams{
		data: builder.Field{
			Name: "AvatarsOnRaids",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: fields,
				},
			},
		},
	}
}

func (r avatarQueryAvatarsOnRaidsRelations) Unlink() avatarSetParams {
	return avatarSetParams{
		data: builder.Field{
			Name: "AvatarsOnRaids",
			Fields: []builder.Field{
				{
					Name:  "disconnect",
					Value: true,
				},
			},
		},
	}
}

// Raid acts as a namespaces to access query methods for the Raid model
var Raid = raidQuery{}

// raidQuery exposes query functions for the raid model
type raidQuery struct {
	// ID
	//
	// @required
	ID raidQueryIDInt

	// CreatedAt
	//
	// @required
	CreatedAt raidQueryCreatedAtDateTime

	// DeletedAt
	//
	// @optional
	DeletedAt raidQueryDeletedAtDateTime

	// UpdatedAt
	//
	// @required
	UpdatedAt raidQueryUpdatedAtDateTime

	// StartTime
	//
	// @required
	StartTime raidQueryStartTimeDateTime

	// EndTime
	//
	// @optional
	EndTime raidQueryEndTimeDateTime

	// CompletionProgress
	//
	// @required
	CompletionProgress raidQueryCompletionProgressFloat

	// Active
	//
	// @required
	Active raidQueryActiveBoolean

	// PlayerLimit
	//
	// @required
	PlayerLimit raidQueryPlayerLimitInt

	RaidAttack raidQueryRaidAttackRelations

	AvatarsOnRaids raidQueryAvatarsOnRaidsRelations

	RaidBossesOnRaids raidQueryRaidBossesOnRaidsRelations
}

func (raidQuery) Not(params ...iRaidParams) raidParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return raidParams{
		data: builder.Field{
			Name:     "NOT",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (raidQuery) Or(params ...iRaidParams) raidParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return raidParams{
		data: builder.Field{
			Name:     "OR",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

// searched for field raidId_avatarId_raidBossId
// type: RaidIdAvatarIdRaidBossIdCompoundUniqueInput

// searched for field raidId_avatarId
// type: RaidIdAvatarIdCompoundUniqueInput

// searched for field raidId_raidBossId
// type: RaidIdRaidBossIdCompoundUniqueInput

// base struct
type raidQueryIDInt struct{}

// Set the required value of ID
func (r raidQueryIDInt) Set(value int) raidSetParams {

	return raidSetParams{
		data: builder.Field{
			Name:  "id",
			Value: value,
		},
	}

}

func (r raidQueryIDInt) Equals(value int) raidWithPrismaIDEqualsParamsUnique {
	return raidWithPrismaIDEqualsParamsUnique{
		data: builder.Field{
			Name:  "id",
			Value: value,
		},
	}
}

func (r raidQueryIDInt) In(values []int) raidParamsUnique {
	f := builder.Field{
		Name:   "id",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return raidParamsUnique{
		data: f,
	}
}

func (r raidQueryIDInt) Order(direction runtime.Direction) raidParams {
	return raidParams{
		data: builder.Field{
			Name:  "id",
			Value: direction,
		},
	}
}

func (r raidQueryIDInt) Cursor(cursor string) raidCursorParams {
	return raidCursorParams{
		data: builder.Field{
			Name:  "id",
			Value: cursor,
		},
	}
}

func (r raidQueryIDInt) LT(value int) raidParamsUnique {
	return raidParamsUnique{
		data: builder.Field{
			Action: "lt",
			Name:   "id",
			Value:  value,
		},
	}
}

func (r raidQueryIDInt) GT(value int) raidParamsUnique {
	return raidParamsUnique{
		data: builder.Field{
			Action: "gt",
			Name:   "id",
			Value:  value,
		},
	}
}

func (r raidQueryIDInt) LTE(value int) raidParamsUnique {
	return raidParamsUnique{
		data: builder.Field{
			Action: "lte",
			Name:   "id",
			Value:  value,
		},
	}
}

func (r raidQueryIDInt) GTE(value int) raidParamsUnique {
	return raidParamsUnique{
		data: builder.Field{
			Action: "gte",
			Name:   "id",
			Value:  value,
		},
	}
}

// base struct
type raidQueryCreatedAtDateTime struct{}

// Set the required value of CreatedAt
func (r raidQueryCreatedAtDateTime) Set(value DateTime) raidSetParams {

	return raidSetParams{
		data: builder.Field{
			Name:  "createdAt",
			Value: value,
		},
	}

}

func (r raidQueryCreatedAtDateTime) Equals(value DateTime) raidWithPrismaCreatedAtEqualsParams {
	return raidWithPrismaCreatedAtEqualsParams{
		data: builder.Field{
			Name:  "createdAt",
			Value: value,
		},
	}
}

func (r raidQueryCreatedAtDateTime) In(values []DateTime) raidParams {
	f := builder.Field{
		Name:   "createdAt",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return raidParams{
		data: f,
	}
}

func (r raidQueryCreatedAtDateTime) Order(direction runtime.Direction) raidParams {
	return raidParams{
		data: builder.Field{
			Name:  "createdAt",
			Value: direction,
		},
	}
}

func (r raidQueryCreatedAtDateTime) Before(value DateTime) raidParams {
	return raidParams{
		data: builder.Field{
			Action: "lt",
			Name:   "createdAt",
			Value:  value,
		},
	}
}

func (r raidQueryCreatedAtDateTime) After(value DateTime) raidParams {
	return raidParams{
		data: builder.Field{
			Action: "gt",
			Name:   "createdAt",
			Value:  value,
		},
	}
}

func (r raidQueryCreatedAtDateTime) BeforeEquals(value DateTime) raidParams {
	return raidParams{
		data: builder.Field{
			Action: "lte",
			Name:   "createdAt",
			Value:  value,
		},
	}
}

func (r raidQueryCreatedAtDateTime) AfterEquals(value DateTime) raidParams {
	return raidParams{
		data: builder.Field{
			Action: "gte",
			Name:   "createdAt",
			Value:  value,
		},
	}
}

// base struct
type raidQueryDeletedAtDateTime struct{}

// Set the optional value of DeletedAt
func (r raidQueryDeletedAtDateTime) Set(value DateTime) raidSetParams {

	return raidSetParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: value,
		},
	}

}

// Set the optional value of DeletedAt dynamically
func (r raidQueryDeletedAtDateTime) SetOptional(value *DateTime) raidSetParams {
	if value == nil {

		var v *DateTime
		return raidSetParams{
			data: builder.Field{
				Name:  "deletedAt",
				Value: v,
			},
		}
	}

	return r.Set(*value)
}

func (r raidQueryDeletedAtDateTime) Equals(value DateTime) raidWithPrismaDeletedAtEqualsParams {
	return raidWithPrismaDeletedAtEqualsParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: value,
		},
	}
}

func (r raidQueryDeletedAtDateTime) In(values []DateTime) raidParams {
	f := builder.Field{
		Name:   "deletedAt",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return raidParams{
		data: f,
	}
}

func (r raidQueryDeletedAtDateTime) EqualsOptional(value *DateTime) raidParams {
	return raidParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: value,
		},
	}
}

func (r raidQueryDeletedAtDateTime) IsNull() raidParams {
	var str *string = nil
	return raidParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: str,
		},
	}
}

func (r raidQueryDeletedAtDateTime) Order(direction runtime.Direction) raidParams {
	return raidParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: direction,
		},
	}
}

func (r raidQueryDeletedAtDateTime) Before(value DateTime) raidParams {
	return raidParams{
		data: builder.Field{
			Action: "lt",
			Name:   "deletedAt",
			Value:  value,
		},
	}
}

func (r raidQueryDeletedAtDateTime) After(value DateTime) raidParams {
	return raidParams{
		data: builder.Field{
			Action: "gt",
			Name:   "deletedAt",
			Value:  value,
		},
	}
}

func (r raidQueryDeletedAtDateTime) BeforeEquals(value DateTime) raidParams {
	return raidParams{
		data: builder.Field{
			Action: "lte",
			Name:   "deletedAt",
			Value:  value,
		},
	}
}

func (r raidQueryDeletedAtDateTime) AfterEquals(value DateTime) raidParams {
	return raidParams{
		data: builder.Field{
			Action: "gte",
			Name:   "deletedAt",
			Value:  value,
		},
	}
}

// base struct
type raidQueryUpdatedAtDateTime struct{}

// Set the required value of UpdatedAt
func (r raidQueryUpdatedAtDateTime) Set(value DateTime) raidSetParams {

	return raidSetParams{
		data: builder.Field{
			Name:  "updatedAt",
			Value: value,
		},
	}

}

func (r raidQueryUpdatedAtDateTime) Equals(value DateTime) raidWithPrismaUpdatedAtEqualsParams {
	return raidWithPrismaUpdatedAtEqualsParams{
		data: builder.Field{
			Name:  "updatedAt",
			Value: value,
		},
	}
}

func (r raidQueryUpdatedAtDateTime) In(values []DateTime) raidParams {
	f := builder.Field{
		Name:   "updatedAt",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return raidParams{
		data: f,
	}
}

func (r raidQueryUpdatedAtDateTime) Order(direction runtime.Direction) raidParams {
	return raidParams{
		data: builder.Field{
			Name:  "updatedAt",
			Value: direction,
		},
	}
}

func (r raidQueryUpdatedAtDateTime) Before(value DateTime) raidParams {
	return raidParams{
		data: builder.Field{
			Action: "lt",
			Name:   "updatedAt",
			Value:  value,
		},
	}
}

func (r raidQueryUpdatedAtDateTime) After(value DateTime) raidParams {
	return raidParams{
		data: builder.Field{
			Action: "gt",
			Name:   "updatedAt",
			Value:  value,
		},
	}
}

func (r raidQueryUpdatedAtDateTime) BeforeEquals(value DateTime) raidParams {
	return raidParams{
		data: builder.Field{
			Action: "lte",
			Name:   "updatedAt",
			Value:  value,
		},
	}
}

func (r raidQueryUpdatedAtDateTime) AfterEquals(value DateTime) raidParams {
	return raidParams{
		data: builder.Field{
			Action: "gte",
			Name:   "updatedAt",
			Value:  value,
		},
	}
}

// base struct
type raidQueryStartTimeDateTime struct{}

// Set the required value of StartTime
func (r raidQueryStartTimeDateTime) Set(value DateTime) raidSetParams {

	return raidSetParams{
		data: builder.Field{
			Name:  "startTime",
			Value: value,
		},
	}

}

func (r raidQueryStartTimeDateTime) Equals(value DateTime) raidWithPrismaStartTimeEqualsParams {
	return raidWithPrismaStartTimeEqualsParams{
		data: builder.Field{
			Name:  "startTime",
			Value: value,
		},
	}
}

func (r raidQueryStartTimeDateTime) In(values []DateTime) raidParams {
	f := builder.Field{
		Name:   "startTime",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return raidParams{
		data: f,
	}
}

func (r raidQueryStartTimeDateTime) Order(direction runtime.Direction) raidParams {
	return raidParams{
		data: builder.Field{
			Name:  "startTime",
			Value: direction,
		},
	}
}

func (r raidQueryStartTimeDateTime) Before(value DateTime) raidParams {
	return raidParams{
		data: builder.Field{
			Action: "lt",
			Name:   "startTime",
			Value:  value,
		},
	}
}

func (r raidQueryStartTimeDateTime) After(value DateTime) raidParams {
	return raidParams{
		data: builder.Field{
			Action: "gt",
			Name:   "startTime",
			Value:  value,
		},
	}
}

func (r raidQueryStartTimeDateTime) BeforeEquals(value DateTime) raidParams {
	return raidParams{
		data: builder.Field{
			Action: "lte",
			Name:   "startTime",
			Value:  value,
		},
	}
}

func (r raidQueryStartTimeDateTime) AfterEquals(value DateTime) raidParams {
	return raidParams{
		data: builder.Field{
			Action: "gte",
			Name:   "startTime",
			Value:  value,
		},
	}
}

// base struct
type raidQueryEndTimeDateTime struct{}

// Set the optional value of EndTime
func (r raidQueryEndTimeDateTime) Set(value DateTime) raidSetParams {

	return raidSetParams{
		data: builder.Field{
			Name:  "endTime",
			Value: value,
		},
	}

}

// Set the optional value of EndTime dynamically
func (r raidQueryEndTimeDateTime) SetOptional(value *DateTime) raidSetParams {
	if value == nil {

		var v *DateTime
		return raidSetParams{
			data: builder.Field{
				Name:  "endTime",
				Value: v,
			},
		}
	}

	return r.Set(*value)
}

func (r raidQueryEndTimeDateTime) Equals(value DateTime) raidWithPrismaEndTimeEqualsParams {
	return raidWithPrismaEndTimeEqualsParams{
		data: builder.Field{
			Name:  "endTime",
			Value: value,
		},
	}
}

func (r raidQueryEndTimeDateTime) In(values []DateTime) raidParams {
	f := builder.Field{
		Name:   "endTime",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return raidParams{
		data: f,
	}
}

func (r raidQueryEndTimeDateTime) EqualsOptional(value *DateTime) raidParams {
	return raidParams{
		data: builder.Field{
			Name:  "endTime",
			Value: value,
		},
	}
}

func (r raidQueryEndTimeDateTime) IsNull() raidParams {
	var str *string = nil
	return raidParams{
		data: builder.Field{
			Name:  "endTime",
			Value: str,
		},
	}
}

func (r raidQueryEndTimeDateTime) Order(direction runtime.Direction) raidParams {
	return raidParams{
		data: builder.Field{
			Name:  "endTime",
			Value: direction,
		},
	}
}

func (r raidQueryEndTimeDateTime) Before(value DateTime) raidParams {
	return raidParams{
		data: builder.Field{
			Action: "lt",
			Name:   "endTime",
			Value:  value,
		},
	}
}

func (r raidQueryEndTimeDateTime) After(value DateTime) raidParams {
	return raidParams{
		data: builder.Field{
			Action: "gt",
			Name:   "endTime",
			Value:  value,
		},
	}
}

func (r raidQueryEndTimeDateTime) BeforeEquals(value DateTime) raidParams {
	return raidParams{
		data: builder.Field{
			Action: "lte",
			Name:   "endTime",
			Value:  value,
		},
	}
}

func (r raidQueryEndTimeDateTime) AfterEquals(value DateTime) raidParams {
	return raidParams{
		data: builder.Field{
			Action: "gte",
			Name:   "endTime",
			Value:  value,
		},
	}
}

// base struct
type raidQueryCompletionProgressFloat struct{}

// Set the required value of CompletionProgress
func (r raidQueryCompletionProgressFloat) Set(value float64) raidSetParams {

	return raidSetParams{
		data: builder.Field{
			Name:  "completionProgress",
			Value: value,
		},
	}

}

func (r raidQueryCompletionProgressFloat) Equals(value float64) raidWithPrismaCompletionProgressEqualsParams {
	return raidWithPrismaCompletionProgressEqualsParams{
		data: builder.Field{
			Name:  "completionProgress",
			Value: value,
		},
	}
}

func (r raidQueryCompletionProgressFloat) In(values []float64) raidParams {
	f := builder.Field{
		Name:   "completionProgress",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return raidParams{
		data: f,
	}
}

func (r raidQueryCompletionProgressFloat) Order(direction runtime.Direction) raidParams {
	return raidParams{
		data: builder.Field{
			Name:  "completionProgress",
			Value: direction,
		},
	}
}

func (r raidQueryCompletionProgressFloat) LT(value float64) raidParams {
	return raidParams{
		data: builder.Field{
			Action: "lt",
			Name:   "completionProgress",
			Value:  value,
		},
	}
}

func (r raidQueryCompletionProgressFloat) GT(value float64) raidParams {
	return raidParams{
		data: builder.Field{
			Action: "gt",
			Name:   "completionProgress",
			Value:  value,
		},
	}
}

func (r raidQueryCompletionProgressFloat) LTE(value float64) raidParams {
	return raidParams{
		data: builder.Field{
			Action: "lte",
			Name:   "completionProgress",
			Value:  value,
		},
	}
}

func (r raidQueryCompletionProgressFloat) GTE(value float64) raidParams {
	return raidParams{
		data: builder.Field{
			Action: "gte",
			Name:   "completionProgress",
			Value:  value,
		},
	}
}

// base struct
type raidQueryActiveBoolean struct{}

// Set the required value of Active
func (r raidQueryActiveBoolean) Set(value bool) raidSetParams {

	return raidSetParams{
		data: builder.Field{
			Name:  "active",
			Value: value,
		},
	}

}

func (r raidQueryActiveBoolean) Equals(value bool) raidWithPrismaActiveEqualsParams {
	return raidWithPrismaActiveEqualsParams{
		data: builder.Field{
			Name:  "active",
			Value: value,
		},
	}
}

func (r raidQueryActiveBoolean) In(values []bool) raidParams {
	f := builder.Field{
		Name:   "active",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return raidParams{
		data: f,
	}
}

func (r raidQueryActiveBoolean) Order(direction runtime.Direction) raidParams {
	return raidParams{
		data: builder.Field{
			Name:  "active",
			Value: direction,
		},
	}
}

// base struct
type raidQueryPlayerLimitInt struct{}

// Set the required value of PlayerLimit
func (r raidQueryPlayerLimitInt) Set(value int) raidSetParams {

	return raidSetParams{
		data: builder.Field{
			Name:  "playerLimit",
			Value: value,
		},
	}

}

func (r raidQueryPlayerLimitInt) Equals(value int) raidWithPrismaPlayerLimitEqualsParams {
	return raidWithPrismaPlayerLimitEqualsParams{
		data: builder.Field{
			Name:  "playerLimit",
			Value: value,
		},
	}
}

func (r raidQueryPlayerLimitInt) In(values []int) raidParams {
	f := builder.Field{
		Name:   "playerLimit",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return raidParams{
		data: f,
	}
}

func (r raidQueryPlayerLimitInt) Order(direction runtime.Direction) raidParams {
	return raidParams{
		data: builder.Field{
			Name:  "playerLimit",
			Value: direction,
		},
	}
}

func (r raidQueryPlayerLimitInt) LT(value int) raidParams {
	return raidParams{
		data: builder.Field{
			Action: "lt",
			Name:   "playerLimit",
			Value:  value,
		},
	}
}

func (r raidQueryPlayerLimitInt) GT(value int) raidParams {
	return raidParams{
		data: builder.Field{
			Action: "gt",
			Name:   "playerLimit",
			Value:  value,
		},
	}
}

func (r raidQueryPlayerLimitInt) LTE(value int) raidParams {
	return raidParams{
		data: builder.Field{
			Action: "lte",
			Name:   "playerLimit",
			Value:  value,
		},
	}
}

func (r raidQueryPlayerLimitInt) GTE(value int) raidParams {
	return raidParams{
		data: builder.Field{
			Action: "gte",
			Name:   "playerLimit",
			Value:  value,
		},
	}
}

// base struct
type raidQueryRaidAttackRaidAttack struct{}

type raidQueryRaidAttackRelations struct{}

// Raid -> RaidAttack
//
// @relation
// @optional
func (raidQueryRaidAttackRelations) Some(
	params ...iRaidAttackParams,
) raidParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return raidParams{
		data: builder.Field{
			Name:   "RaidAttack",
			Action: "some",
			Fields: fields,
		},
	}
}

// Raid -> RaidAttack
//
// @relation
// @optional
func (raidQueryRaidAttackRelations) Every(
	params ...iRaidAttackParams,
) raidParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return raidParams{
		data: builder.Field{
			Name:   "RaidAttack",
			Action: "every",
			Fields: fields,
		},
	}
}

func (raidQueryRaidAttackRelations) Fetch(

	params ...iRaidAttackParams,

) raidToRaidAttackFindMany {
	var v raidToRaidAttackFindMany

	v.query.Operation = "query"
	v.query.Method = "RaidAttack"
	v.query.Outputs = raidAttackOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r raidQueryRaidAttackRelations) Link(
	params ...iRaidAttackParams,
) raidSetParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return raidSetParams{
		data: builder.Field{
			Name: "RaidAttack",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: fields,
				},
			},
		},
	}
}

func (r raidQueryRaidAttackRelations) Unlink() raidSetParams {
	return raidSetParams{
		data: builder.Field{
			Name: "RaidAttack",
			Fields: []builder.Field{
				{
					Name:  "disconnect",
					Value: true,
				},
			},
		},
	}
}

// base struct
type raidQueryAvatarsOnRaidsAvatarsOnRaids struct{}

type raidQueryAvatarsOnRaidsRelations struct{}

// Raid -> AvatarsOnRaids
//
// @relation
// @optional
func (raidQueryAvatarsOnRaidsRelations) Some(
	params ...iAvatarsOnRaidsParams,
) raidParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return raidParams{
		data: builder.Field{
			Name:   "AvatarsOnRaids",
			Action: "some",
			Fields: fields,
		},
	}
}

// Raid -> AvatarsOnRaids
//
// @relation
// @optional
func (raidQueryAvatarsOnRaidsRelations) Every(
	params ...iAvatarsOnRaidsParams,
) raidParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return raidParams{
		data: builder.Field{
			Name:   "AvatarsOnRaids",
			Action: "every",
			Fields: fields,
		},
	}
}

func (raidQueryAvatarsOnRaidsRelations) Fetch(

	params ...iAvatarsOnRaidsParams,

) raidToAvatarsOnRaidsFindMany {
	var v raidToAvatarsOnRaidsFindMany

	v.query.Operation = "query"
	v.query.Method = "AvatarsOnRaids"
	v.query.Outputs = avatarsOnRaidsOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r raidQueryAvatarsOnRaidsRelations) Link(
	params ...iAvatarsOnRaidsParams,
) raidSetParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return raidSetParams{
		data: builder.Field{
			Name: "AvatarsOnRaids",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: fields,
				},
			},
		},
	}
}

func (r raidQueryAvatarsOnRaidsRelations) Unlink() raidSetParams {
	return raidSetParams{
		data: builder.Field{
			Name: "AvatarsOnRaids",
			Fields: []builder.Field{
				{
					Name:  "disconnect",
					Value: true,
				},
			},
		},
	}
}

// base struct
type raidQueryRaidBossesOnRaidsRaidBossesOnRaids struct{}

type raidQueryRaidBossesOnRaidsRelations struct{}

// Raid -> RaidBossesOnRaids
//
// @relation
// @optional
func (raidQueryRaidBossesOnRaidsRelations) Some(
	params ...iRaidBossesOnRaidsParams,
) raidParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return raidParams{
		data: builder.Field{
			Name:   "RaidBossesOnRaids",
			Action: "some",
			Fields: fields,
		},
	}
}

// Raid -> RaidBossesOnRaids
//
// @relation
// @optional
func (raidQueryRaidBossesOnRaidsRelations) Every(
	params ...iRaidBossesOnRaidsParams,
) raidParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return raidParams{
		data: builder.Field{
			Name:   "RaidBossesOnRaids",
			Action: "every",
			Fields: fields,
		},
	}
}

func (raidQueryRaidBossesOnRaidsRelations) Fetch(

	params ...iRaidBossesOnRaidsParams,

) raidToRaidBossesOnRaidsFindMany {
	var v raidToRaidBossesOnRaidsFindMany

	v.query.Operation = "query"
	v.query.Method = "RaidBossesOnRaids"
	v.query.Outputs = raidBossesOnRaidsOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r raidQueryRaidBossesOnRaidsRelations) Link(
	params ...iRaidBossesOnRaidsParams,
) raidSetParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return raidSetParams{
		data: builder.Field{
			Name: "RaidBossesOnRaids",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: fields,
				},
			},
		},
	}
}

func (r raidQueryRaidBossesOnRaidsRelations) Unlink() raidSetParams {
	return raidSetParams{
		data: builder.Field{
			Name: "RaidBossesOnRaids",
			Fields: []builder.Field{
				{
					Name:  "disconnect",
					Value: true,
				},
			},
		},
	}
}

// RaidBoss acts as a namespaces to access query methods for the RaidBoss model
var RaidBoss = raidBossQuery{}

// raidBossQuery exposes query functions for the raidBoss model
type raidBossQuery struct {
	// ID
	//
	// @required
	ID raidBossQueryIDInt

	// CreatedAt
	//
	// @required
	CreatedAt raidBossQueryCreatedAtDateTime

	// DeletedAt
	//
	// @optional
	DeletedAt raidBossQueryDeletedAtDateTime

	// UpdatedAt
	//
	// @required
	UpdatedAt raidBossQueryUpdatedAtDateTime

	// Name
	//
	// @required
	// @unique
	Name raidBossQueryNameString

	// Image
	//
	// @optional
	Image raidBossQueryImageString

	RaidBossesOnRaids raidBossQueryRaidBossesOnRaidsRelations

	RaidAttack raidBossQueryRaidAttackRelations
}

func (raidBossQuery) Not(params ...iRaidBossParams) raidBossParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return raidBossParams{
		data: builder.Field{
			Name:     "NOT",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (raidBossQuery) Or(params ...iRaidBossParams) raidBossParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return raidBossParams{
		data: builder.Field{
			Name:     "OR",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

// searched for field raidId_avatarId_raidBossId
// type: RaidIdAvatarIdRaidBossIdCompoundUniqueInput

// searched for field raidId_avatarId
// type: RaidIdAvatarIdCompoundUniqueInput

// searched for field raidId_raidBossId
// type: RaidIdRaidBossIdCompoundUniqueInput

// base struct
type raidBossQueryIDInt struct{}

// Set the required value of ID
func (r raidBossQueryIDInt) Set(value int) raidBossSetParams {

	return raidBossSetParams{
		data: builder.Field{
			Name:  "id",
			Value: value,
		},
	}

}

func (r raidBossQueryIDInt) Equals(value int) raidBossWithPrismaIDEqualsParamsUnique {
	return raidBossWithPrismaIDEqualsParamsUnique{
		data: builder.Field{
			Name:  "id",
			Value: value,
		},
	}
}

func (r raidBossQueryIDInt) In(values []int) raidBossParamsUnique {
	f := builder.Field{
		Name:   "id",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return raidBossParamsUnique{
		data: f,
	}
}

func (r raidBossQueryIDInt) Order(direction runtime.Direction) raidBossParams {
	return raidBossParams{
		data: builder.Field{
			Name:  "id",
			Value: direction,
		},
	}
}

func (r raidBossQueryIDInt) Cursor(cursor string) raidBossCursorParams {
	return raidBossCursorParams{
		data: builder.Field{
			Name:  "id",
			Value: cursor,
		},
	}
}

func (r raidBossQueryIDInt) LT(value int) raidBossParamsUnique {
	return raidBossParamsUnique{
		data: builder.Field{
			Action: "lt",
			Name:   "id",
			Value:  value,
		},
	}
}

func (r raidBossQueryIDInt) GT(value int) raidBossParamsUnique {
	return raidBossParamsUnique{
		data: builder.Field{
			Action: "gt",
			Name:   "id",
			Value:  value,
		},
	}
}

func (r raidBossQueryIDInt) LTE(value int) raidBossParamsUnique {
	return raidBossParamsUnique{
		data: builder.Field{
			Action: "lte",
			Name:   "id",
			Value:  value,
		},
	}
}

func (r raidBossQueryIDInt) GTE(value int) raidBossParamsUnique {
	return raidBossParamsUnique{
		data: builder.Field{
			Action: "gte",
			Name:   "id",
			Value:  value,
		},
	}
}

// base struct
type raidBossQueryCreatedAtDateTime struct{}

// Set the required value of CreatedAt
func (r raidBossQueryCreatedAtDateTime) Set(value DateTime) raidBossSetParams {

	return raidBossSetParams{
		data: builder.Field{
			Name:  "createdAt",
			Value: value,
		},
	}

}

func (r raidBossQueryCreatedAtDateTime) Equals(value DateTime) raidBossWithPrismaCreatedAtEqualsParams {
	return raidBossWithPrismaCreatedAtEqualsParams{
		data: builder.Field{
			Name:  "createdAt",
			Value: value,
		},
	}
}

func (r raidBossQueryCreatedAtDateTime) In(values []DateTime) raidBossParams {
	f := builder.Field{
		Name:   "createdAt",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return raidBossParams{
		data: f,
	}
}

func (r raidBossQueryCreatedAtDateTime) Order(direction runtime.Direction) raidBossParams {
	return raidBossParams{
		data: builder.Field{
			Name:  "createdAt",
			Value: direction,
		},
	}
}

func (r raidBossQueryCreatedAtDateTime) Before(value DateTime) raidBossParams {
	return raidBossParams{
		data: builder.Field{
			Action: "lt",
			Name:   "createdAt",
			Value:  value,
		},
	}
}

func (r raidBossQueryCreatedAtDateTime) After(value DateTime) raidBossParams {
	return raidBossParams{
		data: builder.Field{
			Action: "gt",
			Name:   "createdAt",
			Value:  value,
		},
	}
}

func (r raidBossQueryCreatedAtDateTime) BeforeEquals(value DateTime) raidBossParams {
	return raidBossParams{
		data: builder.Field{
			Action: "lte",
			Name:   "createdAt",
			Value:  value,
		},
	}
}

func (r raidBossQueryCreatedAtDateTime) AfterEquals(value DateTime) raidBossParams {
	return raidBossParams{
		data: builder.Field{
			Action: "gte",
			Name:   "createdAt",
			Value:  value,
		},
	}
}

// base struct
type raidBossQueryDeletedAtDateTime struct{}

// Set the optional value of DeletedAt
func (r raidBossQueryDeletedAtDateTime) Set(value DateTime) raidBossSetParams {

	return raidBossSetParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: value,
		},
	}

}

// Set the optional value of DeletedAt dynamically
func (r raidBossQueryDeletedAtDateTime) SetOptional(value *DateTime) raidBossSetParams {
	if value == nil {

		var v *DateTime
		return raidBossSetParams{
			data: builder.Field{
				Name:  "deletedAt",
				Value: v,
			},
		}
	}

	return r.Set(*value)
}

func (r raidBossQueryDeletedAtDateTime) Equals(value DateTime) raidBossWithPrismaDeletedAtEqualsParams {
	return raidBossWithPrismaDeletedAtEqualsParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: value,
		},
	}
}

func (r raidBossQueryDeletedAtDateTime) In(values []DateTime) raidBossParams {
	f := builder.Field{
		Name:   "deletedAt",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return raidBossParams{
		data: f,
	}
}

func (r raidBossQueryDeletedAtDateTime) EqualsOptional(value *DateTime) raidBossParams {
	return raidBossParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: value,
		},
	}
}

func (r raidBossQueryDeletedAtDateTime) IsNull() raidBossParams {
	var str *string = nil
	return raidBossParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: str,
		},
	}
}

func (r raidBossQueryDeletedAtDateTime) Order(direction runtime.Direction) raidBossParams {
	return raidBossParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: direction,
		},
	}
}

func (r raidBossQueryDeletedAtDateTime) Before(value DateTime) raidBossParams {
	return raidBossParams{
		data: builder.Field{
			Action: "lt",
			Name:   "deletedAt",
			Value:  value,
		},
	}
}

func (r raidBossQueryDeletedAtDateTime) After(value DateTime) raidBossParams {
	return raidBossParams{
		data: builder.Field{
			Action: "gt",
			Name:   "deletedAt",
			Value:  value,
		},
	}
}

func (r raidBossQueryDeletedAtDateTime) BeforeEquals(value DateTime) raidBossParams {
	return raidBossParams{
		data: builder.Field{
			Action: "lte",
			Name:   "deletedAt",
			Value:  value,
		},
	}
}

func (r raidBossQueryDeletedAtDateTime) AfterEquals(value DateTime) raidBossParams {
	return raidBossParams{
		data: builder.Field{
			Action: "gte",
			Name:   "deletedAt",
			Value:  value,
		},
	}
}

// base struct
type raidBossQueryUpdatedAtDateTime struct{}

// Set the required value of UpdatedAt
func (r raidBossQueryUpdatedAtDateTime) Set(value DateTime) raidBossSetParams {

	return raidBossSetParams{
		data: builder.Field{
			Name:  "updatedAt",
			Value: value,
		},
	}

}

func (r raidBossQueryUpdatedAtDateTime) Equals(value DateTime) raidBossWithPrismaUpdatedAtEqualsParams {
	return raidBossWithPrismaUpdatedAtEqualsParams{
		data: builder.Field{
			Name:  "updatedAt",
			Value: value,
		},
	}
}

func (r raidBossQueryUpdatedAtDateTime) In(values []DateTime) raidBossParams {
	f := builder.Field{
		Name:   "updatedAt",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return raidBossParams{
		data: f,
	}
}

func (r raidBossQueryUpdatedAtDateTime) Order(direction runtime.Direction) raidBossParams {
	return raidBossParams{
		data: builder.Field{
			Name:  "updatedAt",
			Value: direction,
		},
	}
}

func (r raidBossQueryUpdatedAtDateTime) Before(value DateTime) raidBossParams {
	return raidBossParams{
		data: builder.Field{
			Action: "lt",
			Name:   "updatedAt",
			Value:  value,
		},
	}
}

func (r raidBossQueryUpdatedAtDateTime) After(value DateTime) raidBossParams {
	return raidBossParams{
		data: builder.Field{
			Action: "gt",
			Name:   "updatedAt",
			Value:  value,
		},
	}
}

func (r raidBossQueryUpdatedAtDateTime) BeforeEquals(value DateTime) raidBossParams {
	return raidBossParams{
		data: builder.Field{
			Action: "lte",
			Name:   "updatedAt",
			Value:  value,
		},
	}
}

func (r raidBossQueryUpdatedAtDateTime) AfterEquals(value DateTime) raidBossParams {
	return raidBossParams{
		data: builder.Field{
			Action: "gte",
			Name:   "updatedAt",
			Value:  value,
		},
	}
}

// base struct
type raidBossQueryNameString struct{}

// Set the required value of Name
func (r raidBossQueryNameString) Set(value string) raidBossWithPrismaNameSetParams {

	return raidBossWithPrismaNameSetParams{
		data: builder.Field{
			Name:  "name",
			Value: value,
		},
	}

}

func (r raidBossQueryNameString) Equals(value string) raidBossWithPrismaNameEqualsParamsUnique {
	return raidBossWithPrismaNameEqualsParamsUnique{
		data: builder.Field{
			Name:  "name",
			Value: value,
		},
	}
}

func (r raidBossQueryNameString) In(values []string) raidBossParamsUnique {
	f := builder.Field{
		Name:   "name",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return raidBossParamsUnique{
		data: f,
	}
}

func (r raidBossQueryNameString) Order(direction runtime.Direction) raidBossParams {
	return raidBossParams{
		data: builder.Field{
			Name:  "name",
			Value: direction,
		},
	}
}

func (r raidBossQueryNameString) Cursor(cursor string) raidBossCursorParams {
	return raidBossCursorParams{
		data: builder.Field{
			Name:  "name",
			Value: cursor,
		},
	}
}

func (r raidBossQueryNameString) Contains(value string) raidBossParamsUnique {
	return raidBossParamsUnique{
		data: builder.Field{
			Action: "contains",
			Name:   "name",
			Value:  value,
		},
	}
}

func (r raidBossQueryNameString) HasPrefix(value string) raidBossParamsUnique {
	return raidBossParamsUnique{
		data: builder.Field{
			Action: "starts_with",
			Name:   "name",
			Value:  value,
		},
	}
}

func (r raidBossQueryNameString) HasSuffix(value string) raidBossParamsUnique {
	return raidBossParamsUnique{
		data: builder.Field{
			Action: "ends_with",
			Name:   "name",
			Value:  value,
		},
	}
}

// base struct
type raidBossQueryImageString struct{}

// Set the optional value of Image
func (r raidBossQueryImageString) Set(value string) raidBossSetParams {

	return raidBossSetParams{
		data: builder.Field{
			Name:  "image",
			Value: value,
		},
	}

}

// Set the optional value of Image dynamically
func (r raidBossQueryImageString) SetOptional(value *string) raidBossSetParams {
	if value == nil {

		var v *string
		return raidBossSetParams{
			data: builder.Field{
				Name:  "image",
				Value: v,
			},
		}
	}

	return r.Set(*value)
}

func (r raidBossQueryImageString) Equals(value string) raidBossWithPrismaImageEqualsParams {
	return raidBossWithPrismaImageEqualsParams{
		data: builder.Field{
			Name:  "image",
			Value: value,
		},
	}
}

func (r raidBossQueryImageString) In(values []string) raidBossParams {
	f := builder.Field{
		Name:   "image",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return raidBossParams{
		data: f,
	}
}

func (r raidBossQueryImageString) EqualsOptional(value *string) raidBossParams {
	return raidBossParams{
		data: builder.Field{
			Name:  "image",
			Value: value,
		},
	}
}

func (r raidBossQueryImageString) IsNull() raidBossParams {
	var str *string = nil
	return raidBossParams{
		data: builder.Field{
			Name:  "image",
			Value: str,
		},
	}
}

func (r raidBossQueryImageString) Order(direction runtime.Direction) raidBossParams {
	return raidBossParams{
		data: builder.Field{
			Name:  "image",
			Value: direction,
		},
	}
}

func (r raidBossQueryImageString) Contains(value string) raidBossParams {
	return raidBossParams{
		data: builder.Field{
			Action: "contains",
			Name:   "image",
			Value:  value,
		},
	}
}

func (r raidBossQueryImageString) HasPrefix(value string) raidBossParams {
	return raidBossParams{
		data: builder.Field{
			Action: "starts_with",
			Name:   "image",
			Value:  value,
		},
	}
}

func (r raidBossQueryImageString) HasSuffix(value string) raidBossParams {
	return raidBossParams{
		data: builder.Field{
			Action: "ends_with",
			Name:   "image",
			Value:  value,
		},
	}
}

// base struct
type raidBossQueryRaidBossesOnRaidsRaidBossesOnRaids struct{}

type raidBossQueryRaidBossesOnRaidsRelations struct{}

// RaidBoss -> RaidBossesOnRaids
//
// @relation
// @optional
func (raidBossQueryRaidBossesOnRaidsRelations) Some(
	params ...iRaidBossesOnRaidsParams,
) raidBossParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return raidBossParams{
		data: builder.Field{
			Name:   "RaidBossesOnRaids",
			Action: "some",
			Fields: fields,
		},
	}
}

// RaidBoss -> RaidBossesOnRaids
//
// @relation
// @optional
func (raidBossQueryRaidBossesOnRaidsRelations) Every(
	params ...iRaidBossesOnRaidsParams,
) raidBossParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return raidBossParams{
		data: builder.Field{
			Name:   "RaidBossesOnRaids",
			Action: "every",
			Fields: fields,
		},
	}
}

func (raidBossQueryRaidBossesOnRaidsRelations) Fetch(

	params ...iRaidBossesOnRaidsParams,

) raidBossToRaidBossesOnRaidsFindMany {
	var v raidBossToRaidBossesOnRaidsFindMany

	v.query.Operation = "query"
	v.query.Method = "RaidBossesOnRaids"
	v.query.Outputs = raidBossesOnRaidsOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r raidBossQueryRaidBossesOnRaidsRelations) Link(
	params ...iRaidBossesOnRaidsParams,
) raidBossSetParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return raidBossSetParams{
		data: builder.Field{
			Name: "RaidBossesOnRaids",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: fields,
				},
			},
		},
	}
}

func (r raidBossQueryRaidBossesOnRaidsRelations) Unlink() raidBossSetParams {
	return raidBossSetParams{
		data: builder.Field{
			Name: "RaidBossesOnRaids",
			Fields: []builder.Field{
				{
					Name:  "disconnect",
					Value: true,
				},
			},
		},
	}
}

// base struct
type raidBossQueryRaidAttackRaidAttack struct{}

type raidBossQueryRaidAttackRelations struct{}

// RaidBoss -> RaidAttack
//
// @relation
// @optional
func (raidBossQueryRaidAttackRelations) Some(
	params ...iRaidAttackParams,
) raidBossParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return raidBossParams{
		data: builder.Field{
			Name:   "RaidAttack",
			Action: "some",
			Fields: fields,
		},
	}
}

// RaidBoss -> RaidAttack
//
// @relation
// @optional
func (raidBossQueryRaidAttackRelations) Every(
	params ...iRaidAttackParams,
) raidBossParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return raidBossParams{
		data: builder.Field{
			Name:   "RaidAttack",
			Action: "every",
			Fields: fields,
		},
	}
}

func (raidBossQueryRaidAttackRelations) Fetch(

	params ...iRaidAttackParams,

) raidBossToRaidAttackFindMany {
	var v raidBossToRaidAttackFindMany

	v.query.Operation = "query"
	v.query.Method = "RaidAttack"
	v.query.Outputs = raidAttackOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r raidBossQueryRaidAttackRelations) Link(
	params ...iRaidAttackParams,
) raidBossSetParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return raidBossSetParams{
		data: builder.Field{
			Name: "RaidAttack",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: fields,
				},
			},
		},
	}
}

func (r raidBossQueryRaidAttackRelations) Unlink() raidBossSetParams {
	return raidBossSetParams{
		data: builder.Field{
			Name: "RaidAttack",
			Fields: []builder.Field{
				{
					Name:  "disconnect",
					Value: true,
				},
			},
		},
	}
}

// RaidAttack acts as a namespaces to access query methods for the RaidAttack model
var RaidAttack = raidAttackQuery{}

// raidAttackQuery exposes query functions for the raidAttack model
type raidAttackQuery struct {
	// CreatedAt
	//
	// @required
	CreatedAt raidAttackQueryCreatedAtDateTime

	// DeletedAt
	//
	// @optional
	DeletedAt raidAttackQueryDeletedAtDateTime

	// UpdatedAt
	//
	// @required
	UpdatedAt raidAttackQueryUpdatedAtDateTime

	Raid raidAttackQueryRaidRelations

	// RaidID
	//
	// @required
	RaidID raidAttackQueryRaidIDInt

	Avatar raidAttackQueryAvatarRelations

	// AvatarID
	//
	// @required
	AvatarID raidAttackQueryAvatarIDInt

	RaidBoss raidAttackQueryRaidBossRelations

	// RaidBossID
	//
	// @required
	RaidBossID raidAttackQueryRaidBossIDInt
}

func (raidAttackQuery) Not(params ...iRaidAttackParams) raidAttackParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return raidAttackParams{
		data: builder.Field{
			Name:     "NOT",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (raidAttackQuery) Or(params ...iRaidAttackParams) raidAttackParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return raidAttackParams{
		data: builder.Field{
			Name:     "OR",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

// searched for field raidId_avatarId_raidBossId
// type: RaidIdAvatarIdRaidBossIdCompoundUniqueInput

func (raidAttackQuery) RaidIDAvatarIDRaidBossID(
	_raidID iRaidAttackWithPrismaRaidIDEqualsParams,

	_avatarID iRaidAttackWithPrismaAvatarIDEqualsParams,

	_raidBossID iRaidAttackWithPrismaRaidBossIDEqualsParams,
) iRaidAttackEqualsParamsUnique {
	var fields []builder.Field

	fields = append(fields, _raidID.field())
	fields = append(fields, _avatarID.field())
	fields = append(fields, _raidBossID.field())

	return raidAttackEqualsParamsUnique{
		data: builder.Field{
			Name:   "raidId_avatarId_raidBossId",
			Fields: fields,
		},
	}
}

// searched for field raidId_avatarId
// type: RaidIdAvatarIdCompoundUniqueInput

// searched for field raidId_raidBossId
// type: RaidIdRaidBossIdCompoundUniqueInput

// base struct
type raidAttackQueryCreatedAtDateTime struct{}

// Set the required value of CreatedAt
func (r raidAttackQueryCreatedAtDateTime) Set(value DateTime) raidAttackSetParams {

	return raidAttackSetParams{
		data: builder.Field{
			Name:  "createdAt",
			Value: value,
		},
	}

}

func (r raidAttackQueryCreatedAtDateTime) Equals(value DateTime) raidAttackWithPrismaCreatedAtEqualsParams {
	return raidAttackWithPrismaCreatedAtEqualsParams{
		data: builder.Field{
			Name:  "createdAt",
			Value: value,
		},
	}
}

func (r raidAttackQueryCreatedAtDateTime) In(values []DateTime) raidAttackParams {
	f := builder.Field{
		Name:   "createdAt",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return raidAttackParams{
		data: f,
	}
}

func (r raidAttackQueryCreatedAtDateTime) Order(direction runtime.Direction) raidAttackParams {
	return raidAttackParams{
		data: builder.Field{
			Name:  "createdAt",
			Value: direction,
		},
	}
}

func (r raidAttackQueryCreatedAtDateTime) Before(value DateTime) raidAttackParams {
	return raidAttackParams{
		data: builder.Field{
			Action: "lt",
			Name:   "createdAt",
			Value:  value,
		},
	}
}

func (r raidAttackQueryCreatedAtDateTime) After(value DateTime) raidAttackParams {
	return raidAttackParams{
		data: builder.Field{
			Action: "gt",
			Name:   "createdAt",
			Value:  value,
		},
	}
}

func (r raidAttackQueryCreatedAtDateTime) BeforeEquals(value DateTime) raidAttackParams {
	return raidAttackParams{
		data: builder.Field{
			Action: "lte",
			Name:   "createdAt",
			Value:  value,
		},
	}
}

func (r raidAttackQueryCreatedAtDateTime) AfterEquals(value DateTime) raidAttackParams {
	return raidAttackParams{
		data: builder.Field{
			Action: "gte",
			Name:   "createdAt",
			Value:  value,
		},
	}
}

// base struct
type raidAttackQueryDeletedAtDateTime struct{}

// Set the optional value of DeletedAt
func (r raidAttackQueryDeletedAtDateTime) Set(value DateTime) raidAttackSetParams {

	return raidAttackSetParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: value,
		},
	}

}

// Set the optional value of DeletedAt dynamically
func (r raidAttackQueryDeletedAtDateTime) SetOptional(value *DateTime) raidAttackSetParams {
	if value == nil {

		var v *DateTime
		return raidAttackSetParams{
			data: builder.Field{
				Name:  "deletedAt",
				Value: v,
			},
		}
	}

	return r.Set(*value)
}

func (r raidAttackQueryDeletedAtDateTime) Equals(value DateTime) raidAttackWithPrismaDeletedAtEqualsParams {
	return raidAttackWithPrismaDeletedAtEqualsParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: value,
		},
	}
}

func (r raidAttackQueryDeletedAtDateTime) In(values []DateTime) raidAttackParams {
	f := builder.Field{
		Name:   "deletedAt",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return raidAttackParams{
		data: f,
	}
}

func (r raidAttackQueryDeletedAtDateTime) EqualsOptional(value *DateTime) raidAttackParams {
	return raidAttackParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: value,
		},
	}
}

func (r raidAttackQueryDeletedAtDateTime) IsNull() raidAttackParams {
	var str *string = nil
	return raidAttackParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: str,
		},
	}
}

func (r raidAttackQueryDeletedAtDateTime) Order(direction runtime.Direction) raidAttackParams {
	return raidAttackParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: direction,
		},
	}
}

func (r raidAttackQueryDeletedAtDateTime) Before(value DateTime) raidAttackParams {
	return raidAttackParams{
		data: builder.Field{
			Action: "lt",
			Name:   "deletedAt",
			Value:  value,
		},
	}
}

func (r raidAttackQueryDeletedAtDateTime) After(value DateTime) raidAttackParams {
	return raidAttackParams{
		data: builder.Field{
			Action: "gt",
			Name:   "deletedAt",
			Value:  value,
		},
	}
}

func (r raidAttackQueryDeletedAtDateTime) BeforeEquals(value DateTime) raidAttackParams {
	return raidAttackParams{
		data: builder.Field{
			Action: "lte",
			Name:   "deletedAt",
			Value:  value,
		},
	}
}

func (r raidAttackQueryDeletedAtDateTime) AfterEquals(value DateTime) raidAttackParams {
	return raidAttackParams{
		data: builder.Field{
			Action: "gte",
			Name:   "deletedAt",
			Value:  value,
		},
	}
}

// base struct
type raidAttackQueryUpdatedAtDateTime struct{}

// Set the required value of UpdatedAt
func (r raidAttackQueryUpdatedAtDateTime) Set(value DateTime) raidAttackSetParams {

	return raidAttackSetParams{
		data: builder.Field{
			Name:  "updatedAt",
			Value: value,
		},
	}

}

func (r raidAttackQueryUpdatedAtDateTime) Equals(value DateTime) raidAttackWithPrismaUpdatedAtEqualsParams {
	return raidAttackWithPrismaUpdatedAtEqualsParams{
		data: builder.Field{
			Name:  "updatedAt",
			Value: value,
		},
	}
}

func (r raidAttackQueryUpdatedAtDateTime) In(values []DateTime) raidAttackParams {
	f := builder.Field{
		Name:   "updatedAt",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return raidAttackParams{
		data: f,
	}
}

func (r raidAttackQueryUpdatedAtDateTime) Order(direction runtime.Direction) raidAttackParams {
	return raidAttackParams{
		data: builder.Field{
			Name:  "updatedAt",
			Value: direction,
		},
	}
}

func (r raidAttackQueryUpdatedAtDateTime) Before(value DateTime) raidAttackParams {
	return raidAttackParams{
		data: builder.Field{
			Action: "lt",
			Name:   "updatedAt",
			Value:  value,
		},
	}
}

func (r raidAttackQueryUpdatedAtDateTime) After(value DateTime) raidAttackParams {
	return raidAttackParams{
		data: builder.Field{
			Action: "gt",
			Name:   "updatedAt",
			Value:  value,
		},
	}
}

func (r raidAttackQueryUpdatedAtDateTime) BeforeEquals(value DateTime) raidAttackParams {
	return raidAttackParams{
		data: builder.Field{
			Action: "lte",
			Name:   "updatedAt",
			Value:  value,
		},
	}
}

func (r raidAttackQueryUpdatedAtDateTime) AfterEquals(value DateTime) raidAttackParams {
	return raidAttackParams{
		data: builder.Field{
			Action: "gte",
			Name:   "updatedAt",
			Value:  value,
		},
	}
}

// base struct
type raidAttackQueryRaidRaid struct{}

type raidAttackQueryRaidRelations struct{}

// RaidAttack -> Raid
//
// @relation
// @required
func (raidAttackQueryRaidRelations) Where(
	params ...iRaidParams,
) raidAttackParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return raidAttackParams{
		data: builder.Field{
			Name:   "raid",
			Action: "",
			Fields: fields,
		},
	}
}

func (raidAttackQueryRaidRelations) Fetch() raidAttackToRaidFindOne {
	var v raidAttackToRaidFindOne

	v.query.Operation = "query"
	v.query.Method = "raid"
	v.query.Outputs = raidOutput

	return v
}

func (r raidAttackQueryRaidRelations) Link(
	params ...iRaidParams,
) raidAttackWithPrismaRaidSetParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return raidAttackWithPrismaRaidSetParams{
		data: builder.Field{
			Name: "raid",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: fields,
				},
			},
		},
	}
}

// base struct
type raidAttackQueryRaidIDInt struct{}

// Set the required value of RaidID
func (r raidAttackQueryRaidIDInt) Set(value int) raidAttackWithPrismaRaidIDSetParams {

	return raidAttackWithPrismaRaidIDSetParams{
		data: builder.Field{
			Name:  "raidId",
			Value: value,
		},
	}

}

func (r raidAttackQueryRaidIDInt) Equals(value int) raidAttackWithPrismaRaidIDEqualsParams {
	return raidAttackWithPrismaRaidIDEqualsParams{
		data: builder.Field{
			Name:  "raidId",
			Value: value,
		},
	}
}

func (r raidAttackQueryRaidIDInt) In(values []int) raidAttackParams {
	f := builder.Field{
		Name:   "raidId",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return raidAttackParams{
		data: f,
	}
}

func (r raidAttackQueryRaidIDInt) Order(direction runtime.Direction) raidAttackParams {
	return raidAttackParams{
		data: builder.Field{
			Name:  "raidId",
			Value: direction,
		},
	}
}

func (r raidAttackQueryRaidIDInt) LT(value int) raidAttackParams {
	return raidAttackParams{
		data: builder.Field{
			Action: "lt",
			Name:   "raidId",
			Value:  value,
		},
	}
}

func (r raidAttackQueryRaidIDInt) GT(value int) raidAttackParams {
	return raidAttackParams{
		data: builder.Field{
			Action: "gt",
			Name:   "raidId",
			Value:  value,
		},
	}
}

func (r raidAttackQueryRaidIDInt) LTE(value int) raidAttackParams {
	return raidAttackParams{
		data: builder.Field{
			Action: "lte",
			Name:   "raidId",
			Value:  value,
		},
	}
}

func (r raidAttackQueryRaidIDInt) GTE(value int) raidAttackParams {
	return raidAttackParams{
		data: builder.Field{
			Action: "gte",
			Name:   "raidId",
			Value:  value,
		},
	}
}

// base struct
type raidAttackQueryAvatarAvatar struct{}

type raidAttackQueryAvatarRelations struct{}

// RaidAttack -> Avatar
//
// @relation
// @required
func (raidAttackQueryAvatarRelations) Where(
	params ...iAvatarParams,
) raidAttackParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return raidAttackParams{
		data: builder.Field{
			Name:   "avatar",
			Action: "",
			Fields: fields,
		},
	}
}

func (raidAttackQueryAvatarRelations) Fetch() raidAttackToAvatarFindOne {
	var v raidAttackToAvatarFindOne

	v.query.Operation = "query"
	v.query.Method = "avatar"
	v.query.Outputs = avatarOutput

	return v
}

func (r raidAttackQueryAvatarRelations) Link(
	params ...iAvatarParams,
) raidAttackWithPrismaAvatarSetParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return raidAttackWithPrismaAvatarSetParams{
		data: builder.Field{
			Name: "avatar",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: fields,
				},
			},
		},
	}
}

// base struct
type raidAttackQueryAvatarIDInt struct{}

// Set the required value of AvatarID
func (r raidAttackQueryAvatarIDInt) Set(value int) raidAttackWithPrismaAvatarIDSetParams {

	return raidAttackWithPrismaAvatarIDSetParams{
		data: builder.Field{
			Name:  "avatarId",
			Value: value,
		},
	}

}

func (r raidAttackQueryAvatarIDInt) Equals(value int) raidAttackWithPrismaAvatarIDEqualsParams {
	return raidAttackWithPrismaAvatarIDEqualsParams{
		data: builder.Field{
			Name:  "avatarId",
			Value: value,
		},
	}
}

func (r raidAttackQueryAvatarIDInt) In(values []int) raidAttackParams {
	f := builder.Field{
		Name:   "avatarId",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return raidAttackParams{
		data: f,
	}
}

func (r raidAttackQueryAvatarIDInt) Order(direction runtime.Direction) raidAttackParams {
	return raidAttackParams{
		data: builder.Field{
			Name:  "avatarId",
			Value: direction,
		},
	}
}

func (r raidAttackQueryAvatarIDInt) LT(value int) raidAttackParams {
	return raidAttackParams{
		data: builder.Field{
			Action: "lt",
			Name:   "avatarId",
			Value:  value,
		},
	}
}

func (r raidAttackQueryAvatarIDInt) GT(value int) raidAttackParams {
	return raidAttackParams{
		data: builder.Field{
			Action: "gt",
			Name:   "avatarId",
			Value:  value,
		},
	}
}

func (r raidAttackQueryAvatarIDInt) LTE(value int) raidAttackParams {
	return raidAttackParams{
		data: builder.Field{
			Action: "lte",
			Name:   "avatarId",
			Value:  value,
		},
	}
}

func (r raidAttackQueryAvatarIDInt) GTE(value int) raidAttackParams {
	return raidAttackParams{
		data: builder.Field{
			Action: "gte",
			Name:   "avatarId",
			Value:  value,
		},
	}
}

// base struct
type raidAttackQueryRaidBossRaidBoss struct{}

type raidAttackQueryRaidBossRelations struct{}

// RaidAttack -> RaidBoss
//
// @relation
// @required
func (raidAttackQueryRaidBossRelations) Where(
	params ...iRaidBossParams,
) raidAttackParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return raidAttackParams{
		data: builder.Field{
			Name:   "RaidBoss",
			Action: "",
			Fields: fields,
		},
	}
}

func (raidAttackQueryRaidBossRelations) Fetch() raidAttackToRaidBossFindOne {
	var v raidAttackToRaidBossFindOne

	v.query.Operation = "query"
	v.query.Method = "RaidBoss"
	v.query.Outputs = raidBossOutput

	return v
}

func (r raidAttackQueryRaidBossRelations) Link(
	params ...iRaidBossParams,
) raidAttackWithPrismaRaidBossSetParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return raidAttackWithPrismaRaidBossSetParams{
		data: builder.Field{
			Name: "RaidBoss",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: fields,
				},
			},
		},
	}
}

// base struct
type raidAttackQueryRaidBossIDInt struct{}

// Set the required value of RaidBossID
func (r raidAttackQueryRaidBossIDInt) Set(value int) raidAttackWithPrismaRaidBossIDSetParams {

	return raidAttackWithPrismaRaidBossIDSetParams{
		data: builder.Field{
			Name:  "raidBossId",
			Value: value,
		},
	}

}

func (r raidAttackQueryRaidBossIDInt) Equals(value int) raidAttackWithPrismaRaidBossIDEqualsParams {
	return raidAttackWithPrismaRaidBossIDEqualsParams{
		data: builder.Field{
			Name:  "raidBossId",
			Value: value,
		},
	}
}

func (r raidAttackQueryRaidBossIDInt) In(values []int) raidAttackParams {
	f := builder.Field{
		Name:   "raidBossId",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return raidAttackParams{
		data: f,
	}
}

func (r raidAttackQueryRaidBossIDInt) Order(direction runtime.Direction) raidAttackParams {
	return raidAttackParams{
		data: builder.Field{
			Name:  "raidBossId",
			Value: direction,
		},
	}
}

func (r raidAttackQueryRaidBossIDInt) LT(value int) raidAttackParams {
	return raidAttackParams{
		data: builder.Field{
			Action: "lt",
			Name:   "raidBossId",
			Value:  value,
		},
	}
}

func (r raidAttackQueryRaidBossIDInt) GT(value int) raidAttackParams {
	return raidAttackParams{
		data: builder.Field{
			Action: "gt",
			Name:   "raidBossId",
			Value:  value,
		},
	}
}

func (r raidAttackQueryRaidBossIDInt) LTE(value int) raidAttackParams {
	return raidAttackParams{
		data: builder.Field{
			Action: "lte",
			Name:   "raidBossId",
			Value:  value,
		},
	}
}

func (r raidAttackQueryRaidBossIDInt) GTE(value int) raidAttackParams {
	return raidAttackParams{
		data: builder.Field{
			Action: "gte",
			Name:   "raidBossId",
			Value:  value,
		},
	}
}

// AvatarsOnRaids acts as a namespaces to access query methods for the AvatarsOnRaids model
var AvatarsOnRaids = avatarsOnRaidsQuery{}

// avatarsOnRaidsQuery exposes query functions for the avatarsOnRaids model
type avatarsOnRaidsQuery struct {
	// CreatedAt
	//
	// @required
	CreatedAt avatarsOnRaidsQueryCreatedAtDateTime

	// DeletedAt
	//
	// @optional
	DeletedAt avatarsOnRaidsQueryDeletedAtDateTime

	// UpdatedAt
	//
	// @required
	UpdatedAt avatarsOnRaidsQueryUpdatedAtDateTime

	Raid avatarsOnRaidsQueryRaidRelations

	// RaidID
	//
	// @required
	RaidID avatarsOnRaidsQueryRaidIDInt

	Avatar avatarsOnRaidsQueryAvatarRelations

	// AvatarID
	//
	// @required
	AvatarID avatarsOnRaidsQueryAvatarIDInt
}

func (avatarsOnRaidsQuery) Not(params ...iAvatarsOnRaidsParams) avatarsOnRaidsParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return avatarsOnRaidsParams{
		data: builder.Field{
			Name:     "NOT",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (avatarsOnRaidsQuery) Or(params ...iAvatarsOnRaidsParams) avatarsOnRaidsParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return avatarsOnRaidsParams{
		data: builder.Field{
			Name:     "OR",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

// searched for field raidId_avatarId_raidBossId
// type: RaidIdAvatarIdRaidBossIdCompoundUniqueInput

// searched for field raidId_avatarId
// type: RaidIdAvatarIdCompoundUniqueInput

func (avatarsOnRaidsQuery) RaidIDAvatarID(
	_raidID iAvatarsOnRaidsWithPrismaRaidIDEqualsParams,

	_avatarID iAvatarsOnRaidsWithPrismaAvatarIDEqualsParams,
) iAvatarsOnRaidsEqualsParamsUnique {
	var fields []builder.Field

	fields = append(fields, _raidID.field())
	fields = append(fields, _avatarID.field())

	return avatarsOnRaidsEqualsParamsUnique{
		data: builder.Field{
			Name:   "raidId_avatarId",
			Fields: fields,
		},
	}
}

// searched for field raidId_raidBossId
// type: RaidIdRaidBossIdCompoundUniqueInput

// base struct
type avatarsOnRaidsQueryCreatedAtDateTime struct{}

// Set the required value of CreatedAt
func (r avatarsOnRaidsQueryCreatedAtDateTime) Set(value DateTime) avatarsOnRaidsSetParams {

	return avatarsOnRaidsSetParams{
		data: builder.Field{
			Name:  "createdAt",
			Value: value,
		},
	}

}

func (r avatarsOnRaidsQueryCreatedAtDateTime) Equals(value DateTime) avatarsOnRaidsWithPrismaCreatedAtEqualsParams {
	return avatarsOnRaidsWithPrismaCreatedAtEqualsParams{
		data: builder.Field{
			Name:  "createdAt",
			Value: value,
		},
	}
}

func (r avatarsOnRaidsQueryCreatedAtDateTime) In(values []DateTime) avatarsOnRaidsParams {
	f := builder.Field{
		Name:   "createdAt",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return avatarsOnRaidsParams{
		data: f,
	}
}

func (r avatarsOnRaidsQueryCreatedAtDateTime) Order(direction runtime.Direction) avatarsOnRaidsParams {
	return avatarsOnRaidsParams{
		data: builder.Field{
			Name:  "createdAt",
			Value: direction,
		},
	}
}

func (r avatarsOnRaidsQueryCreatedAtDateTime) Before(value DateTime) avatarsOnRaidsParams {
	return avatarsOnRaidsParams{
		data: builder.Field{
			Action: "lt",
			Name:   "createdAt",
			Value:  value,
		},
	}
}

func (r avatarsOnRaidsQueryCreatedAtDateTime) After(value DateTime) avatarsOnRaidsParams {
	return avatarsOnRaidsParams{
		data: builder.Field{
			Action: "gt",
			Name:   "createdAt",
			Value:  value,
		},
	}
}

func (r avatarsOnRaidsQueryCreatedAtDateTime) BeforeEquals(value DateTime) avatarsOnRaidsParams {
	return avatarsOnRaidsParams{
		data: builder.Field{
			Action: "lte",
			Name:   "createdAt",
			Value:  value,
		},
	}
}

func (r avatarsOnRaidsQueryCreatedAtDateTime) AfterEquals(value DateTime) avatarsOnRaidsParams {
	return avatarsOnRaidsParams{
		data: builder.Field{
			Action: "gte",
			Name:   "createdAt",
			Value:  value,
		},
	}
}

// base struct
type avatarsOnRaidsQueryDeletedAtDateTime struct{}

// Set the optional value of DeletedAt
func (r avatarsOnRaidsQueryDeletedAtDateTime) Set(value DateTime) avatarsOnRaidsSetParams {

	return avatarsOnRaidsSetParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: value,
		},
	}

}

// Set the optional value of DeletedAt dynamically
func (r avatarsOnRaidsQueryDeletedAtDateTime) SetOptional(value *DateTime) avatarsOnRaidsSetParams {
	if value == nil {

		var v *DateTime
		return avatarsOnRaidsSetParams{
			data: builder.Field{
				Name:  "deletedAt",
				Value: v,
			},
		}
	}

	return r.Set(*value)
}

func (r avatarsOnRaidsQueryDeletedAtDateTime) Equals(value DateTime) avatarsOnRaidsWithPrismaDeletedAtEqualsParams {
	return avatarsOnRaidsWithPrismaDeletedAtEqualsParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: value,
		},
	}
}

func (r avatarsOnRaidsQueryDeletedAtDateTime) In(values []DateTime) avatarsOnRaidsParams {
	f := builder.Field{
		Name:   "deletedAt",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return avatarsOnRaidsParams{
		data: f,
	}
}

func (r avatarsOnRaidsQueryDeletedAtDateTime) EqualsOptional(value *DateTime) avatarsOnRaidsParams {
	return avatarsOnRaidsParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: value,
		},
	}
}

func (r avatarsOnRaidsQueryDeletedAtDateTime) IsNull() avatarsOnRaidsParams {
	var str *string = nil
	return avatarsOnRaidsParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: str,
		},
	}
}

func (r avatarsOnRaidsQueryDeletedAtDateTime) Order(direction runtime.Direction) avatarsOnRaidsParams {
	return avatarsOnRaidsParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: direction,
		},
	}
}

func (r avatarsOnRaidsQueryDeletedAtDateTime) Before(value DateTime) avatarsOnRaidsParams {
	return avatarsOnRaidsParams{
		data: builder.Field{
			Action: "lt",
			Name:   "deletedAt",
			Value:  value,
		},
	}
}

func (r avatarsOnRaidsQueryDeletedAtDateTime) After(value DateTime) avatarsOnRaidsParams {
	return avatarsOnRaidsParams{
		data: builder.Field{
			Action: "gt",
			Name:   "deletedAt",
			Value:  value,
		},
	}
}

func (r avatarsOnRaidsQueryDeletedAtDateTime) BeforeEquals(value DateTime) avatarsOnRaidsParams {
	return avatarsOnRaidsParams{
		data: builder.Field{
			Action: "lte",
			Name:   "deletedAt",
			Value:  value,
		},
	}
}

func (r avatarsOnRaidsQueryDeletedAtDateTime) AfterEquals(value DateTime) avatarsOnRaidsParams {
	return avatarsOnRaidsParams{
		data: builder.Field{
			Action: "gte",
			Name:   "deletedAt",
			Value:  value,
		},
	}
}

// base struct
type avatarsOnRaidsQueryUpdatedAtDateTime struct{}

// Set the required value of UpdatedAt
func (r avatarsOnRaidsQueryUpdatedAtDateTime) Set(value DateTime) avatarsOnRaidsSetParams {

	return avatarsOnRaidsSetParams{
		data: builder.Field{
			Name:  "updatedAt",
			Value: value,
		},
	}

}

func (r avatarsOnRaidsQueryUpdatedAtDateTime) Equals(value DateTime) avatarsOnRaidsWithPrismaUpdatedAtEqualsParams {
	return avatarsOnRaidsWithPrismaUpdatedAtEqualsParams{
		data: builder.Field{
			Name:  "updatedAt",
			Value: value,
		},
	}
}

func (r avatarsOnRaidsQueryUpdatedAtDateTime) In(values []DateTime) avatarsOnRaidsParams {
	f := builder.Field{
		Name:   "updatedAt",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return avatarsOnRaidsParams{
		data: f,
	}
}

func (r avatarsOnRaidsQueryUpdatedAtDateTime) Order(direction runtime.Direction) avatarsOnRaidsParams {
	return avatarsOnRaidsParams{
		data: builder.Field{
			Name:  "updatedAt",
			Value: direction,
		},
	}
}

func (r avatarsOnRaidsQueryUpdatedAtDateTime) Before(value DateTime) avatarsOnRaidsParams {
	return avatarsOnRaidsParams{
		data: builder.Field{
			Action: "lt",
			Name:   "updatedAt",
			Value:  value,
		},
	}
}

func (r avatarsOnRaidsQueryUpdatedAtDateTime) After(value DateTime) avatarsOnRaidsParams {
	return avatarsOnRaidsParams{
		data: builder.Field{
			Action: "gt",
			Name:   "updatedAt",
			Value:  value,
		},
	}
}

func (r avatarsOnRaidsQueryUpdatedAtDateTime) BeforeEquals(value DateTime) avatarsOnRaidsParams {
	return avatarsOnRaidsParams{
		data: builder.Field{
			Action: "lte",
			Name:   "updatedAt",
			Value:  value,
		},
	}
}

func (r avatarsOnRaidsQueryUpdatedAtDateTime) AfterEquals(value DateTime) avatarsOnRaidsParams {
	return avatarsOnRaidsParams{
		data: builder.Field{
			Action: "gte",
			Name:   "updatedAt",
			Value:  value,
		},
	}
}

// base struct
type avatarsOnRaidsQueryRaidRaid struct{}

type avatarsOnRaidsQueryRaidRelations struct{}

// AvatarsOnRaids -> Raid
//
// @relation
// @required
func (avatarsOnRaidsQueryRaidRelations) Where(
	params ...iRaidParams,
) avatarsOnRaidsParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return avatarsOnRaidsParams{
		data: builder.Field{
			Name:   "raid",
			Action: "",
			Fields: fields,
		},
	}
}

func (avatarsOnRaidsQueryRaidRelations) Fetch() avatarsOnRaidsToRaidFindOne {
	var v avatarsOnRaidsToRaidFindOne

	v.query.Operation = "query"
	v.query.Method = "raid"
	v.query.Outputs = raidOutput

	return v
}

func (r avatarsOnRaidsQueryRaidRelations) Link(
	params ...iRaidParams,
) avatarsOnRaidsWithPrismaRaidSetParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return avatarsOnRaidsWithPrismaRaidSetParams{
		data: builder.Field{
			Name: "raid",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: fields,
				},
			},
		},
	}
}

// base struct
type avatarsOnRaidsQueryRaidIDInt struct{}

// Set the required value of RaidID
func (r avatarsOnRaidsQueryRaidIDInt) Set(value int) avatarsOnRaidsWithPrismaRaidIDSetParams {

	return avatarsOnRaidsWithPrismaRaidIDSetParams{
		data: builder.Field{
			Name:  "raidId",
			Value: value,
		},
	}

}

func (r avatarsOnRaidsQueryRaidIDInt) Equals(value int) avatarsOnRaidsWithPrismaRaidIDEqualsParams {
	return avatarsOnRaidsWithPrismaRaidIDEqualsParams{
		data: builder.Field{
			Name:  "raidId",
			Value: value,
		},
	}
}

func (r avatarsOnRaidsQueryRaidIDInt) In(values []int) avatarsOnRaidsParams {
	f := builder.Field{
		Name:   "raidId",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return avatarsOnRaidsParams{
		data: f,
	}
}

func (r avatarsOnRaidsQueryRaidIDInt) Order(direction runtime.Direction) avatarsOnRaidsParams {
	return avatarsOnRaidsParams{
		data: builder.Field{
			Name:  "raidId",
			Value: direction,
		},
	}
}

func (r avatarsOnRaidsQueryRaidIDInt) LT(value int) avatarsOnRaidsParams {
	return avatarsOnRaidsParams{
		data: builder.Field{
			Action: "lt",
			Name:   "raidId",
			Value:  value,
		},
	}
}

func (r avatarsOnRaidsQueryRaidIDInt) GT(value int) avatarsOnRaidsParams {
	return avatarsOnRaidsParams{
		data: builder.Field{
			Action: "gt",
			Name:   "raidId",
			Value:  value,
		},
	}
}

func (r avatarsOnRaidsQueryRaidIDInt) LTE(value int) avatarsOnRaidsParams {
	return avatarsOnRaidsParams{
		data: builder.Field{
			Action: "lte",
			Name:   "raidId",
			Value:  value,
		},
	}
}

func (r avatarsOnRaidsQueryRaidIDInt) GTE(value int) avatarsOnRaidsParams {
	return avatarsOnRaidsParams{
		data: builder.Field{
			Action: "gte",
			Name:   "raidId",
			Value:  value,
		},
	}
}

// base struct
type avatarsOnRaidsQueryAvatarAvatar struct{}

type avatarsOnRaidsQueryAvatarRelations struct{}

// AvatarsOnRaids -> Avatar
//
// @relation
// @required
func (avatarsOnRaidsQueryAvatarRelations) Where(
	params ...iAvatarParams,
) avatarsOnRaidsParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return avatarsOnRaidsParams{
		data: builder.Field{
			Name:   "avatar",
			Action: "",
			Fields: fields,
		},
	}
}

func (avatarsOnRaidsQueryAvatarRelations) Fetch() avatarsOnRaidsToAvatarFindOne {
	var v avatarsOnRaidsToAvatarFindOne

	v.query.Operation = "query"
	v.query.Method = "avatar"
	v.query.Outputs = avatarOutput

	return v
}

func (r avatarsOnRaidsQueryAvatarRelations) Link(
	params ...iAvatarParams,
) avatarsOnRaidsWithPrismaAvatarSetParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return avatarsOnRaidsWithPrismaAvatarSetParams{
		data: builder.Field{
			Name: "avatar",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: fields,
				},
			},
		},
	}
}

// base struct
type avatarsOnRaidsQueryAvatarIDInt struct{}

// Set the required value of AvatarID
func (r avatarsOnRaidsQueryAvatarIDInt) Set(value int) avatarsOnRaidsWithPrismaAvatarIDSetParams {

	return avatarsOnRaidsWithPrismaAvatarIDSetParams{
		data: builder.Field{
			Name:  "avatarId",
			Value: value,
		},
	}

}

func (r avatarsOnRaidsQueryAvatarIDInt) Equals(value int) avatarsOnRaidsWithPrismaAvatarIDEqualsParams {
	return avatarsOnRaidsWithPrismaAvatarIDEqualsParams{
		data: builder.Field{
			Name:  "avatarId",
			Value: value,
		},
	}
}

func (r avatarsOnRaidsQueryAvatarIDInt) In(values []int) avatarsOnRaidsParams {
	f := builder.Field{
		Name:   "avatarId",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return avatarsOnRaidsParams{
		data: f,
	}
}

func (r avatarsOnRaidsQueryAvatarIDInt) Order(direction runtime.Direction) avatarsOnRaidsParams {
	return avatarsOnRaidsParams{
		data: builder.Field{
			Name:  "avatarId",
			Value: direction,
		},
	}
}

func (r avatarsOnRaidsQueryAvatarIDInt) LT(value int) avatarsOnRaidsParams {
	return avatarsOnRaidsParams{
		data: builder.Field{
			Action: "lt",
			Name:   "avatarId",
			Value:  value,
		},
	}
}

func (r avatarsOnRaidsQueryAvatarIDInt) GT(value int) avatarsOnRaidsParams {
	return avatarsOnRaidsParams{
		data: builder.Field{
			Action: "gt",
			Name:   "avatarId",
			Value:  value,
		},
	}
}

func (r avatarsOnRaidsQueryAvatarIDInt) LTE(value int) avatarsOnRaidsParams {
	return avatarsOnRaidsParams{
		data: builder.Field{
			Action: "lte",
			Name:   "avatarId",
			Value:  value,
		},
	}
}

func (r avatarsOnRaidsQueryAvatarIDInt) GTE(value int) avatarsOnRaidsParams {
	return avatarsOnRaidsParams{
		data: builder.Field{
			Action: "gte",
			Name:   "avatarId",
			Value:  value,
		},
	}
}

// RaidBossesOnRaids acts as a namespaces to access query methods for the RaidBossesOnRaids model
var RaidBossesOnRaids = raidBossesOnRaidsQuery{}

// raidBossesOnRaidsQuery exposes query functions for the raidBossesOnRaids model
type raidBossesOnRaidsQuery struct {
	// CreatedAt
	//
	// @required
	CreatedAt raidBossesOnRaidsQueryCreatedAtDateTime

	// DeletedAt
	//
	// @optional
	DeletedAt raidBossesOnRaidsQueryDeletedAtDateTime

	// UpdatedAt
	//
	// @required
	UpdatedAt raidBossesOnRaidsQueryUpdatedAtDateTime

	Raid raidBossesOnRaidsQueryRaidRelations

	// RaidID
	//
	// @required
	RaidID raidBossesOnRaidsQueryRaidIDInt

	RaidBoss raidBossesOnRaidsQueryRaidBossRelations

	// RaidBossID
	//
	// @required
	RaidBossID raidBossesOnRaidsQueryRaidBossIDInt
}

func (raidBossesOnRaidsQuery) Not(params ...iRaidBossesOnRaidsParams) raidBossesOnRaidsParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return raidBossesOnRaidsParams{
		data: builder.Field{
			Name:     "NOT",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (raidBossesOnRaidsQuery) Or(params ...iRaidBossesOnRaidsParams) raidBossesOnRaidsParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return raidBossesOnRaidsParams{
		data: builder.Field{
			Name:     "OR",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

// searched for field raidId_avatarId_raidBossId
// type: RaidIdAvatarIdRaidBossIdCompoundUniqueInput

// searched for field raidId_avatarId
// type: RaidIdAvatarIdCompoundUniqueInput

// searched for field raidId_raidBossId
// type: RaidIdRaidBossIdCompoundUniqueInput

func (raidBossesOnRaidsQuery) RaidIDRaidBossID(
	_raidID iRaidBossesOnRaidsWithPrismaRaidIDEqualsParams,

	_raidBossID iRaidBossesOnRaidsWithPrismaRaidBossIDEqualsParams,
) iRaidBossesOnRaidsEqualsParamsUnique {
	var fields []builder.Field

	fields = append(fields, _raidID.field())
	fields = append(fields, _raidBossID.field())

	return raidBossesOnRaidsEqualsParamsUnique{
		data: builder.Field{
			Name:   "raidId_raidBossId",
			Fields: fields,
		},
	}
}

// base struct
type raidBossesOnRaidsQueryCreatedAtDateTime struct{}

// Set the required value of CreatedAt
func (r raidBossesOnRaidsQueryCreatedAtDateTime) Set(value DateTime) raidBossesOnRaidsSetParams {

	return raidBossesOnRaidsSetParams{
		data: builder.Field{
			Name:  "createdAt",
			Value: value,
		},
	}

}

func (r raidBossesOnRaidsQueryCreatedAtDateTime) Equals(value DateTime) raidBossesOnRaidsWithPrismaCreatedAtEqualsParams {
	return raidBossesOnRaidsWithPrismaCreatedAtEqualsParams{
		data: builder.Field{
			Name:  "createdAt",
			Value: value,
		},
	}
}

func (r raidBossesOnRaidsQueryCreatedAtDateTime) In(values []DateTime) raidBossesOnRaidsParams {
	f := builder.Field{
		Name:   "createdAt",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return raidBossesOnRaidsParams{
		data: f,
	}
}

func (r raidBossesOnRaidsQueryCreatedAtDateTime) Order(direction runtime.Direction) raidBossesOnRaidsParams {
	return raidBossesOnRaidsParams{
		data: builder.Field{
			Name:  "createdAt",
			Value: direction,
		},
	}
}

func (r raidBossesOnRaidsQueryCreatedAtDateTime) Before(value DateTime) raidBossesOnRaidsParams {
	return raidBossesOnRaidsParams{
		data: builder.Field{
			Action: "lt",
			Name:   "createdAt",
			Value:  value,
		},
	}
}

func (r raidBossesOnRaidsQueryCreatedAtDateTime) After(value DateTime) raidBossesOnRaidsParams {
	return raidBossesOnRaidsParams{
		data: builder.Field{
			Action: "gt",
			Name:   "createdAt",
			Value:  value,
		},
	}
}

func (r raidBossesOnRaidsQueryCreatedAtDateTime) BeforeEquals(value DateTime) raidBossesOnRaidsParams {
	return raidBossesOnRaidsParams{
		data: builder.Field{
			Action: "lte",
			Name:   "createdAt",
			Value:  value,
		},
	}
}

func (r raidBossesOnRaidsQueryCreatedAtDateTime) AfterEquals(value DateTime) raidBossesOnRaidsParams {
	return raidBossesOnRaidsParams{
		data: builder.Field{
			Action: "gte",
			Name:   "createdAt",
			Value:  value,
		},
	}
}

// base struct
type raidBossesOnRaidsQueryDeletedAtDateTime struct{}

// Set the optional value of DeletedAt
func (r raidBossesOnRaidsQueryDeletedAtDateTime) Set(value DateTime) raidBossesOnRaidsSetParams {

	return raidBossesOnRaidsSetParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: value,
		},
	}

}

// Set the optional value of DeletedAt dynamically
func (r raidBossesOnRaidsQueryDeletedAtDateTime) SetOptional(value *DateTime) raidBossesOnRaidsSetParams {
	if value == nil {

		var v *DateTime
		return raidBossesOnRaidsSetParams{
			data: builder.Field{
				Name:  "deletedAt",
				Value: v,
			},
		}
	}

	return r.Set(*value)
}

func (r raidBossesOnRaidsQueryDeletedAtDateTime) Equals(value DateTime) raidBossesOnRaidsWithPrismaDeletedAtEqualsParams {
	return raidBossesOnRaidsWithPrismaDeletedAtEqualsParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: value,
		},
	}
}

func (r raidBossesOnRaidsQueryDeletedAtDateTime) In(values []DateTime) raidBossesOnRaidsParams {
	f := builder.Field{
		Name:   "deletedAt",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return raidBossesOnRaidsParams{
		data: f,
	}
}

func (r raidBossesOnRaidsQueryDeletedAtDateTime) EqualsOptional(value *DateTime) raidBossesOnRaidsParams {
	return raidBossesOnRaidsParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: value,
		},
	}
}

func (r raidBossesOnRaidsQueryDeletedAtDateTime) IsNull() raidBossesOnRaidsParams {
	var str *string = nil
	return raidBossesOnRaidsParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: str,
		},
	}
}

func (r raidBossesOnRaidsQueryDeletedAtDateTime) Order(direction runtime.Direction) raidBossesOnRaidsParams {
	return raidBossesOnRaidsParams{
		data: builder.Field{
			Name:  "deletedAt",
			Value: direction,
		},
	}
}

func (r raidBossesOnRaidsQueryDeletedAtDateTime) Before(value DateTime) raidBossesOnRaidsParams {
	return raidBossesOnRaidsParams{
		data: builder.Field{
			Action: "lt",
			Name:   "deletedAt",
			Value:  value,
		},
	}
}

func (r raidBossesOnRaidsQueryDeletedAtDateTime) After(value DateTime) raidBossesOnRaidsParams {
	return raidBossesOnRaidsParams{
		data: builder.Field{
			Action: "gt",
			Name:   "deletedAt",
			Value:  value,
		},
	}
}

func (r raidBossesOnRaidsQueryDeletedAtDateTime) BeforeEquals(value DateTime) raidBossesOnRaidsParams {
	return raidBossesOnRaidsParams{
		data: builder.Field{
			Action: "lte",
			Name:   "deletedAt",
			Value:  value,
		},
	}
}

func (r raidBossesOnRaidsQueryDeletedAtDateTime) AfterEquals(value DateTime) raidBossesOnRaidsParams {
	return raidBossesOnRaidsParams{
		data: builder.Field{
			Action: "gte",
			Name:   "deletedAt",
			Value:  value,
		},
	}
}

// base struct
type raidBossesOnRaidsQueryUpdatedAtDateTime struct{}

// Set the required value of UpdatedAt
func (r raidBossesOnRaidsQueryUpdatedAtDateTime) Set(value DateTime) raidBossesOnRaidsSetParams {

	return raidBossesOnRaidsSetParams{
		data: builder.Field{
			Name:  "updatedAt",
			Value: value,
		},
	}

}

func (r raidBossesOnRaidsQueryUpdatedAtDateTime) Equals(value DateTime) raidBossesOnRaidsWithPrismaUpdatedAtEqualsParams {
	return raidBossesOnRaidsWithPrismaUpdatedAtEqualsParams{
		data: builder.Field{
			Name:  "updatedAt",
			Value: value,
		},
	}
}

func (r raidBossesOnRaidsQueryUpdatedAtDateTime) In(values []DateTime) raidBossesOnRaidsParams {
	f := builder.Field{
		Name:   "updatedAt",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return raidBossesOnRaidsParams{
		data: f,
	}
}

func (r raidBossesOnRaidsQueryUpdatedAtDateTime) Order(direction runtime.Direction) raidBossesOnRaidsParams {
	return raidBossesOnRaidsParams{
		data: builder.Field{
			Name:  "updatedAt",
			Value: direction,
		},
	}
}

func (r raidBossesOnRaidsQueryUpdatedAtDateTime) Before(value DateTime) raidBossesOnRaidsParams {
	return raidBossesOnRaidsParams{
		data: builder.Field{
			Action: "lt",
			Name:   "updatedAt",
			Value:  value,
		},
	}
}

func (r raidBossesOnRaidsQueryUpdatedAtDateTime) After(value DateTime) raidBossesOnRaidsParams {
	return raidBossesOnRaidsParams{
		data: builder.Field{
			Action: "gt",
			Name:   "updatedAt",
			Value:  value,
		},
	}
}

func (r raidBossesOnRaidsQueryUpdatedAtDateTime) BeforeEquals(value DateTime) raidBossesOnRaidsParams {
	return raidBossesOnRaidsParams{
		data: builder.Field{
			Action: "lte",
			Name:   "updatedAt",
			Value:  value,
		},
	}
}

func (r raidBossesOnRaidsQueryUpdatedAtDateTime) AfterEquals(value DateTime) raidBossesOnRaidsParams {
	return raidBossesOnRaidsParams{
		data: builder.Field{
			Action: "gte",
			Name:   "updatedAt",
			Value:  value,
		},
	}
}

// base struct
type raidBossesOnRaidsQueryRaidRaid struct{}

type raidBossesOnRaidsQueryRaidRelations struct{}

// RaidBossesOnRaids -> Raid
//
// @relation
// @required
func (raidBossesOnRaidsQueryRaidRelations) Where(
	params ...iRaidParams,
) raidBossesOnRaidsParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return raidBossesOnRaidsParams{
		data: builder.Field{
			Name:   "raid",
			Action: "",
			Fields: fields,
		},
	}
}

func (raidBossesOnRaidsQueryRaidRelations) Fetch() raidBossesOnRaidsToRaidFindOne {
	var v raidBossesOnRaidsToRaidFindOne

	v.query.Operation = "query"
	v.query.Method = "raid"
	v.query.Outputs = raidOutput

	return v
}

func (r raidBossesOnRaidsQueryRaidRelations) Link(
	params ...iRaidParams,
) raidBossesOnRaidsWithPrismaRaidSetParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return raidBossesOnRaidsWithPrismaRaidSetParams{
		data: builder.Field{
			Name: "raid",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: fields,
				},
			},
		},
	}
}

// base struct
type raidBossesOnRaidsQueryRaidIDInt struct{}

// Set the required value of RaidID
func (r raidBossesOnRaidsQueryRaidIDInt) Set(value int) raidBossesOnRaidsWithPrismaRaidIDSetParams {

	return raidBossesOnRaidsWithPrismaRaidIDSetParams{
		data: builder.Field{
			Name:  "raidId",
			Value: value,
		},
	}

}

func (r raidBossesOnRaidsQueryRaidIDInt) Equals(value int) raidBossesOnRaidsWithPrismaRaidIDEqualsParams {
	return raidBossesOnRaidsWithPrismaRaidIDEqualsParams{
		data: builder.Field{
			Name:  "raidId",
			Value: value,
		},
	}
}

func (r raidBossesOnRaidsQueryRaidIDInt) In(values []int) raidBossesOnRaidsParams {
	f := builder.Field{
		Name:   "raidId",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return raidBossesOnRaidsParams{
		data: f,
	}
}

func (r raidBossesOnRaidsQueryRaidIDInt) Order(direction runtime.Direction) raidBossesOnRaidsParams {
	return raidBossesOnRaidsParams{
		data: builder.Field{
			Name:  "raidId",
			Value: direction,
		},
	}
}

func (r raidBossesOnRaidsQueryRaidIDInt) LT(value int) raidBossesOnRaidsParams {
	return raidBossesOnRaidsParams{
		data: builder.Field{
			Action: "lt",
			Name:   "raidId",
			Value:  value,
		},
	}
}

func (r raidBossesOnRaidsQueryRaidIDInt) GT(value int) raidBossesOnRaidsParams {
	return raidBossesOnRaidsParams{
		data: builder.Field{
			Action: "gt",
			Name:   "raidId",
			Value:  value,
		},
	}
}

func (r raidBossesOnRaidsQueryRaidIDInt) LTE(value int) raidBossesOnRaidsParams {
	return raidBossesOnRaidsParams{
		data: builder.Field{
			Action: "lte",
			Name:   "raidId",
			Value:  value,
		},
	}
}

func (r raidBossesOnRaidsQueryRaidIDInt) GTE(value int) raidBossesOnRaidsParams {
	return raidBossesOnRaidsParams{
		data: builder.Field{
			Action: "gte",
			Name:   "raidId",
			Value:  value,
		},
	}
}

// base struct
type raidBossesOnRaidsQueryRaidBossRaidBoss struct{}

type raidBossesOnRaidsQueryRaidBossRelations struct{}

// RaidBossesOnRaids -> RaidBoss
//
// @relation
// @required
func (raidBossesOnRaidsQueryRaidBossRelations) Where(
	params ...iRaidBossParams,
) raidBossesOnRaidsParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return raidBossesOnRaidsParams{
		data: builder.Field{
			Name:   "raidBoss",
			Action: "",
			Fields: fields,
		},
	}
}

func (raidBossesOnRaidsQueryRaidBossRelations) Fetch() raidBossesOnRaidsToRaidBossFindOne {
	var v raidBossesOnRaidsToRaidBossFindOne

	v.query.Operation = "query"
	v.query.Method = "raidBoss"
	v.query.Outputs = raidBossOutput

	return v
}

func (r raidBossesOnRaidsQueryRaidBossRelations) Link(
	params ...iRaidBossParams,
) raidBossesOnRaidsWithPrismaRaidBossSetParams {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return raidBossesOnRaidsWithPrismaRaidBossSetParams{
		data: builder.Field{
			Name: "raidBoss",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: fields,
				},
			},
		},
	}
}

// base struct
type raidBossesOnRaidsQueryRaidBossIDInt struct{}

// Set the required value of RaidBossID
func (r raidBossesOnRaidsQueryRaidBossIDInt) Set(value int) raidBossesOnRaidsWithPrismaRaidBossIDSetParams {

	return raidBossesOnRaidsWithPrismaRaidBossIDSetParams{
		data: builder.Field{
			Name:  "raidBossId",
			Value: value,
		},
	}

}

func (r raidBossesOnRaidsQueryRaidBossIDInt) Equals(value int) raidBossesOnRaidsWithPrismaRaidBossIDEqualsParams {
	return raidBossesOnRaidsWithPrismaRaidBossIDEqualsParams{
		data: builder.Field{
			Name:  "raidBossId",
			Value: value,
		},
	}
}

func (r raidBossesOnRaidsQueryRaidBossIDInt) In(values []int) raidBossesOnRaidsParams {
	f := builder.Field{
		Name:   "raidBossId",
		Action: "in",
		List:   true,
	}
	for _, v := range values {
		f.Fields = append(f.Fields, builder.Field{
			Value: v,
		})
	}
	return raidBossesOnRaidsParams{
		data: f,
	}
}

func (r raidBossesOnRaidsQueryRaidBossIDInt) Order(direction runtime.Direction) raidBossesOnRaidsParams {
	return raidBossesOnRaidsParams{
		data: builder.Field{
			Name:  "raidBossId",
			Value: direction,
		},
	}
}

func (r raidBossesOnRaidsQueryRaidBossIDInt) LT(value int) raidBossesOnRaidsParams {
	return raidBossesOnRaidsParams{
		data: builder.Field{
			Action: "lt",
			Name:   "raidBossId",
			Value:  value,
		},
	}
}

func (r raidBossesOnRaidsQueryRaidBossIDInt) GT(value int) raidBossesOnRaidsParams {
	return raidBossesOnRaidsParams{
		data: builder.Field{
			Action: "gt",
			Name:   "raidBossId",
			Value:  value,
		},
	}
}

func (r raidBossesOnRaidsQueryRaidBossIDInt) LTE(value int) raidBossesOnRaidsParams {
	return raidBossesOnRaidsParams{
		data: builder.Field{
			Action: "lte",
			Name:   "raidBossId",
			Value:  value,
		},
	}
}

func (r raidBossesOnRaidsQueryRaidBossIDInt) GTE(value int) raidBossesOnRaidsParams {
	return raidBossesOnRaidsParams{
		data: builder.Field{
			Action: "gte",
			Name:   "raidBossId",
			Value:  value,
		},
	}
}
