datasource db {
    provider = "postgresql"
    url = "***"
}

generator db {
    provider = "go run github.com/prisma/prisma-client-go"
}

model User {
    id              Int       @id @default(autoincrement())
    createdAt       DateTime  @default(now())
    deletedAt       DateTime?
    updatedAt       DateTime  @updatedAt
    discordUserId   String    @unique
    email           String?   @unique
    discordUsername String?   @unique
    firstName       String?
    lastName        String?
    avatar          Avatar?
}

model Avatar {
    id             Int              @id @default(autoincrement())
    createdAt      DateTime         @default(now())
    deletedAt      DateTime?
    updatedAt      DateTime         @updatedAt
    User           User             @relation(fields: [userId], references: [id])
    userId         Int              @unique
    AvatarsOnRaids AvatarsOnRaids[]
    Action         Action[]
}

model Raid {
    id                 Int                 @id @default(autoincrement())
    createdAt          DateTime            @default(now())
    deletedAt          DateTime?
    updatedAt          DateTime            @updatedAt
    startTime          DateTime            @default(now())
    endTime            DateTime?
    completionProgress Float               @default(0)
    active             Boolean             @default(false)
    playerLimit        Int                 @default(10)
    playerCount        Int                 @default(0)
    story              Story               @relation(fields: [storyId], references: [id])
    storyId            Int
    AvatarsOnRaids     AvatarsOnRaids[]
    RaidBossesOnRaids  RaidBossesOnRaids[]
}

model RaidBoss {
    id                Int                 @id @default(autoincrement())
    createdAt         DateTime            @default(now())
    deletedAt         DateTime?
    updatedAt         DateTime            @updatedAt
    name              String              @unique
    image             String?
    RaidBossesOnRaids RaidBossesOnRaids[]
}

model AvatarsOnRaids {
    createdAt DateTime  @default(now())
    deletedAt DateTime?
    updatedAt DateTime  @updatedAt
    position  Int
    raid      Raid      @relation(fields: [raidId], references: [id])
    raidId    Int
    avatar    Avatar    @relation(fields: [avatarId], references: [id])
    avatarId  Int

    @@id([raidId, avatarId, position])
}

model RaidBossesOnRaids {
    createdAt  DateTime  @default(now())
    deletedAt  DateTime?
    updatedAt  DateTime  @updatedAt
    raid       Raid      @relation(fields: [raidId], references: [id])
    raidId     Int
    raidBoss   RaidBoss  @relation(fields: [raidBossId], references: [id])
    raidBossId Int

    @@id([raidId, raidBossId])
}

// A Story is a series of events that can occur for a given raid
model Story {
    id        Int       @id @default(autoincrement())
    createdAt DateTime  @default(now())
    deletedAt DateTime?
    updatedAt DateTime  @updatedAt
    active    Boolean   @default(true)
    Event     Event[]
    Raid      Raid[]
}

// An Event represents a moment in a story in which Avatars can fulfill Actions
model Event {
    id        Int       @id @default(autoincrement())
    createdAt DateTime  @default(now())
    deletedAt DateTime?
    updatedAt DateTime  @updatedAt
    story     Story     @relation(fields: [storyId], references: [id])
    storyId   Int
    // The sequence dictates the order of events to occur in a story
    sequence  Int
    occurred  Boolean   @default(false)
    Action    Action[]

    @@unique([storyId, sequence])
}

// An Action indicates that an Avatar has taken action for an Event
model Action {
    id        Int       @id @default(autoincrement())
    createdAt DateTime  @default(now())
    deletedAt DateTime?
    updatedAt DateTime  @updatedAt
    event     Event     @relation(fields: [eventId], references: [id])
    eventId   Int
    avatar    Avatar    @relation(fields: [avatarId], references: [id])
    avatarId  Int

    @@unique([eventId, avatarId])
}

// A Message indicates its type of message (i.e. event message, player message), its sequence, and its content.
model Message {
    id        Int       @id @default(autoincrement())
    createdAt DateTime  @default(now())
    deletedAt DateTime?
    updatedAt DateTime  @updatedAt
    content   String
    type      String
    sequence  Int
}

// // A MessagesOnActions dictates what message corresponds to an action. It depends on the Avatar's raid team position.
// model MessagesOnActions {
//     createdAt DateTime  @default(now())
//     deletedAt DateTime?
//     updatedAt DateTime  @updatedAt
//     message   Message   @relation(fields: [messageId], references: [id])
//     messageId Int
//     sequence  Int

//     @@id([messageId, sequence])
// }

// // An Event may send messages to users on completion.
// model MessagesOnEvents {
//     createdAt DateTime  @default(now())
//     deletedAt DateTime?
//     updatedAt DateTime  @updatedAt
//     message   Message   @relation(fields: [messageId], references: [id])
//     messageId Int
//     event     Event     @relation(fields: [eventId], references: [id])
//     eventId   Int

//     @@id([messageId, eventId])
// }
